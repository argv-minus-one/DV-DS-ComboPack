// This needs to be registered in MAPINFO.
// See: https://zdoom.org/wiki/MAPINFO/GameInfo_definition#EventHandlers
// Alternatively, add the WorldThingDamaged code to an existing EventHandler or StaticEventHandler.
class SingleDamageRipperTracker : StaticEventHandler
{
	override void WorldThingDamaged(WorldEvent e)
	{
		if (e.Inflictor is "SingleDamageRipper")
				SingleDamageRipper(e.Inflictor).ActorsAlreadyHit.Push(e.Thing);

		if (e.Inflictor is "SingleDamageFastRipper")
				SingleDamageFastRipper(e.Inflictor).ActorsAlreadyHit.Push(e.Thing);
	}
}

class FireFloorAdjuster : StaticEventHandler 
{
	override void WorldLoaded(WorldEvent evt) 
	{
		if (gameinfo.gametype & GAME_Raven)
		{
			for (let i = 0, l = level.Sectors.Size(); i < l; i++)
			{
				//Console.Printf("    \czFireFloorAdjuster\c-: %d / %d", i, l);
				if (level.Sectors[i].damagetype == 'Fire' || level.Sectors[i].damagetype == 'Lava')
						level.Sectors[i].damagetype = 'Magma';
			}
		}
	}
}

/*
class episodic : eventhandler
{
	Override void WorldLoaded(WorldEvent e)
	{
		string curlevel = Level.MapName;
		if (curlevel ~== "E1M8" && Wads.FindLump("E2M1") != -1)
				Level.NextMap = "E2M1";
		else if (curlevel ~== "E2M8" && Wads.FindLump("E3M1") != -1)
				Level.NextMap = "E3M1";
		else if (curlevel ~== "E3M8" && Wads.FindLump("E4M1") != -1)
				Level.NextMap = "E4M1";
		else if (curlevel ~== "E4M8" && Wads.FindLump("E5M1") != -1)
				Level.NextMap = "E5M1";
	}
}
*/

/**
 * Keeps track of which maps have been visited. Can be used for calculating monster stats, etc.
 *
 * To set this up, make sure that AetheriusMapNumberListener (which keeps the tracker up to date) is listed in MAPINFO. In the gameinfo section of MAPINFO, you need to add:
 * 	AddEventHandlers = "AetheriusMapNumberListener"
 *
 * To use this, call the Get method, then call CurrentMapNumber (for the current map's number) or MapNumberOf (for some other map's number).
 *
 * To get the current map number from ACS, write:
 * 	ScriptCall("AetheriusMapNumberTracker", "SCurrentMapNumber")
 */
class AetheriusMapNumberTracker : Thinker
{
	Array<String> VisitedMaps;
	
	clearscope static AetheriusMapNumberTracker Get()
	{
		let t = AetheriusMapNumberTracker(ThinkerIterator.Create("AetheriusMapNumberTracker", statnum: STAT_STATIC).Next());
		if (!t)
			Console.Printf("\cgCouldn't find an AetheriusMapNumberTracker instance! AetheriusMapNumberListener (which keeps the tracker up to date) probably isn't listed in MAPINFO. To fix that, add this to the gameinfo section:\n\cg    AddEventHandlers = \"AetheriusMapNumberListener\"");
		return t;
	}
	
	static AetheriusMapNumberTracker GetOrNew()
	{
		let t = AetheriusMapNumberTracker(ThinkerIterator.Create("AetheriusMapNumberTracker", statnum: STAT_STATIC).Next());
		
		if (!t)
		{
			t = new("AetheriusMapNumberTracker");
			t.ChangeStatNum(STAT_STATIC);
		}
		
		return t;
	}
	
	int MapNumberOf(String mapName) const
	{
		mapName.ToUpper();
		let index = VisitedMaps.Find(mapName);
		if (index == VisitedMaps.Size()) // That map hasn't been visited yet.
			return -1;
		else
			return index;
	}
	
	int CurrentMapNumber() const
	{
		let num = MapNumberOf(level.MapName);
		
		if (num == -1)
			Console.Printf("\cgAetheriusMapNumberTracker doesn't know about the current map (%s)! Did you get this instance by some means other than calling its Get method?", level.MapName);
		
		return num;
	}
	
	void VisitMap()
	{
		// Normalize the map name to all uppercase, since lump names are case-insensitive.
		let mname = level.MapName;
		mname.ToUpper();
		
		// If this map hasn't already been visited, add it to the array.
		if (VisitedMaps.Find(mname) == VisitedMaps.Size())
			VisitedMaps.Push(mname);
	}
	
	/**
	 * Static version of CurrentMapNumber. This is a convenience in ZScript, and required for calling from ACS. Use this ACS code to get the map number:
	 *
	 * 	ScriptCall("AetheriusMapNumberTracker", "SCurrentMapNumber")
	 */
	clearscope static int SCurrentMapNumber()
	{
		let t = Get();
		if (t)
			return t.CurrentMapNumber();
		else
			return -1;
	}
}

class AetheriusMapNumberListener : StaticEventHandler
{
	override void WorldLoaded(WorldEvent evt)
	{
		// Only do this when changing maps.
		if (evt.IsSaveGame)
			return;
		
		AetheriusMapNumberTracker.GetOrNew().VisitMap();
	}
	
	override void ConsoleProcess(ConsoleEvent evt)
	{
		if (evt.Name ~== "AetheriusMapNumberDump")
		{
			let t = AetheriusMapNumberTracker.Get();
			if (!t)
				return;
			
			Console.Printf("All maps known to AetheriusMapNumberTracker:");
			for (let i = 0, size = t.VisitedMaps.Size(); i < size; i++)
				Console.Printf("    %d: %s", i, t.VisitedMaps[i]);
			Console.Printf("Total of %d maps tracked. Current map (%s) has number %d.", t.VisitedMaps.Size(), level.MapName, t.CurrentMapNumber());
		}
	}
}

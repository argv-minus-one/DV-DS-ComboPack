class PlayerStatItem : Inventory 
{
	const SKILL_VERY_EASY = 0;
	const SKILL_EASY = 1;
	const SKILL_NORMAL = 2;
	const SKILL_HARD = 3;
	const SKILL_VERY_HARD = 4;
	const SKILL_EXTREME = 5;
	const SKILL_HORRIBLE = 6;
	const SKILL_IMPOSSIBLE = 7;
	const SKILL_OMEGA = 8;

	int ClassCheck;
	int previoushealth, currenthealth;
	int outputdamage;
	int CharacterClass;
	int jiggle_jump, jiggle_crouch, jiggle_left, jiggle_right, jiggle_up, jiggle_down;
	
	int LevelupSpeechTimer1, LevelupSpeechTimer2;

	// Strife Flag Checks
	int StrifeQuestFlag1, StrifeQuestFlag2, StrifeQuestFlag3, StrifeQuestFlag4, StrifeQuestFlag5, StrifeQuestFlag6, StrifeQuestFlag7, StrifeQuestFlag8, StrifeQuestFlag9, StrifeQuestFlag10; 
	int StrifeQuestFlag11, StrifeQuestFlag12, StrifeQuestFlag13, StrifeQuestFlag14, StrifeQuestFlag15, StrifeQuestFlag16, StrifeQuestFlag17, StrifeQuestFlag18, StrifeQuestFlag19, StrifeQuestFlag20; 
	int StrifeQuestFlag21, StrifeQuestFlag22, StrifeQuestFlag23, StrifeQuestFlag24, StrifeQuestFlag25, StrifeQuestFlag26, StrifeQuestFlag27, StrifeQuestFlag28, StrifeQuestFlag29, StrifeQuestFlag30; 
	int StrifeQuestFlag31, StrifeQuestFlag32;
	
	int EXPComboTimer, MaxEXPCombotimer;
	
	int MonstersKilled[2000];
	int MonstersAlive[2000];
	int SecretsFound[2000];
	int SecretsLeft[2000];
	int ItemsFound[2000];
	int ItemsLeft[2000];

	double HPRegenTimer, HPDelayInterval;
	double HPDegenTimer, HPDelayInterval2;
	double MPRegenTimer, MPDelayInterval;
	double RuinousShieldDegenTimer, CursedShieldDegenTimer;
	double DivineRegenTimer, DivineRegenInterval;
	double DoveRegenTimer, DoveRegenInterval;
	double PoisonTimer, PoisonMaxInterval;
	double RuinousPtsCurrent, RuinousPtsNeeded;
	double UncurseInterval, UncurseMaxInterval;

	int LifeUpPerkComboCheck; // [9901]
	int LifeUpPerkFactor; // [9902]
	int LifeUpPerkBaseFactor; // [9903]
	int MagiUpPerkComboCheck; // [9904]
	int MagiUpPerkFactor; // [9905]
	int MagiUpPerkBaseFactor; // [9906]
	int StamUpgradeHPComboCheck; // [9907]
	int StamUpgradeHPPerkFactor; // [9908]
	int StamUpgradeHPPerkBaseFactor; // [9909]
	int StamUpgradeMPComboCheck; // [9910]
	int StamUpgradeMPPerkFactor; // [9911]
	int StamUpgradeMPPerkBaseFactor; // [9912]

	int landdmgbonus;
	int heldtime;
	int PrevHealthRatio;
	int PoisonHits;
	int SceptreStartLevel;
	int SceptreEXPRatio;
	
	int TensionLevel; // [181]
	int TensionTimer; // [183]
	int TensionWarmupTimer; // [185]
	int TensionCooldownTimer; // [186]
	int TensionChargeLoopTimer; // [189]
	int TensionActivePulseTimer; // [190]
	int TensionOverPsycheTimer; // [250]
	int TensionOverchargeTimer; // [251]
	int TensionMaxOverchargeTimer; // [261]
	int TensionMaxOverPsycheTimer; // [262]
	
	int DeathCheck, WasDead;
	int ArcanaRegenDelay;

	default 
	{
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}

	private class<Inventory> APPackToken, APPackCheck, APPackCheck2, APPackCheck3, APPackCheck4, iDTech1Check, iDTech1Check2, iDTech1Check3, iDTech1Check4;
	
	override void DoEffect()
	{
		string playername;
		let playeractor = AetheriusPlayerPawn(owner);
		if (playeractor) { playername = playeractor.GetClassName(); }
		if (!playeractor) { owner.A_TakeInventory("PlayerStatItem",9999); super.DoEffect(); } // Removes itself if given to a non-Aetherius Player Class

		String nm, nn, no, np;
		String pm, pn, po, pp;
		let weapon = owner.player.ReadyWeapon;
		int cheatcheck = owner.player.cheats;
		double PlayerVelX = owner.vel.x;
		double PlayerVelY = owner.vel.y;
		double PlayerVelZ = owner.vel.z;
		int buttons = owner.GetPlayerInput(INPUT_BUTTONS);

		int FreezePlayer;
		int debugsurvival = dvdsdebug_showsurvivalstuff;
		int debugcrithits = dvdsdebug_showcriticalhitstuff;
		int debugevasion = dvdsdebug_showevadestuff;
		int debugstaminaregen = dvdsdebug_showstaminaregenstuff;
		int debugregenmana = dvdsdebug_showmanaregenstuff;
		int debuguncurse = dvdsdebug_shielduncursedisplay;
		int debugcursedmg = dvdsdebug_cursedmgdisplay;
		int debugregenhealth = dvdsdebug_showhpregenstuff;
		int debugatkinfo = dvdsdebug_showplayeratkinformation;
		int debugpoisoninfo = dvdsdebug_poisonailmentdisplays;
		int debughellcorecldn = dvdsdebug_hellcoreheatdisplay;
		int debuginfiniteammo = dvdsdebug_infiniteammostuff;
		int debugtensioninfo = dvdsdebug_showtensioninformation;
		int debugexpcomboinfo = dvdsdebug_showexpdebugstuff;

		int AllowTension = dvds_allowtension;
		CharacterClass = CallACS("CheckCharacterClass");
		TensionLevel = CallACS("MiscVarCheckDECORATE",181);
		int PlayerLevel = CallACS("StatCheck",0);
		int PlayerMaxHP = CallACS("StatCheck",1);
		int MaxHealthLimit = PlayerMaxHP * 2;
		int PlayerMaxMP = CallACS("StatCheck",2);
		int PlayerAGL = CallACS("StatCheck",3);
		int PlayerDEF = CallACS("StatCheck",4);
		int PlayerDFT = CallACS("StatCheck",5);
		int PlayerSOR = CallACS("StatCheck",6);
		int PlayerSTR = CallACS("StatCheck",7);
		int PlayerTHE = CallACS("StatCheck",8);
		int PlayerJUMP = CallACS("StatCheck",9);
		int PlayerMASS = CallACS("StatCheck",10);
		int PlayerAeonPts = CallACS("StatCheck",11);
		int PlayerCurrentStamina = CallACS("StatCheck",12);
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int PlayerMaxStamina = CallACS("StatCheck",13);
		int PlayerCurrentMP = CallACS("StatCheck",14);
		int PlayerCurrentHealth = owner.health;
		int IsFocusOn = CallACS("MiscVarCheckDECORATE",212);
		int FocusTimer = CallACS("MiscVarCheckDECORATE",231);
		int FocusHumTimer;
		int BaseSceptreEXP;
		int SceptreLevelEXP;

		int TrueGameSkill = dvds_gendifficultycurve + Skill;
		ClassCheck = CallACS("OtherVarCheckDECORATE",4);
		int CurrentArmorClass = CallACS("OtherVarCheckDECORATE",5);
		int HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
		int ClassicDoomType = CallACS("OtherVarCheckDECORATE",7);
		int ModType = CallACS("OtherVarCheckDECORATE",8);

		int EvasionRate; // Based on 0.1% to 100.0% [though the displays only show full %]
		int AglEvadeCheck, DftEvadeCheck;
		int WeapEvadeAdd;
		int BasePerkFactor = 0;
		int PerkFactor = 0;
		int TotalMass = 100;
		int delaycount;
		int HealthRatio;
		int previousdelaycount = 0;
		int ArmorBits;

		SceptreStartLevel = dvds_sceptrestartlvl;
		int SceptreEXPRatio;
		int minigunheat = Owner.CountInv("MinigunHeat");
		int minigunheatmax = 100;
		
		// Perks
		int perks3mastered;
		int LifeUpPerkLevel = CallACS("MiscVarCheckDECORATE",10001);
		int LifeUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10002);
		int MagiUpPerkLevel = CallACS("MiscVarCheckDECORATE",10003);
		int MagiUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10004);
		int StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
		int StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
		int DodgeMorePerkLevel = CallACS("MiscVarCheckDECORATE",10007);
		int DodgeMoreEXPerkLevel = CallACS("MiscVarCheckDECORATE",10008);
		int JumpMorePerkLevel = CallACS("MiscVarCheckDECORATE",10009);
		int JumpMoreEXPerkLevel = CallACS("MiscVarCheckDECORATE",10010);
		int PsycheFastPerkLevel = CallACS("MiscVarCheckDECORATE",10011);
		int PsycheFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10012);
		int RegenHPFastPerkLevel = CallACS("MiscVarCheckDECORATE",10013);
		int RegenHPFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10014);
		int RegenMPFastPerkLevel = CallACS("MiscVarCheckDECORATE",10015);
		int RegenMPFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10016);
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int BulletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10019);
		int BulletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10020);
		//
		int OnTheMovePerkLevel = CallACS("MiscVarCheckDECORATE",10045);
		int OnTheMoveEXPerkLevel = CallACS("MiscVarCheckDECORATE",10046);
		//
		int WandMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10053);
		int WandMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10054);
		int ClearedOfMindParkLevel = CallACS("MiscVarCheckDECORATE",10055);
		int ClearedOfMindEXParkLevel = CallACS("MiscVarCheckDECORATE",10056);
		
		// Strife
		int StrifeStaminaLevel = CallACS("MiscVarCheckDECORATE",317);
		int StrifeAccuracyLevel = CallACS("MiscVarCheckDECORATE",318);
		
		// Misc
		int UsingInGameMenu = CallACS("MenuVarCheckDECORATE",0);
		
		// Buff Checks
		int NVLightTimer = CallACS("GetBuffTimer",0);
		int InvisibilityTimer = CallACS("GetBuffTimer",1);
		int FlightTimer = CallACS("GetBuffTimer",2);
		int StealthTimer = CallACS("GetBuffTimer",3);
		int InvulnerabilityTimer = CallACS("GetBuffTimer",4);
		int TimeFreezeTimer = CallACS("GetBuffTimer",5);
		int FearAuraTimer = CallACS("GetBuffTimer",6);
		int DivineAvatarTimer = CallACS("GetBuffTimer",7);
		int SpreadAura1Timer = CallACS("GetBuffTimer",8);
		int SpreadAura2Timer = CallACS("GetBuffTimer",9);
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int DQBuffTimer = CallACS("GetBuffTimer",11);
		int DQAcceleratleTimer = CallACS("GetBuffTimer",12);
		int DQBluntTimer = CallACS("GetBuffTimer",13);
		int DQSapTimer = CallACS("GetBuffTimer",14);
		int DQDeceleratleTimer = CallACS("GetBuffTimer",15);
		int PoisonedTimer = CallACS("GetBuffTimer",16);
		int CorrosionTimer = CallACS("GetBuffTimer",17);
		int FatigueTimer = CallACS("GetBuffTimer",18);
		int BlindTimer = CallACS("GetBuffTimer",19);
		int SleepTimer = CallACS("GetBuffTimer",20);
		int SilenceTimer = CallACS("GetBuffTimer",21);
		int RadSuitTimer = CallACS("GetBuffTimer",22);
		int BerserkTimer = CallACS("GetBuffTimer",23);
		int RegenerationTimer = CallACS("GetBuffTimer",24);
		int GoETimer = CallACS("GetBuffTimer",129);
		
		int debuginit = dvdsdebug_initdisplays;
		int debuglvlup = dvdsdebug_levelupdisplays;
		
		// Misc Checks
		int MenuModeToggle = CallACS("MiscVarCheckDECORATE",2500);
		
		//***************
		//*Tension Speed*
		//***************
		int tensionspeedmulti = GetCVar("dvds_tensionspeed");
		if (tensionspeedmulti <= 0) tensionspeedmulti = 0;
		if (tensionspeedmulti >= 1000) tensionspeedmulti = 1000;
		CallACS("MiscVarSetDECORATE",193,tensionspeedmulti);
		
		
		
		
		
		//**********************
		//*Initialization Stuff*
		//**********************
		if (playeractor)
		{
			if (ClassCheck == 0) // Will run the check only once at the beginning of a new game
			{
				CallACS("MiscVarSetDECORATE",1999,-1);
			}
			// Check for HUD type settings
			if (CallACS("MiscVarCheckDECORATE",1999) == -1)
			{
				CallACS("MiscVarSetDECORATE",2000,dvds_newhud);
			}
			if (ClassCheck == 1) // Will run the check only once at the beginning of a new game
			{
				owner.A_GiveInventory("GreaterVimstone",1);  owner.A_TakeInventory("GreaterVimstone",1);
				owner.A_GiveInventory("LesserVimstone",1);  owner.A_TakeInventory("LesserVimstone",1);
				owner.A_GiveInventory("MonsterMunchies",1);  owner.A_TakeInventory("MonsterMunchies",1);
				owner.A_GiveInventory("MercuryBandana",1);  owner.A_TakeInventory("MercuryBandana",1);
				owner.A_GiveInventory("PaxaPunch",1);  owner.A_TakeInventory("PaxaPunch",1);
				owner.A_GiveInventory("RockbombShard",1);  owner.A_TakeInventory("RockbombShard",1);
				owner.A_GiveInventory("YggdrasilDew",1);  owner.A_TakeInventory("YggdrasilDew",1);
				owner.A_GiveInventory("MiraclePotion",1);  owner.A_TakeInventory("MiraclePotion",1);
				owner.A_GiveInventory("ElfinElixir",1);  owner.A_TakeInventory("ElfinElixir",1);
				owner.A_GiveInventory("SageElixir",1);  owner.A_TakeInventory("SageElixir",1);
				owner.A_GiveInventory("MagicWater",1);  owner.A_TakeInventory("MagicWater",1);
				owner.A_GiveInventory("SpecialMedicine",1);  owner.A_TakeInventory("SpecialMedicine",1);
				owner.A_GiveInventory("StrongMedicine",1);  owner.A_TakeInventory("StrongMedicine",1);
				owner.A_GiveInventory("MedicinalHerb",1);  owner.A_TakeInventory("MedicinalHerb",1);
				if (ClassicDoomType == 2) // Heretic
				{
					pm = "ArtiInvulnerabilityNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiInvisibilityNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiEggNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiTeleportNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiSuperHealthNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiHealthNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
				}
				if (ClassicDoomType == 3) // Hexen
				{
					pm = "ArtiInvulnerability2New"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiPorkNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiDarkServantNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiTeleportOtherNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiTeleportNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiBoostManaNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiSuperHealthNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiHealingRadiusNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ArtiHealthNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
				}
				if (ClassicDoomType == 4) // Strife
				{
					pm = "DegninOreNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "TeleporterBeaconNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ShadowArmorNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "EnvironmentalSuitNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "TargeterNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "ScannerNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "SurgeryKitNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "MedicalKitNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					pm = "MedPatchNew"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);

					pm = "Coin"; iDTech1Check = pm; owner.A_GiveInventory(iDTech1Check,1);  owner.A_TakeInventory(iDTech1Check,1);
					if (TrueGameSkill <= SKILL_VERY_EASY) owner.A_GiveInventory(iDTech1Check,random(175,225));
					if (TrueGameSkill == SKILL_EASY) owner.A_GiveInventory(iDTech1Check,random(150,200));
					if (TrueGameSkill == SKILL_NORMAL) owner.A_GiveInventory(iDTech1Check,random(125,175));
					if (TrueGameSkill == SKILL_HARD) owner.A_GiveInventory(iDTech1Check,random(100,150));
					if (TrueGameSkill == SKILL_VERY_HARD) owner.A_GiveInventory(iDTech1Check,random(50,100));
					if (TrueGameSkill == SKILL_EXTREME) owner.A_GiveInventory(iDTech1Check,random(40,80));
					if (TrueGameSkill == SKILL_HORRIBLE) owner.A_GiveInventory(iDTech1Check,random(30,60));
					if (TrueGameSkill == SKILL_IMPOSSIBLE) owner.A_GiveInventory(iDTech1Check,random(20,40));
					if (TrueGameSkill >= SKILL_OMEGA) owner.A_GiveInventory(iDTech1Check,random(10,20));
				}

				// Checks initial actorname of the player's PlayerPawn actor in order to assess the right class #. If you want to try to define extra characters, make sure you use the character's Player-class name.
				if (playeractor) 
				{ 
					playername = playeractor.GetClassName(); 
					if (playername == "DeggarisMontegger") CharacterClass = 0;
					else if (playername == "IlluciaHendershot") CharacterClass = 1;
					else if (playername == "FloraBriscoletti") CharacterClass = 2;
					//else if (playername == "Corvus") CharacterClass = 3;
					//else if (playername == "Baratus") CharacterClass = 4;
					//else if (playername == "Parias") CharacterClass = 5;
					//else if (playername == "Daedolon") CharacterClass = 6;
					//else if (playername == "StrifeGuy") CharacterClass = 7;
					else if (playername == "Ailish") CharacterClass = 8;
					else if (playername == "PetraLagerkvist") CharacterClass = 9;
					else { CharacterClass = -1; PlayerMaxHP = 100; }
					if (debuginit) Console.Printf("Class Init: %s, %d", playername, CharacterClass);
					CallACS("CheckCharacterClass",1,CharacterClass); // Sets CharacterClass directly
				}
				
				
				// Initial Stat Calculations
				int MaxHealthTrue;
				int startotherstatsfactor = dvds_startotherstatsfactor;
				int MaxMana;
				int MortalHitSurviveRate;
				int AGL, DEF, DFT, SOR, STR, THE, AeonPts;
				if (CharacterClass == 0) // Deggaris
				{
					// HP Range
					MaxHealthTrue = (103 + random(-4,12) * (random(90,110) / 100) + random(6,10)); // 96-136 HP [103 Base]

					// MP Range
					MaxMana = (20 + random(-18,8) * (random(100,116) / 100) + random(0,4)); // 2-36 MP [20 Base]

					// Mortal Hit Survivality Rate [x.x% format] (Deggaris is the lowest ranking in Base Survivability)
					MortalHitSurviveRate = 32 + random(-16,16); // [1.6%-4.8%]
					CallACS("MiscVarSetDECORATE",0,MortalHitSurviveRate);

					// Seed Stat Randomization
					AGL = random(1,3); // Agility [31]
					DEF = random(4,6); // Defense [32]
					DFT = random(2,4); // Deftness [33]
					SOR = random(1,3); // Sorcery [34]
					STR = random(5,7); // Strength [35]
					THE = random(2,4); // Therapeusis [36]
				}
				if (CharacterClass == 1) // Illucia
				{
					// HP Range
					MaxHealthTrue = (81 + random(-8,8) * (random(90,110) / 100) + random(3,7)); // 69-104 HP [81 Base]

					// MP Range
					MaxMana = (26 + random(-13,13) * (random(116,132) / 100) + random(3,7)); // 18-58 MP [26 Base]

					// Mortal Hit Survivality Rate [x.x% format] (Illucia is the highest ranking in Base Survivability)
					MortalHitSurviveRate = 46 + random(-16,16); // [3.0%-6.2%]
					CallACS("MiscVarSetDECORATE",0,MortalHitSurviveRate);

					// Seed Stat Randomization
					AGL = random(3,5); // Agility [31]
					DEF = random(2,4); // Defense [32]
					DFT = random(2,4); // Deftness [33]
					SOR = random(3,5); // Sorcery [34]
					STR = random(3,5); // Strength [35]
					THE = random(2,4); // Therapeusis [36]
				}
				// Deggaris and Illucia get the same randomizations to stats and armor type setups
				if (CharacterClass == 0 || CharacterClass == 1)
				{
					int ArmorAmt;
					if (TrueGameSkill <= SKILL_VERY_EASY) // 33-57
					{
						AGL += random(3,5); // Agility
						DEF += random(3,5); // Defense
						DFT += random(3,5); // Deftness
						SOR += random(3,5); // Sorcery
						STR += random(3,5); // Strength
						THE += random(3,5); // Therapeusis
					
						CallACS("OtherVarSetDECORATE",9,200); // CurrentMaxArmor
						CallACS("OtherVarSetDECORATE",5,2); // CurrentArmorClass
						owner.A_GiveInventory("DSBlueArmorClass", 1);
						ArmorAmt = 200; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSBlue", 1);
						owner.A_TakeInventory("DSNoArmorClass", 9999);
						owner.A_TakeInventory("DSGreenArmorClass", 9999);
						owner.A_TakeInventory("DSStoneArmorClass1", 9999);
						owner.A_TakeInventory("DSDiamondArmorClass1", 9999);
						owner.A_TakeInventory("DSStoneArmorClass2", 9999);
						owner.A_TakeInventory("DSDiamondArmorClass2", 9999);
					}
					if (TrueGameSkill == SKILL_EASY) // 21-45
					{
						AGL += random(1,3); // Agility
						DEF += random(1,3); // Defense
						DFT += random(1,3); // Deftness
						SOR += random(1,3); // Sorcery
						STR += random(1,3); // Strength
						THE += random(1,3); // Therapeusis
					
						CallACS("OtherVarSetDECORATE",9,200); // CurrentMaxArmor
						CallACS("OtherVarSetDECORATE",5,2); // CurrentArmorClass
						owner.A_GiveInventory("DSBlueArmorClass", 1);
						ArmorAmt = 150; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSBlue", 1);
						owner.A_TakeInventory("DSNoArmorClass", 9999);
						owner.A_TakeInventory("DSGreenArmorClass", 9999);
						owner.A_TakeInventory("DSStoneArmorClass1", 9999);
						owner.A_TakeInventory("DSDiamondArmorClass1", 9999);
						owner.A_TakeInventory("DSStoneArmorClass2", 9999);
						owner.A_TakeInventory("DSDiamondArmorClass2", 9999);
					}
					if (TrueGameSkill == SKILL_NORMAL) // 15-45
					{
						AGL += random(0,3); // Agility
						DEF += random(0,3); // Defense
						DFT += random(0,3); // Deftness
						SOR += random(0,3); // Sorcery
						STR += random(0,3); // Strength
						THE += random(0,3); // Therapeusis
					
						if (random(0,1) == 0)
						{
							CallACS("OtherVarSetDECORATE",9,200); // CurrentMaxArmor
							CallACS("OtherVarSetDECORATE",5,2); // CurrentArmorClass
							owner.A_GiveInventory("DSBlueArmorClass", 1);
							ArmorAmt = 100; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSBlue", 1);
							owner.A_TakeInventory("DSNoArmorClass", 9999);
							owner.A_TakeInventory("DSGreenArmorClass", 9999);
							owner.A_TakeInventory("DSStoneArmorClass1", 9999);
							owner.A_TakeInventory("DSDiamondArmorClass1", 9999);
							owner.A_TakeInventory("DSStoneArmorClass2", 9999);
							owner.A_TakeInventory("DSDiamondArmorClass2", 9999);
						}
						else
						{
							CallACS("OtherVarSetDECORATE",9,100); // CurrentMaxArmor
							CallACS("OtherVarSetDECORATE",5,1); // CurrentArmorClass
							owner.A_GiveInventory("DSGreenArmorClass", 1);
							ArmorAmt = 100; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSGreen", 1);
							owner.A_TakeInventory("DSNoArmorClass", 9999);
							owner.A_TakeInventory("DSBlueArmorClass", 9999);
							owner.A_TakeInventory("DSStoneArmorClass1", 9999);
							owner.A_TakeInventory("DSDiamondArmorClass1", 9999);
							owner.A_TakeInventory("DSStoneArmorClass2", 9999);
							owner.A_TakeInventory("DSDiamondArmorClass2", 9999);
						}
					}
					if (TrueGameSkill == SKILL_HARD) // 15-39
					{
						AGL += random(0,2); // Agility
						DEF += random(0,2); // Defense
						DFT += random(0,2); // Deftness
						SOR += random(0,2); // Sorcery
						STR += random(0,2); // Strength
						THE += random(0,2); // Therapeusis
					
						CallACS("OtherVarSetDECORATE",9,100); // CurrentMaxArmor
						CallACS("OtherVarSetDECORATE",5,1); // CurrentArmorClass
						owner.A_GiveInventory("DSGreenArmorClass", 1);
						ArmorAmt = 50; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSGreen", 1);
						owner.A_TakeInventory("DSNoArmorClass", 9999);
						owner.A_TakeInventory("DSBlueArmorClass", 9999);
						owner.A_TakeInventory("DSStoneArmorClass1", 9999);
						owner.A_TakeInventory("DSDiamondArmorClass1", 9999);
						owner.A_TakeInventory("DSStoneArmorClass2", 9999);
						owner.A_TakeInventory("DSDiamondArmorClass2", 9999);
					}
					if (TrueGameSkill == SKILL_VERY_HARD) // 9-33
					{
						AGL += random(0,1); // Agility
						DEF += random(0,1); // Defense
						DFT += random(0,1); // Deftness
						SOR += random(0,1); // Sorcery
						STR += random(0,1); // Strength
						THE += random(0,1); // Therapeusis
					
						CallACS("OtherVarSetDECORATE",9,100); // CurrentMaxArmor
						CallACS("OtherVarSetDECORATE",5,1); // CurrentArmorClass
						owner.A_GiveInventory("DSGreenArmorClass", 1);
						ArmorAmt = 25; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSGreen", 1);
						owner.A_TakeInventory("DSNoArmorClass", 9999);
						owner.A_TakeInventory("DSBlueArmorClass", 9999);
						owner.A_TakeInventory("DSStoneArmorClass1", 9999);
						owner.A_TakeInventory("DSDiamondArmorClass1", 9999);
						owner.A_TakeInventory("DSStoneArmorClass2", 9999);
						owner.A_TakeInventory("DSDiamondArmorClass2", 9999);
					}
					if (TrueGameSkill == SKILL_EXTREME) // 9-33
					{
						AGL += random(-1,0); // Agility
						DEF += random(-1,0); // Defense
						DFT += random(-1,0); // Deftness
						SOR += random(-1,0); // Sorcery
						STR += random(-1,0); // Strength
						THE += random(-1,0); // Therapeusis
					
						CallACS("OtherVarSetDECORATE",9,100); // CurrentMaxArmor
						CallACS("OtherVarSetDECORATE",5,1); // CurrentArmorClass
						owner.GiveInventory("DSGreenArmorClass", 1);
						ArmorAmt = 20; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSGreen", 1);
						owner.TakeInventory("DSNoArmorClass", 9999);
						owner.TakeInventory("DSBlueArmorClass", 9999);
						owner.TakeInventory("DSStoneArmorClass1", 9999);
						owner.TakeInventory("DSDiamondArmorClass1", 9999);
						owner.TakeInventory("DSStoneArmorClass2", 9999);
						owner.TakeInventory("DSDiamondArmorClass2", 9999);
					}
					if (TrueGameSkill == SKILL_HORRIBLE) // 9-33
					{
						AGL += random(-1,1); // Agility
						DEF += random(-1,1); // Defense
						DFT += random(-1,1); // Deftness
						SOR += random(-1,1); // Sorcery
						STR += random(-1,1); // Strength
						THE += random(-1,1); // Therapeusis
					
						CallACS("OtherVarSetDECORATE",9,100); // CurrentMaxArmor
						CallACS("OtherVarSetDECORATE",5,1); // CurrentArmorClass
						owner.GiveInventory("DSGreenArmorClass", 1);
						ArmorAmt = 15; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSGreen", 1);
						owner.TakeInventory("DSNoArmorClass", 9999);
						owner.TakeInventory("DSBlueArmorClass", 9999);
						owner.TakeInventory("DSStoneArmorClass1", 9999);
						owner.TakeInventory("DSDiamondArmorClass1", 9999);
						owner.TakeInventory("DSStoneArmorClass2", 9999);
						owner.TakeInventory("DSDiamondArmorClass2", 9999);
					}
					if (TrueGameSkill == SKILL_IMPOSSIBLE) // 9-33
					{
						AGL += random(-1,0); // Agility
						DEF += random(-1,0); // Defense
						DFT += random(-1,0); // Deftness
						SOR += random(-1,0); // Sorcery
						STR += random(-1,0); // Strength
						THE += random(-1,0); // Therapeusis
					
						CallACS("OtherVarSetDECORATE",9,100); // CurrentMaxArmor
						CallACS("OtherVarSetDECORATE",5,1); // CurrentArmorClass
						owner.GiveInventory("DSGreenArmorClass", 1);
						ArmorAmt = 10; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSGreen", 1);
						owner.TakeInventory("DSNoArmorClass", 9999);
						owner.TakeInventory("DSBlueArmorClass", 9999);
						owner.TakeInventory("DSStoneArmorClass1", 9999);
						owner.TakeInventory("DSDiamondArmorClass1", 9999);
						owner.TakeInventory("DSStoneArmorClass2", 9999);
						owner.TakeInventory("DSDiamondArmorClass2", 9999);
					}
					if (TrueGameSkill >= SKILL_OMEGA) // 9-33
					{
						AGL += random(-2,0); // Agility
						DEF += random(-2,0); // Defense
						DFT += random(-2,0); // Deftness
						SOR += random(-2,0); // Sorcery
						STR += random(-2,0); // Strength
						THE += random(-2,0); // Therapeusis
					
						CallACS("OtherVarSetDECORATE",9,100); // CurrentMaxArmor
						CallACS("OtherVarSetDECORATE",5,1); // CurrentArmorClass
						owner.GiveInventory("DSGreenArmorClass", 1);
						ArmorAmt = 5; for(int i = 0; i < ArmorAmt; i++) owner.A_GiveInventory("ArmorBonusDSGreen", 1);
						owner.TakeInventory("DSNoArmorClass", 9999);
						owner.TakeInventory("DSBlueArmorClass", 9999);
						owner.TakeInventory("DSStoneArmorClass1", 9999);
						owner.TakeInventory("DSDiamondArmorClass1", 9999);
						owner.TakeInventory("DSStoneArmorClass2", 9999);
						owner.TakeInventory("DSDiamondArmorClass2", 9999);
					}
				}
				if (CharacterClass == 2) // Flora
				{
					// HP Range
					MaxHealthTrue = (73 + random(-12,4) * (random(90,110) / 100) + random(0,4)); // 55-88 HP [73 Base]

					// MP Range
					MaxMana = (35 + random(-8,18) * (random(132,164) / 100) + random(6,10)); // 35-79 MP [35 Base]

					// Mortal Hit Survivability Rate [x.x% format] (Flora is the middle ranking in Base Survivability)
					MortalHitSurviveRate = 39 + random(-16,16); // [3.0%-6.2%]
					CallACS("MiscVarSetDECORATE",0,MortalHitSurviveRate);
					
					// Seed Stat Randomization
					AGL = random(5,7); // Agility [31]
					DEF = random(1,3); // Defense [32]
					DFT = random(4,6); // Deftness [33]
					SOR = random(4,6); // Sorcery [34]
					STR = random(1,3); // Strength [35]
					THE = random(3,5); // Therapeusis [36]
					BaseSceptreEXP = 312;
					
					if (TrueGameSkill <= SKILL_VERY_EASY) // 33-57
					{
						AGL += random(3,5); // Agility
						DEF += random(3,5); // Defense
						DFT += random(3,5); // Deftness
						SOR += random(3,5); // Sorcery
						STR += random(3,5); // Strength
						THE += random(3,5); // Therapeusis
						BaseSceptreEXP = 240;
					}
					if (TrueGameSkill == SKILL_EASY) // 25-48
					{
						AGL += random(1,3); // Agility
						DEF += random(1,3); // Defense
						DFT += random(1,3); // Deftness
						SOR += random(1,3); // Sorcery
						STR += random(1,3); // Strength
						THE += random(1,3); // Therapeusis
						BaseSceptreEXP = 288;
					}
					if (TrueGameSkill == SKILL_EASY) // 25-48
					{
						AGL += random(0,3); // Agility
						DEF += random(0,3); // Defense
						DFT += random(0,3); // Deftness
						SOR += random(0,3); // Sorcery
						STR += random(0,3); // Strength
						THE += random(0,3); // Therapeusis
						BaseSceptreEXP = 312;
					}
					if (TrueGameSkill == SKILL_NORMAL) // 19-48
					{
						AGL += random(0,3); // Agility
						DEF += random(0,3); // Defense
						DFT += random(0,3); // Deftness
						SOR += random(0,3); // Sorcery
						STR += random(0,3); // Strength
						THE += random(0,3); // Therapeusis
						BaseSceptreEXP = 312;
					}
					if (TrueGameSkill == SKILL_HARD) // 19-42
					{
						AGL += random(0,2); // Agility
						DEF += random(0,2); // Defense
						DFT += random(0,2); // Deftness
						SOR += random(0,2); // Sorcery
						STR += random(0,2); // Strength
						THE += random(0,2); // Therapeusis
						BaseSceptreEXP = 336;
					}
					if (TrueGameSkill == SKILL_VERY_HARD) // 13-36
					{
						AGL += random(0,1); // Agility
						DEF += random(0,1); // Defense
						DFT += random(0,1); // Deftness
						SOR += random(0,1); // Sorcery
						STR += random(0,1); // Strength
						THE += random(0,1); // Therapeusis
						BaseSceptreEXP = 384;
					}
					if (TrueGameSkill == SKILL_EXTREME) // 13-36
					{
						AGL += random(-1,0); // Agility
						DEF += random(-1,0); // Defense
						DFT += random(-1,0); // Deftness
						SOR += random(-1,0); // Sorcery
						STR += random(-1,0); // Strength
						THE += random(-1,0); // Therapeusis
						BaseSceptreEXP = 408;
					}
					if (TrueGameSkill == SKILL_HORRIBLE) // 9-33
					{
						AGL += random(-1,1); // Agility
						DEF += random(-1,1); // Defense
						DFT += random(-1,1); // Deftness
						SOR += random(-1,1); // Sorcery
						STR += random(-1,1); // Strength
						THE += random(-1,1); // Therapeusis
						BaseSceptreEXP = 432;
					}
					if (TrueGameSkill == SKILL_IMPOSSIBLE) // 9-33
					{
						AGL += random(-1,0); // Agility
						DEF += random(-1,0); // Defense
						DFT += random(-1,0); // Deftness
						SOR += random(-1,0); // Sorcery
						STR += random(-1,0); // Strength
						THE += random(-1,0); // Therapeusis
						BaseSceptreEXP = 456;
					}
					if (TrueGameSkill >= SKILL_OMEGA) // 9-33
					{
						AGL += random(-2,0); // Agility
						DEF += random(-2,0); // Defense
						DFT += random(-2,0); // Deftness
						SOR += random(-2,0); // Sorcery
						STR += random(-2,0); // Strength
						THE += random(-2,0); // Therapeusis
						BaseSceptreEXP = 480;
					}
					
					// Ensures Flora will not start off with armor. :P
					CallACS("OtherVarSetDECORATE",9,0); // CurrentMaxArmor
					CallACS("OtherVarSetDECORATE",5,0); // CurrentArmorClass
					owner.A_TakeInventory("Armor", 999999);
					owner.A_TakeInventory("BasicArmor", 999999);
					owner.A_GiveInventory("DSNoArmorClass", 1);
					owner.A_TakeInventory("DSGreenArmorClass", 9999);
					owner.A_TakeInventory("DSBlueArmorClass", 9999);
					owner.A_TakeInventory("DSStoneArmorClass1", 9999);
					owner.A_TakeInventory("DSDiamondArmorClass1", 9999);
					owner.A_TakeInventory("DSStoneArmorClass2", 9999);
					owner.A_TakeInventory("DSDiamondArmorClass2", 9999);
					
					if (SceptreStartLevel < 0) SceptreStartLevel = 0;
					if (SceptreStartLevel > 16) SceptreStartLevel = 16;
					while (SceptreStartLevel > 0)
					{
						SceptreEXPRatio += SceptreStartLevel;
						SceptreStartLevel -= 1;
					}
					SceptreLevelEXP = BaseSceptreEXP * SceptreEXPRatio;
					CallACS("OtherVarSetDECORATE",10,SceptreLevelEXP);
					
					if (dvds_florastartsceptre >= 1)
					{
						owner.A_GiveInventory("SceptreOfEmpyrea",1);
						owner.A_SelectWeapon("SceptreOfEmpyrea");
					}
					else
					{
						if (ModType != 0)
						{
							owner.A_GiveInventory("SceptreOfEmpyrea",1);
							owner.A_SelectWeapon("SceptreOfEmpyrea");
						}
					}
					
					// Mod Type Checks
					if (ModType == 0) // Classic Mode
					{
						if (dvds_florastartdiarislongbow >= 1)
						{
							owner.A_GiveInventory("DiarisLongbow",1);
							owner.A_TakeInventory("DiarisArrow",0x7FFFFFFF);
						}
						if (dvds_florastartsapphirewand > 0)
						{
							owner.A_GiveInventory("SapphireWandNew",1);
							if (dvds_florastartsapphirewand > 1) owner.A_GiveInventory("DualSapphireWandsNew",1);
						}
					
						// Individual Game Checks
						if (ClassicDoomType == 2) // Heretic
						{
							if (GetCVar("dvds_florastartelvenwands") >= 1) 
							{
								nm = "GoldWandNew"; APPackCheck = nm;
								owner.A_GiveInventory(APPackCheck,1);
							}
							if (GetCVar("dvds_florastartelvenwands") == 2) 
							{
								nm = "DualGoldWandNew"; APPackCheck = nm;
								owner.A_GiveInventory(APPackCheck,1);
							}
						}
					}
				}
				if (CharacterClass == 8) // Ailish
				{
					// HP Range
					MaxHealthTrue = (63 + random(-12,4) * (random(90,110) / 100) + random(0,3)); //
					
					// MP Range
					MaxMana = (43 + random(-8,18) * (random(132,164) / 100) + random(6,10)); //
					
					// Mortal Hit Survivality Rate [x.x% format] (Ailish's survivability rate is the lowest of the playables at this point)
					MortalHitSurviveRate = 18 + random(-16,16); // [0.2%-3.4%]
					CallACS("MiscVarsETDECORATE",0,MortalHitSurviveRate);
					
					// Seed Stat Ranomization
					AGL = random(5,7); // Agility
					DEF = random(1,3); // Defense
					DFT = random(4,6); // Deftness
					SOR = random(4,6); // Sorcery
					STR = random(1,3); // Strength
					THE = random(3,5); // Therapeusis
					
					if (TrueGameSkill <= SKILL_VERY_EASY) // 37-60
					{
						AGL += random(3,5); // Agility
						DEF += random(3,5); // Defense
						DFT += random(3,5); // Deftness
						SOR += random(3,5); // Sorcery
						STR += random(3,5); // Strength
						THE += random(3,5); // Therapeusis
					}
					if (TrueGameSkill == SKILL_EASY) // 25-48
					{
						AGL += random(1,3); // Agility
						DEF += random(1,3); // Defense
						DFT += random(1,3); // Deftness
						SOR += random(1,3); // Sorcery
						STR += random(1,3); // Strength
						THE += random(1,3); // Therapeusis
					}
					if (TrueGameSkill == SKILL_NORMAL) // 19-48
					{
						AGL += random(0,3); // Agility
						DEF += random(0,3); // Defense
						DFT += random(0,3); // Deftness
						SOR += random(0,3); // Sorcery
						STR += random(0,3); // Strength
						THE += random(0,3); // Therapeusis
					}
					if (TrueGameSkill == SKILL_HARD) // 19-42
					{
						AGL += random(0,2); // Agility
						DEF += random(0,2); // Defense
						DFT += random(0,2); // Deftness
						SOR += random(0,2); // Sorcery
						STR += random(0,2); // Strength
						THE += random(0,2); // Therapeusis
					}
					if (TrueGameSkill == SKILL_VERY_HARD) // 13-36
					{
						AGL += random(-1,1); // Agility
						DEF += random(-1,1); // Defense
						DFT += random(-1,1); // Deftness
						SOR += random(-1,1); // Sorcery
						STR += random(-1,1); // Strength
						THE += random(-1,1); // Therapeusis
					}
					if (TrueGameSkill == SKILL_EXTREME) // 13-36
					{
						AGL += random(-1,0); // Agility
						DEF += random(-1,0); // Defense
						DFT += random(-1,0); // Deftness
						SOR += random(-1,0); // Sorcery
						STR += random(-1,0); // Strength
						THE += random(-1,0); // Therapeusis
					}
					if (TrueGameSkill == SKILL_HORRIBLE) // 9-33
					{
						AGL += random(-1,1); // Agility
						DEF += random(-1,1); // Defense
						DFT += random(-1,1); // Deftness
						SOR += random(-1,1); // Sorcery
						STR += random(-1,1); // Strength
						THE += random(-1,1); // Therapeusis
					}
					if (TrueGameSkill == SKILL_IMPOSSIBLE) // 9-33
					{
						AGL += random(-1,0); // Agility
						DEF += random(-1,0); // Defense
						DFT += random(-1,0); // Deftness
						SOR += random(-1,0); // Sorcery
						STR += random(-1,0); // Strength
						THE += random(-1,0); // Therapeusis
					}
					if (TrueGameSkill >= SKILL_OMEGA) // 9-33
					{
						AGL += random(-2,0); // Agility
						DEF += random(-2,0); // Defense
						DFT += random(-2,0); // Deftness
						SOR += random(-2,0); // Sorcery
						STR += random(-2,0); // Strength
						THE += random(-2,0); // Therapeusis
					}
					
					// Ensures Ailish will not start off with armor. :P
					CallACS("OtherVarSetDECORATE",9,0); // CurrentMaxArmor
					CallACS("OtherVarSetDECORATE",5,0); // CurrentArmorClass
					owner.A_TakeInventory("Armor", 999999);
					owner.A_TakeInventory("BasicArmor", 999999);
					owner.A_GiveInventory("DSNoArmorClass", 1);
					owner.A_TakeInventory("DSGreenArmorClass", 9999);
					owner.A_TakeInventory("DSBlueArmorClass", 9999);
					owner.A_TakeInventory("DSStoneArmorClass1", 9999);
					owner.A_TakeInventory("DSDiamondArmorClass1", 9999);
					owner.A_TakeInventory("DSStoneArmorClass2", 9999);
					owner.A_TakeInventory("DSDiamondArmorClass2", 9999);
				}
				if (CharacterClass == 9) // Petra
				{
					// HP Range
					MaxHealthTrue = (102 + random(-4,12) * (random(90,110) / 100) + random(4,12)); //
					
					// MP Range
					MaxMana = (25 + random(-12,12) * (random(114,130) / 100) + random(3,7)); // 18-55 MP [25 Base]
					
					// Mortal Hit Survivality Rate [x.x% format] (Petra's is the highest of the playables at this point)
					MortalHitSurviveRate = 64 + random(0,32); // [6.4%-9.6%]
					CallACS("MiscVarSetDECORATE",0,MortalHitSurviveRate);
					
					// Seed Stat Ranomization
					AGL = random(3,5); // Agility
					DEF = random(4,6); // Defense
					DFT = random(2,4); // Deftness
					SOR = random(3,4); // Sorcery
					STR = random(1,3); // Strength
					THE = random(4,6); // Therapeusis
					
					if (TrueGameSkill <= SKILL_VERY_EASY) // 37-60
					{
						AGL += random(3,5); // Agility
						DEF += random(3,5); // Defense
						DFT += random(3,5); // Deftness
						SOR += random(3,5); // Sorcery
						STR += random(3,5); // Strength
						THE += random(3,5); // Therapeusis
					}
					if (TrueGameSkill == SKILL_EASY) // 25-48
					{
						AGL += random(1,3); // Agility
						DEF += random(1,3); // Defense
						DFT += random(1,3); // Deftness
						SOR += random(1,3); // Sorcery
						STR += random(1,3); // Strength
						THE += random(1,3); // Therapeusis
					}
					if (TrueGameSkill == SKILL_NORMAL) // 19-48
					{
						AGL += random(0,3); // Agility
						DEF += random(0,3); // Defense
						DFT += random(0,3); // Deftness
						SOR += random(0,3); // Sorcery
						STR += random(0,3); // Strength
						THE += random(0,3); // Therapeusis
					}
					if (TrueGameSkill == SKILL_HARD) // 19-42
					{
						AGL += random(0,2); // Agility
						DEF += random(0,2); // Defense
						DFT += random(0,2); // Deftness
						SOR += random(0,2); // Sorcery
						STR += random(0,2); // Strength
						THE += random(0,2); // Therapeusis
					}
					if (TrueGameSkill == SKILL_VERY_HARD) // 13-36
					{
						AGL += random(-1,1); // Agility
						DEF += random(-1,1); // Defense
						DFT += random(-1,1); // Deftness
						SOR += random(-1,1); // Sorcery
						STR += random(-1,1); // Strength
						THE += random(-1,1); // Therapeusis
					}
					if (TrueGameSkill == SKILL_EXTREME) // 13-36
					{
						AGL += random(-1,0); // Agility
						DEF += random(-1,0); // Defense
						DFT += random(-1,0); // Deftness
						SOR += random(-1,0); // Sorcery
						STR += random(-1,0); // Strength
						THE += random(-1,0); // Therapeusis
					}
					if (TrueGameSkill == SKILL_HORRIBLE) // 9-33
					{
						AGL += random(-1,1); // Agility
						DEF += random(-1,1); // Defense
						DFT += random(-1,1); // Deftness
						SOR += random(-1,1); // Sorcery
						STR += random(-1,1); // Strength
						THE += random(-1,1); // Therapeusis
					}
					if (TrueGameSkill == SKILL_IMPOSSIBLE) // 9-33
					{
						AGL += random(-1,0); // Agility
						DEF += random(-1,0); // Defense
						DFT += random(-1,0); // Deftness
						SOR += random(-1,0); // Sorcery
						STR += random(-1,0); // Strength
						THE += random(-1,0); // Therapeusis
					}
					if (TrueGameSkill >= SKILL_OMEGA) // 9-33
					{
						AGL += random(-2,0); // Agility
						DEF += random(-2,0); // Defense
						DFT += random(-2,0); // Deftness
						SOR += random(-2,0); // Sorcery
						STR += random(-2,0); // Strength
						THE += random(-2,0); // Therapeusis
					}
					
					//Like Flora and Ailish, Petra can't use Marine armor.
					CallACS("OtherVarSetDECORATE",9,0); // CurrentMaxArmor
					CallACS("OtherVarSetDECORATE",5,0); // CurrentArmorClass
					owner.A_TakeInventory("Armor", 999999);
					owner.A_TakeInventory("BasicArmor", 999999);
					owner.A_GiveInventory("DSNoArmorClass", 1);
					owner.A_TakeInventory("DSGreenArmorClass", 9999);
					owner.A_TakeInventory("DSBlueArmorClass", 9999);
					owner.A_TakeInventory("DSStoneArmorClass1", 9999);
					owner.A_TakeInventory("DSDiamondArmorClass1", 9999);
					owner.A_TakeInventory("DSStoneArmorClass2", 9999);
					owner.A_TakeInventory("DSDiamondArmorClass2", 9999);
				}
				
				// Post Initial Stat Calculations
				AeonPts += GetCVar("dvds_startingaeonpts");
				AeonPts = (AeonPts * startotherstatsfactor) / 100; // Check Start Other Stats Factor
				AGL = (AGL * startotherstatsfactor) / 100; // Check Start Other Stats Factor
				DEF = (DEF * startotherstatsfactor) / 100; // Check Start Other Stats Factor
				DFT = (DFT * startotherstatsfactor) / 100; // Check Start Other Stats Factor
				SOR = (SOR * startotherstatsfactor) / 100; // Check Start Other Stats Factor
				STR = (STR * startotherstatsfactor) / 100; // Check Start Other Stats Factor
				THE = (THE * startotherstatsfactor) / 100; // Check Start Other Stats Factor
				CallACS("MiscVarSetDECORATE",31,AGL);
				CallACS("MiscVarSetDECORATE",32,DEF);
				CallACS("MiscVarSetDECORATE",33,DFT);
				CallACS("MiscVarSetDECORATE",34,SOR);
				CallACS("MiscVarSetDECORATE",35,STR);
				CallACS("MiscVarSetDECORATE",36,THE);

				MaxMana = (MaxMana * dvds_starthpmanafactor) / 100; // Check Start Mana Factor
				if (MaxMana < 1) MaxMana = 1;
				CallACS("OtherVarSetDECORATE",1,MaxMana); // MaxMana
				CallACS("OtherVarSetDECORATE",2,MaxMana); // CurrentMana
				
				if (CharacterClass == 2 || CharacterClass == 8) // Deggaris, Illucia and Petra have an extra randomization to their HP, while Flora and Ailish have a slightly more varied randomization which works more to her favor on easier skill levels.
				{
					if (TrueGameSkill <= SKILL_VERY_EASY) MaxHealthTrue = MaxHealthTrue * random(120,140) / 100;	// 66-118 HP [spread of 52]
					if (TrueGameSkill == SKILL_EASY) MaxHealthTrue = MaxHealthTrue * random(110,130) / 100;		// 60-109 HP [spread of 49]
					if (TrueGameSkill == SKILL_NORMAL) MaxHealthTrue = MaxHealthTrue * random(100,120) / 100;		// 55-101 HP [spread of 46]
					if (TrueGameSkill == SKILL_HARD) MaxHealthTrue = MaxHealthTrue * random(90,110) / 100; 		// 49-92 HP [spread of 43]
					if (TrueGameSkill == SKILL_VERY_HARD) MaxHealthTrue = MaxHealthTrue * random(80,100) / 100;	// 44-84 HP [spread of 40]
					if (TrueGameSkill == SKILL_EXTREME) MaxHealthTrue = MaxHealthTrue * random(70,90) / 100; 	
					if (TrueGameSkill == SKILL_HORRIBLE) MaxHealthTrue = MaxHealthTrue * random(60,80) / 100; 	
					if (TrueGameSkill == SKILL_IMPOSSIBLE) MaxHealthTrue = MaxHealthTrue * random(50,70) / 100; 	
					if (TrueGameSkill >= SKILL_OMEGA) MaxHealthTrue = MaxHealthTrue * random(40,60) / 100; 	
				}
				else
				{
					if (TrueGameSkill <= SKILL_VERY_EASY) MaxHealthTrue = MaxHealthTrue * random(100,120) / 100;	// Deg: 90-151 HP [spread of 61], Illu: 66-116 HP [spread of 50]
					if (TrueGameSkill == SKILL_EASY) MaxHealthTrue = MaxHealthTrue * random(95,115) / 100;			// Deg: 85-145 HP [spread of 60], Illu: 62-111 HP [spread of 49]
					if (TrueGameSkill == SKILL_NORMAL) MaxHealthTrue = MaxHealthTrue * random(90,110) / 100;		// Deg: 81-138 HP [spread of 57], Illu: 59-106 HP [spread of 47]
					if (TrueGameSkill == SKILL_HARD) MaxHealthTrue = MaxHealthTrue * random(85,105) / 100; 		// Deg: 76-132 HP [spread of 56], Illu: 56-102 HP [spread of 46]
					if (TrueGameSkill == SKILL_VERY_HARD) MaxHealthTrue = MaxHealthTrue * random(80,100) / 100; 	// Deg: 72-126 HP [spread of 54], Illu: 52-97 HP [spread of 45]
					if (TrueGameSkill == SKILL_EXTREME) MaxHealthTrue = MaxHealthTrue * random(75,95) / 100; 	
					if (TrueGameSkill == SKILL_HORRIBLE) MaxHealthTrue = MaxHealthTrue * random(70,90) / 100; 	
					if (TrueGameSkill == SKILL_IMPOSSIBLE) MaxHealthTrue = MaxHealthTrue * random(65,85) / 100; 	
					if (TrueGameSkill >= SKILL_OMEGA) MaxHealthTrue = MaxHealthTrue * random(60,80) / 100; 	
				}
				MaxHealthTrue = (MaxHealthTrue * dvds_starthpmanafactor) / 100; // Check Start HP Factor
				if (MaxHealthTrue < 1) MaxHealthTrue = 1;
				owner.health = MaxHealthTrue;
				CallACS("OtherVarSetDECORATE",0,MaxHealthTrue);
				CallACS("MiscVarSetDECORATE",241,MaxHealthTrue);
				CallACS("MiscVarSetDECORATE",298,MaxHealthTrue); // Set the game's starting Max HP for Sigil damage calculations
			}
			if (ClassCheck == 2) { }
			if (ClassCheck == 3) { }
			if (ClassCheck == 4) { }
			if (ClassCheck == 5) { }
			if (ClassCheck < 6)
			{
				if (CallACS("MiscVarCheckDECORATE",31) < 0) CallACS("MiscVarSetDECORATE",31,0);
				if (CallACS("MiscVarCheckDECORATE",32) < 0) CallACS("MiscVarSetDECORATE",32,0);
				if (CallACS("MiscVarCheckDECORATE",33) < 0) CallACS("MiscVarSetDECORATE",33,0);
				if (CallACS("MiscVarCheckDECORATE",34) < 0) CallACS("MiscVarSetDECORATE",34,0);
				if (CallACS("MiscVarCheckDECORATE",35) < 0) CallACS("MiscVarSetDECORATE",35,0);
				if (CallACS("MiscVarCheckDECORATE",36) < 0) CallACS("MiscVarSetDECORATE",36,0);
				CallACS("MiscVarSetDECORATE",21,CallACS("MiscVarCheckDECORATE",22));
				if (debuginit) Console.Printf("\cxClassCheck:\c- %d", ClassCheck);
			}
			// Mod Type Checks
			if (ModType == 0) // Classic Mode
			{
				// Individual Game Checks
				if (ClassicDoomType == 0) { owner.A_GiveInventory("PlayingDoom2",1); } // Doom 2
				if (ClassicDoomType == 1) { owner.A_GiveInventory("PlayingDoom1",1); } // Doom 1
				if (ClassicDoomType == 2) { owner.A_GiveInventory("PlayingHeretic",1); } // Heretic
				if (ClassicDoomType == 3) { owner.A_GiveInventory("PlayingHexen",1); } // HeXen
				if (ClassicDoomType == 4) { owner.A_GiveInventory("PlayingStrife",1); } // Strife
				if (ClassicDoomType == 5) { owner.A_GiveInventory("PlayingDoom64",1); } // Doom64
				if (ClassicDoomType == 6) { owner.A_GiveInventory("PlayingPSXDoom",1); } // PSXDoom
			}
			else if (ModType == 1) { owner.A_GiveInventory("PlayingDeusVultI",1); } // DVI
			else if (ModType == 2) { owner.A_GiveInventory("PlayingDeusVultII",1); } // DVII
		}
		
		
		
		
		
		//*******************************************
		//*Delays the levelup speech for a character*
		//*******************************************
		int LevelupSpeechTimer = CallACS("MiscVarCheckDECORATE",247);
		if (LevelupSpeechTimer > 0)
		{
			LevelupSpeechTimer2++;
			if (debuglvlup) Console.Printf("Level Up Dialouge Timer: %d / 105", LevelupSpeechTimer2);
			if (LevelupSpeechTimer2 >= 105)
			{
				if (random(1,100) <= dvds_levelspeechchance && PlayerCurrentHealth > 0)
				{
					if (CharacterClass == 2) 
					{
						owner.A_PlaySound("FloraLevelSpeech",CHAN_VOICE,1.0,0,ATTN_NORM);
					}
				}
				CallACS("MiscVarSetDECORATE",247,0);
				LevelupSpeechTimer2 = 0;
			}
		}
		
		
		
		
		
		//*****************************
		//*Check for Sceptre Abilities*
		//*****************************
		int SceptreActualLevel = CallACS("OtherVarCheckDECORATE",11);
		if (CharacterClass == 2 && PlayerLevel >= 8 && SceptreActualLevel >= 2) CallACS("MiscVarSetDECORATE",244,1); else CallACS("MiscVarSetDECORATE",244,0);
		
		
		
		
		
		//******************************
		//** Armor Resistance Numbers **
		//******************************
		int ArmorResistance;
		if (playeractor)
		{
			if (ClassCheck > 1)
			{
				ArmorResistance = 0;
				if (CharacterClass == 2)
				{
					if (owner.CountInv("SafeTeaShoes") > 0) ArmorResistance += 30; // Item 1
					if (owner.CountInv("PearlyCorset") > 0) ArmorResistance += 70; // Item 2
					if (owner.CountInv("WaterFlyingDress") > 0) ArmorResistance += 80; // Item 3
					if (owner.CountInv("EvenstarNecklace") > 0) ArmorResistance += 20; // Item 4
					if (owner.CountInv("CloakofEvasion") > 0) ArmorResistance += 40; // Item 5
					if (owner.CountInv("AnubisCufflinks") > 0) ArmorResistance += 50; // Item 6
					if (owner.CountInv("KissaBra") > 0) ArmorResistance += 60; // Item 7
					if (owner.CountInv("DivineShield") > 0) ArmorResistance += 160; // Item 8
					if (owner.CountInv("BalrogRing") > 0) ArmorResistance += 20; // Item 9
					if (owner.CountInv("DoveRibbon") > 0) ArmorResistance += 90; // Item 10
					if (owner.CountInv("FalconKnifeEarrings") > 0) ArmorResistance += 50; // Item 11
				}
				else
				{
					if (owner.CountInv("DSGreenArmorClass") > 0) ArmorResistance += 350;
					if (owner.CountInv("DSBlueArmorClass") > 0) ArmorResistance += 525;
					if (owner.CountInv("DSStoneArmorClass1") > 0) ArmorResistance += 708;
					if (owner.CountInv("DSDiamondArmorClass1") > 0) ArmorResistance += 937;
					if (owner.CountInv("DSStoneArmorClass2") > 0) ArmorResistance += 875;
					if (owner.CountInv("DSDiamondArmorClass2") > 0) ArmorResistance += 987;
				}
				CallACS("MiscVarSetDECORATE",233,ArmorResistance);
			}
		}
		
		
		
		
		
		//************************
		//**Flora Specfic Checks**
		//************************
		if (playeractor)
		{
			int LevelCap = CallACS("OtherVarCheckDECORATE",13);
			if (CharacterClass != 2)
			{
				if (ClassCheck > 2)
				{
					if (CharacterClass != 8 && CharacterClass != 9) { LevelCap = dvds_marines_maxlevel; } // Necessary to prevent the game from giving bogus EXP requirements at level 100-199
					if (CharacterClass == 8) { LevelCap = dvds_ailish_maxlevel; }
					if (CharacterClass == 9) { LevelCap = dvds_petra_maxlevel; }
					if (LevelCap < 0) LevelCap = 0;
					if (LevelCap > 200) LevelCap = 200;
				}
			}
			else
			{
				if (dvds_flora_ignorearmormadelevelcap == 0)
				{
					LevelCap = 100;
					if (owner.CountInv("SafeTeaShoes") > 0) LevelCap += 9;
					if (owner.CountInv("PearlyCorset") > 0) LevelCap += 9;
					if (owner.CountInv("WaterFlyingDress") > 0) LevelCap += 9;
					if (owner.CountInv("EvenstarNecklace") > 0) LevelCap += 9;
					if (owner.CountInv("CloakofEvasion") > 0) LevelCap += 9;
					if (owner.CountInv("AnubisCufflinks") > 0) LevelCap += 9;
					if (owner.CountInv("KissaBra") > 0) LevelCap += 9;
					if (owner.CountInv("BalrogRing") > 0) LevelCap += 9;
					if (owner.CountInv("DoveRibbon") > 0) LevelCap += 9;
					if (owner.CountInv("FalconKnifeEarrings") > 0) LevelCap += 9;
					if (owner.CountInv("DivineShield") > 0) LevelCap += 9;
					if (owner.CountInv("RuinousShield") > 0) LevelCap += 4;
				
					if (LevelCap >= 199) LevelCap = 200;
				}
				else
				{
					LevelCap = dvds_flora_maxlevel;
					if (LevelCap < 0) LevelCap = 0;
					if (LevelCap > 200) LevelCap = 200;
				}
			}
			if (debuglvlup) Console.Printf("LevelCap: %d", LevelCap);
			CallACS("OtherVarSetDECORATE",13,LevelCap);
		}
		
		
		
		
		
		//****************************
		//****************************
		if (playeractor)
		{
			// Safe Tea Boots [25% chance of damagefloor/ironfeet guard during normal incursion of damage]
			// Cloak of Evasion [12.5% chance of damagefloor/ironfeet guard during normal incursion of damage]
			int IronFeetChance = 0;
			if (owner.CountInv("SafeTeaShoes") > 0) IronFeetChance += 250;
			if (owner.CountInv("CloakOfEvasion") > 0) IronFeetChance += 125;
			if (IronFeetChance > 1000) IronFeetChance = 1000;
			if (owner.CountInv("FloraArmorFloorGuard") > 0) owner.A_TakeInventory("FloraArmorFloorGuard",9999);   
			if (random(1,1000) <= IronFeetChance && owner.CountInv("FloraArmorFloorGuard") < 1) owner.A_GiveInventory("FloraArmorFloorGuard",1);
			
			int FearChance = 100;
			if (owner.CountInv("TheOneRing") > 0) FearChance = FearChance * 5 / 3;
			// Anubis Cufflinks [10% (16.667% with One Ring) chance of brief fear-effect on all hostile creatures with attacks]
			if (owner.CountInv("AnubisCufflinksFear") > 0) owner.A_TakeInventory("AnubisCufflinksFear",9999);   
			if (owner.CountInv("AnubisCufflinks") > 0 && random(1,1000) <= FearChance && owner.CountInv("AnubisCufflinksFear") < 1) owner.A_GiveInventory("AnubisCufflinksFear",1);
		}
		
		
		
		
		//****************************
		//*Strife Sigil & Flag Checks*
		//****************************
		if (playeractor)
		{
			int sigil_pieces;
			let sigl = owner.FindInventory("Sigil");
			if (sigl != null) sigil_pieces = sigl.health;
			//Console.Printf("Sigil Pieces: %d", sigil_pieces);
			if (sigil_pieces == 1) owner.A_GiveInventory("SigilPhase1", 1); else owner.A_TakeInventory("SigilPhase1",9999);
			if (sigil_pieces == 2) owner.A_GiveInventory("SigilPhase2", 1); else owner.A_TakeInventory("SigilPhase2",9999);
			if (sigil_pieces == 3) owner.A_GiveInventory("SigilPhase3", 1); else owner.A_TakeInventory("SigilPhase3",9999);
			if (sigil_pieces == 4) owner.A_GiveInventory("SigilPhase4", 1); else owner.A_TakeInventory("SigilPhase4",9999);
			if (sigil_pieces == 5) owner.A_GiveInventory("SigilComplete", 1); else owner.A_TakeInventory("SigilComplete",9999);

			nm = "BestEndingFlag"; iDTech1Check = nm;
			if (owner.CountInv("QuestItem27") > 0 && owner.CountInv("QuestItem25") > 0) 
			{
				owner.A_GiveInventory(iDTech1Check,1);
			}
			else
			{
				owner.A_TakeInventory(iDTech1Check,9999);
			}
			
			// Checks if you've destroyed the Acolyte Converter in Strife MAP24 [Conversion Chapel] (Flag 25)
			if (StrifeQuestFlag25 == 0)
			{
				if (owner.CountInv("QuestItem25") == 1)
				{
					owner.Stamina -= 10;
					owner.Accuracy -= 10;
					ACS_NamedExecuteAlways("StrifeComboUpgrade",0,1);
					StrifeQuestFlag25++;
				}
			}
			// Checks if you've destroyed the Drone Transmitter in Strife MAP14 [The Mines] (Flag 29)
			if (StrifeQuestFlag29 == 0) 
			{
				if (owner.CountInv("QuestItem29") == 1)
				{
					owner.Stamina -= 10;
					owner.Accuracy -= 10;
					ACS_NamedExecuteAlways("StrifeComboUpgrade",0,1);
					StrifeQuestFlag29++;
				}
			}
		}
		
		
		
		
		
		//*********************
		// Grand-Mastery Perks
		//*********************
		if (playeractor)
		{
			perks3mastered = 0;
			if (LifeUpPerkLevel >= 5) perks3mastered++;
			if (MagiUpPerkLevel >= 5) perks3mastered++;
			if (StamUpPerkLevel >= 5) perks3mastered++;
			if (DodgeMorePerkLevel >= 5) perks3mastered++;
			if (JumpMorePerkLevel >= 5) perks3mastered++;
			if (PsycheFastPerkLevel >= 5) perks3mastered++;
			if (RegenHPFastPerkLevel >= 5) perks3mastered++;
			if (RegenMPFastPerkLevel >= 5) perks3mastered++;
			if (RegenStamFastPerkLevel >= 5) perks3mastered++;
			if (BulletAccuracyPerkLevel >= 5) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10021) >= 5) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10023) >= 5) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10025) >= 5) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10031) >= 5) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10033) >= 5) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10035) >= 5) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10037) >= 7) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10043) >= 3) perks3mastered++;
			if (OnTheMovePerkLevel >= 5) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10047) >= 5) perks3mastered++;
			if (CharacterClass == 1)
			{
				if (CallACS("MiscVarCheckDECORATE",10049) >= 4) perks3mastered++;
			}
			else
			{
				if (CallACS("MiscVarCheckDECORATE",10049) >= 5) perks3mastered++;
			}
			if (CallACS("MiscVarCheckDECORATE",10050) >= 4) perks3mastered++;
			if (CallACS("MiscVarCheckDECORATE",10051) >= 5) perks3mastered++;
			if (WandMasteryPerkLevel >= 5) perks3mastered++;
			if (ClearedOfMindParkLevel >= 5) perks3mastered++;
			
			if (perks3mastered >= 15) { CallACS("MiscVarSetDECORATE",11001,2); } // Higher Learning Lvl 2 Enabled
			else if (perks3mastered >= 5) { CallACS("MiscVarSetDECORATE",11001,1); } // Higher Learning Enabled
			else { CallACS("MiscVarSetDECORATE",11001,0); } // Higher Learning Disabled
		}
		
		
		
		
		
		//********************************************************************************
		//*Allows the player to "jiggle" out of sleep faster by pressing movement keys :V*
		//********************************************************************************
		if (playeractor)
		{
			int jiggledecrease = random(4,6);
			if (Owner.CountInv("EvenstarNecklace") > 0) jiggledecrease += random(2,3);
			if (Owner.CountInv("BalrogRing") > 0) jiggledecrease += random(0,1);
			if (GoETimer > 0) jiggledecrease *= 10;
			int jigglecooldown = random(2,3);
			int jigglewarmup = 5;
			if (jiggle_jump > 0) jiggle_jump -= 1;
			if (jiggle_crouch > 0) jiggle_crouch -= 1;
			if (jiggle_left > 0) jiggle_left -= 1;
			if (jiggle_right > 0) jiggle_right -= 1;
			if (jiggle_up > 0) jiggle_up -= 1;
			if (jiggle_down > 0) jiggle_down -= 1;
			if (jiggle_jump < 0) jiggle_jump = 0;
			if (jiggle_crouch < 0) jiggle_crouch = 0;
			if (jiggle_left < 0) jiggle_left = 0;
			if (jiggle_right < 0) jiggle_right = 0;
			if (jiggle_up < 0) jiggle_up = 0;
			if (jiggle_down < 0) jiggle_down = 0;
			if (SleepTimer > 0) // ... put to sleep.
			{
				if (buttons & BT_JUMP | buttons & BT_MOVEUP) // "Crouch"
				{
					if (jiggle_jump < 1)
					{
						CallACS("GetBuffTimer",20,3,jiggledecrease); // Subtract
						jiggle_jump += jigglewarmup;
						jiggle_crouch -= jigglecooldown;
						jiggle_left -= jigglecooldown;
						jiggle_right -= jigglecooldown;
						jiggle_up -= jigglecooldown;
						jiggle_down -= jigglecooldown;
					}
				}
				else
				if (buttons & BT_CROUCH | buttons & BT_MOVEDOWN) // "Crouch"
				{
					if (jiggle_crouch < 1)
					{
						CallACS("GetBuffTimer",20,3,jiggledecrease); // Subtract
						jiggle_jump -= jigglecooldown;
						jiggle_crouch += jigglewarmup;
						jiggle_left -= jigglecooldown;
						jiggle_right -= jigglecooldown;
						jiggle_up -= jigglecooldown;
						jiggle_down -= jigglecooldown;
					}
				}
				else
				if (buttons & BT_LEFT | buttons & BT_MOVELEFT) // Move "Left"
				{
					if (jiggle_left < 1)
					{
						CallACS("GetBuffTimer",20,3,jiggledecrease); // Subtract
						jiggle_jump -= jigglecooldown;
						jiggle_crouch -= jigglecooldown;
						jiggle_left += jigglewarmup;
						jiggle_right -= jigglecooldown;
						jiggle_up -= jigglecooldown;
						jiggle_down -= jigglecooldown;
					}
				}
				else
				if (buttons & BT_RIGHT | buttons & BT_MOVERIGHT) // Move "Right"
				{
					if (jiggle_right < 1)
					{
						CallACS("GetBuffTimer",20,3,jiggledecrease); // Subtract
						jiggle_jump -= jigglecooldown;
						jiggle_crouch -= jigglecooldown;
						jiggle_left -= jigglecooldown;
						jiggle_right += jigglewarmup;
						jiggle_up -= jigglecooldown;
						jiggle_down -= jigglecooldown;
					}
				}
				else
				if (buttons & BT_FORWARD | buttons & BT_LOOKUP) // Move "Forward/Up"
				{
					if (jiggle_up < 1)
					{
						CallACS("GetBuffTimer",20,3,jiggledecrease); // Subtract
						jiggle_jump -= jigglecooldown;
						jiggle_crouch -= jigglecooldown;
						jiggle_left -= jigglecooldown;
						jiggle_right -= jigglecooldown;
						jiggle_up += jigglewarmup;
						jiggle_down -= jigglecooldown;
					}
				}
				else
				if (buttons & BT_BACK | buttons & BT_LOOKDOWN) // Move "Backwards/Down"
				{
					if (jiggle_down < 1)
					{
						CallACS("GetBuffTimer",20,3,jiggledecrease); // Subtract
						jiggle_jump -= jigglecooldown;
						jiggle_crouch -= jigglecooldown;
						jiggle_left -= jigglecooldown;
						jiggle_right -= jigglecooldown;
						jiggle_up -= jigglecooldown;
						jiggle_down += jigglewarmup;
					}
				}
				if (SleepTimer < 0) CallACS("GetBuffTimer",20,1,0); // Set
				SleepTimer = CallACS("GetBuffTimer",20);
				//Console.Printf("Jiggle - Sleep Time: %d, Jump: %d, Crouch: %d, Left: %d, Right: %d, Up: %d, Down: %d", SleepTimer, jiggle_jump, jiggle_crouch, jiggle_left, jiggle_right, jiggle_up, jiggle_down);
			}
		}
		
		
		
		
		
		int TempMaxHealth = CallACS("StatCheck",1);
		int TempMaxMana = CallACS("StatCheck",2);
		int TempCombinedLevels = 0;
		int TempStartValue, TempEndValue;
		//****************
		//*HP Perk Checks*
		//****************
		if (playeractor)
		{
			// "LifeUp [EX]" perks
			TempCombinedLevels = LifeUpPerkLevel + LifeUpEXPerkLevel;
			if (LifeUpPerkComboCheck != TempCombinedLevels)
			{
				if (LifeUpPerkComboCheck != 0)
				{
					LifeUpPerkBaseFactor = LifeUpPerkFactor;
					TempStartValue = PlayerMaxHP;
					TempEndValue = PlayerMaxHP;
					TempEndValue = TempEndValue * ((1000000 / LifeUpPerkFactor)) / 1000;
					TempEndValue += random(0,1);
					//PrintBold(d:TempStartValue,s:" / (",d:LifeUpPerkFactor,s:") / ",d:TempEndValue);
				}
				else
				{
					LifeUpPerkBaseFactor = 1000;
					TempStartValue = PlayerMaxHP;
					TempEndValue = PlayerMaxHP;
				}
				LifeUpPerkFactor = (LifeUpPerkLevel * 50) + (LifeUpEXPerkLevel * 125) + 1000;
				
				TempStartValue = TempEndValue;
				TempEndValue = TempEndValue * LifeUpPerkFactor / 1000;
				TempEndValue += random(0,1);
				//PrintBold(d:TempStartValue,s:" / (",d:LifeUpPerkFactor,s:") / ",d:TempEndValue);
				
				PlayerMaxHP = TempEndValue;
				CallACS("OtherVarSetDECORATE",0,PlayerMaxHP);
				
				LifeUpPerkComboCheck = TempCombinedLevels;
			}
			
			// [STRIFE-Compatibility] Stamina Upgrades [HP side]
			TempCombinedLevels = StrifeStaminaLevel;
			if (StamUpgradeHPComboCheck != TempCombinedLevels)
			{
				if (StamUpgradeHPComboCheck != 0)
				{
					StamUpgradeHPPerkBaseFactor = StamUpgradeHPPerkFactor;
					TempStartValue = PlayerMaxHP;
					TempEndValue = PlayerMaxHP;
					TempEndValue = TempEndValue * ((1000000 / StamUpgradeHPPerkFactor)) / 1000;
					TempEndValue += random(0,1);
					//PrintBold(d:TempStartValue,s:" / (",d:StamUpgradeHPPerkFactor,s:") / ",d:TempEndValue);
				}
				else
				{
					StamUpgradeHPPerkBaseFactor = 1000;
					TempStartValue = PlayerMaxHP;
					TempEndValue = PlayerMaxHP;
				}
				StamUpgradeHPPerkFactor = (StrifeStaminaLevel * 125) + 1000;
				
				TempStartValue = TempEndValue;
				TempEndValue = TempEndValue * StamUpgradeHPPerkFactor / 1000;
				TempEndValue += random(0,1);
				//PrintBold(d:TempStartValue,s:" / (",d:StamUpgradeHPPerkFactor,s:") / ",d:TempEndValue);
				
				PlayerMaxHP = TempEndValue;
				CallACS("OtherVarSetDECORATE",0,PlayerMaxHP);
				
				StamUpgradeHPComboCheck = TempCombinedLevels;
			}
		}
		
		
		
		
		//****************
		//*MP Perk Checks*
		//****************
		if (playeractor)
		{
			// "MagiUp [EX]" perks
			TempCombinedLevels = MagiUpPerkLevel + MagiUpEXPerkLevel;
			if (MagiUpPerkComboCheck != TempCombinedLevels)
			{
				if (MagiUpPerkComboCheck != 0)
				{
					MagiUpPerkBaseFactor = MagiUpPerkFactor;
					TempStartValue = PlayerMaxMP;
					TempEndValue = PlayerMaxMP;
					TempEndValue = TempEndValue * ((1000000 / MagiUpPerkFactor)) / 1000;
					TempEndValue += random(0,1);
					//PrintBold(d:TempStartValue,s:" / (",d:MagiUpPerkFactor,s:") / ",d:TempEndValue);
				}
				else
				{
					MagiUpPerkBaseFactor = 1000;
					TempStartValue = PlayerMaxMP;
					TempEndValue = PlayerMaxMP;
				}
				MagiUpPerkFactor = (MagiUpPerkLevel * 50) + (MagiUpEXPerkLevel * 125) + 1000;
				
				TempStartValue = TempEndValue;
				TempEndValue = TempEndValue * MagiUpPerkFactor / 1000;
				TempEndValue += random(0,1);
				//PrintBold(d:TempStartValue,s:" / (",d:MagiUpPerkFactor,s:") / ",d:TempEndValue);
				
				PlayerMaxMP = TempEndValue;
				CallACS("OtherVarSetDECORATE",1,PlayerMaxMP);
				
				MagiUpPerkComboCheck = TempCombinedLevels;
			}
			
			// [STRIFE-Compatibility] Stamina Upgrades [MP side]
			TempCombinedLevels = StrifeStaminaLevel;
			if (StamUpgradeMPComboCheck != TempCombinedLevels)
			{
				if (StamUpgradeMPComboCheck != 0)
				{
					StamUpgradeMPPerkBaseFactor = StamUpgradeMPPerkFactor;
					TempStartValue = PlayerMaxMP;
					TempEndValue = PlayerMaxMP;
					TempEndValue = TempEndValue * ((1000000 / StamUpgradeMPPerkFactor)) / 1000;
					TempEndValue += random(0,1);
					//PrintBold(d:TempStartValue,s:" / (",d:StamUpgradeMPPerkFactor,s:") / ",d:TempEndValue);
				}
				else
				{
					StamUpgradeMPPerkBaseFactor = 1000;
					TempStartValue = PlayerMaxMP;
					TempEndValue = PlayerMaxMP;
				}
				StamUpgradeMPPerkFactor = (StrifeStaminaLevel * 125) + 1000;
				
				TempStartValue = TempEndValue;
				TempEndValue = TempEndValue * StamUpgradeMPPerkFactor / 1000;
				TempEndValue += random(0,1);
				//PrintBold(d:TempStartValue,s:" / (",d:StamUpgradeMPPerkFactor,s:") / ",d:TempEndValue);
				
				PlayerMaxMP = TempEndValue;
				CallACS("OtherVarSetDECORATE",1,PlayerMaxMP);
				
				StamUpgradeMPComboCheck = TempCombinedLevels;
			}
		}
		
		
		
		
		
		//****************************
		//*Check EXP Kill Combo Timer*
		//****************************
		if (playeractor)
		{
			int TimerMulti, TimerPart1, tempaeonpts;
			EXPComboTimer = CallACS("MiscVarCheckDECORATE",157);
			if (EXPComboTimer > 0)
			{
				TimerMulti = (20 * dvds_expcombotimermultiplier) / 100;
				if (debugexpcomboinfo) Console.Printf("Combo Timer Decrement [Step 1 - Base]: %d", TimerMulti);
				TimerPart1 = 100;
				
				if (CharacterClass == 2)
				{
					if (owner.CountInv("SafeTeaShoes") > 0) TimerPart1 -= 10; // Item 1
					if (owner.CountInv("CloakofEvasion") > 0) TimerPart1 -= 5; // Item 5
					if (owner.CountInv("DivineShield") > 0) TimerPart1 -= 15; // Item 8
					if (owner.CountInv("RuinousShield") > 0) TimerPart1 *= 2;
				}
				else
				{
					if (owner.CountInv("DSGreenArmorClass") > 0) TimerPart1 -= 5;
					if (owner.CountInv("DSBlueArmorClass") > 0) TimerPart1 -= 10;
					if (owner.CountInv("DSStoneArmorClass1") > 0) TimerPart1 -= 15;
					if (owner.CountInv("DSDiamondArmorClass1") > 0) TimerPart1 -= 20;
					if (owner.CountInv("DSStoneArmorClass2") > 0) TimerPart1 -= 25;
					if (owner.CountInv("DSDiamondArmorClass2") > 0) TimerPart1 -= 30;
				}
				if (owner.CountInv("TheOneRing") > 0) TimerPart1 -= 20;
				if (TimerPart1 < 40) TimerPart1 = 40;
				if (TimerPart1 > 250) TimerPart1 = 250;
				if (debugexpcomboinfo) Console.Printf("Combo Timer Decrement [Step 2 - Multiplier Base]: %d", TimerPart1);

				if (GoETimer > 0) TimerPart1 /= 5;
				if (debugexpcomboinfo) Console.Printf("Combo Timer Decrement [Step 3 - GoE Check]: %d", TimerPart1);

				TimerMulti = (TimerMulti * TimerPart1) / 100;
				
				if (TimeFreezeTimer > 0) TimerMulti = TimerMulti / 15;
				if (TimerMulti < 1) TimerMulti = 1;
				if (debugexpcomboinfo) Console.Printf("Combo Timer Decrement [Step 4 - Decrement Timer]: %d, Timer: %d", TimerMulti, EXPComboTimer);
				EXPComboTimer -= TimerMulti;
			}
			
			if (EXPComboTimer <= 0) // Timer Runs out
			{
				int basecomboneeded = dvdsperks_combobase;
				int comboamount = CallACS("MiscVarCheckDECORATE",158); // Temporarily saves the kill combo counter for Aeon Point Checks
				int combolevel1 = basecomboneeded * 1;
				int combolevel2 = basecomboneeded * 3;
				int combolevel3 = basecomboneeded * 7;
				int combolevel4 = basecomboneeded * 12;
				
				if (basecomboneeded > 0 && comboamount > 0)
				{
					if (comboamount >= combolevel1 && comboamount < combolevel2) tempaeonpts = (comboamount / basecomboneeded);
					if (comboamount >= combolevel2 && comboamount < combolevel3) tempaeonpts = (comboamount / basecomboneeded) * 3 / 2;
					if (comboamount >= combolevel3 && comboamount < combolevel4) tempaeonpts = (comboamount / basecomboneeded) * 5 / 2;
					if (comboamount >= combolevel4) tempaeonpts = (comboamount / basecomboneeded) * 4;
					if (debugexpcomboinfo) Console.Printf("Combo Timer Decrement [Step 5 - Get Combo Amounts]: 1: %d, 2: %d, 3: %d, 4: %d, Current: %d", combolevel1, combolevel2, combolevel3, combolevel4, comboamount);
					
					if (tempaeonpts > 0)
					{
						tempaeonpts *= CallACS("MiscVarCheckDECORATE",86);
						CallACS("MiscVarSetDECORATE",25,tempaeonpts,1); 
						CallACS("MiscVarSetDECORATE",224,tempaeonpts,1); 
						CallACS("MiscVarSetDECORATE",2033,105);
						if (PlayerLevel >= CallACS("MiscVarCheckDECORATE",197))
						{
							owner.A_Print(String.Format("\c[orange]You have gained %d Aeon Point[s] for a high enough kill combo!\n\n\c[orange]Remember to allocate your Aeon Points as soon as possible...", tempaeonpts), 2.75, "DVDSSMLFONT");
						}
					}
				}
				
				tempaeonpts = 0;
				comboamount = 0;
				CallACS("MiscVarSetDECORATE",158,0); // Set kill counter back to 0
				CallACS("MiscVarSetDECORATE",160,0); // Set EXP Combo Amount back to 0
			}
			CallACS("MiscVarSetDECORATE",157,EXPComboTimer); // Subtract
		}
		
		
		
		
		
		//******************
		//*Get Health Ratio*
		//******************
		PlayerMaxHP = CallACS("StatCheck",1);
		if (playeractor && PlayerMaxHP > 0)
		{
			HealthRatio = (PlayerCurrentHealth * 1000) / PlayerMaxHP;
			if (HealthRatio < 0) HealthRatio = 0;
			if (HealthRatio > 2000) HealthRatio = 2000;
		}
		
		
		
		
		
		//*********************
		//*Health Level Checks*
		//*********************
		if (playeractor)
		{
			if (PlayerCurrentHealth <= 0) { Owner.A_GiveInventory("PlayerIsDead", 1); }
			else
			{
				Owner.A_TakeInventory("PlayerIsDead", 1);
				if (HealthRatio != PrevHealthRatio)
				{
					if (HealthRatio < 167)
					{
						if (HealthRatio < 21)
						{
							Owner.A_GiveInventory("CriticalHealth", 1);
							Owner.A_TakeInventory("LowHealth", 9999);
						}
						else 
						{
							Owner.A_GiveInventory("LowHealth", 1);
							Owner.A_TakeInventory("CriticalHealth", 9999);
						}
						Owner.A_TakeInventory("NormalHealth", 9999);
					}
					else 
					{
						Owner.A_GiveInventory("NormalHealth", 1);
						Owner.A_TakeInventory("LowHealth", 9999);
						Owner.A_TakeInventory("CriticalHealth", 9999);
					}
					if (PlayerCurrentHealth >= PlayerMaxHP) Owner.A_GiveInventory("FullHealth", 1); else Owner.A_TakeInventory("FullHealth", 1);
					
					PrevHealthRatio = HealthRatio;
				}
			}
		}
		
		
		
		
		
		//********************
		//*Skill Level Checks*
		//********************
		if (playeractor)
		{
			if (Skill <= SKILL_VERY_EASY)
			{
				if (Owner.CountInv("IsSkill1") == 0) Owner.A_GiveInventory("IsSkill1", 1);
				if (Owner.CountInv("IsEasySkill") == 0) Owner.A_GiveInventory("IsEasySkill", 1);
			}
			if (Skill == SKILL_EASY)
			{
				if (Owner.CountInv("IsSkill2") == 0) Owner.A_GiveInventory("IsSkill2", 1);
				if (Owner.CountInv("IsEasySkill") == 0) Owner.A_GiveInventory("IsEasySkill", 1);
			}
			if (Skill == SKILL_NORMAL)
			{
				if (Owner.CountInv("IsSkill3") == 0) Owner.A_GiveInventory("IsSkill3", 1);
			}
			if (Skill == SKILL_HARD)
			{
				if (Owner.CountInv("IsSkill4") == 0) Owner.A_GiveInventory("IsSkill4", 1);
				if (Owner.CountInv("IsHardSkill") == 0) Owner.A_GiveInventory("IsHardSkill", 1);
			}
			if (Skill == SKILL_VERY_HARD)
			{
				if (Owner.CountInv("IsSkill5") == 0) Owner.A_GiveInventory("IsSkill5", 1);
				if (Owner.CountInv("IsHardSkill") == 0) Owner.A_GiveInventory("IsHardSkill", 1);
			}
			if (Skill >= SKILL_EXTREME)
			{
				if (Owner.CountInv("IsSkill6") == 0) Owner.A_GiveInventory("IsSkill6", 1);
				if (Owner.CountInv("IsHardSkill") == 0) Owner.A_GiveInventory("IsHardSkill", 1);
			}
		}
		
		
		
		
		
		//**********************
		//**RadiusDamageFactor**
		//**********************
		if (playeractor)
		{
			currenthealth = owner.health;
			double TotalRDFactor = 1.00;

			double EWShieldRDFactor = 1.00;
			If (weapon is "EvilWarriorShield") 
			{
				EWShieldRDFactor *= 0.67;
				if (Owner.CountInv("EWShieldDefendMode") > 0) EWShieldRDFactor *= 0.134;
				if (Owner.CountInv("EWShieldDefendModeExtra") > 0) EWShieldRDFactor *= 0.0268;
			}

			double PlayerFistBlockRDFactor = 1.00;
			if (Owner.CountInv("FistPlayerBlock") > 0) PlayerFistBlockRDFactor *= 0.5;
			if (Owner.CountInv("FistPlayerBlock2") > 0) PlayerFistBlockRDFactor *= 0.375;
			if (Owner.CountInv("FistPlayerBlock3") > 0) PlayerFistBlockRDFactor *= 0.25;
			if (Owner.CountInv("FistPlayerBlockExtra") > 0) PlayerFistBlockRDFactor *= 0.1;
			
			double MarineArmorRDFactor = 1.00;
			if (CharacterClass == 0 || CharacterClass == 1)
			{
				if (Owner.CountInv("DSGreenArmorClass") > 0) MarineArmorRDFactor -= 0.01;
				if (Owner.CountInv("DSBlueArmorClass") > 0) MarineArmorRDFactor -= 0.04;
				if (Owner.CountInv("DSStoneArmorClass1") > 0) MarineArmorRDFactor -= 0.15;
				if (Owner.CountInv("DSDiamondArmorClass1") > 0) MarineArmorRDFactor -= 0.075;
				if (Owner.CountInv("DSStoneArmorClass2") > 0) MarineArmorRDFactor -= 0.30;
				if (Owner.CountInv("DSDiamondArmorClass2") > 0) MarineArmorRDFactor -= 0.35;
			}

			double FloraArmorRDFactor = 1.00;
			if (CharacterClass == 2)
			{
				if (Owner.CountInv("WaterFlyingDress") > 0) FloraArmorRDFactor -= 0.20;
				if (Owner.CountInv("BalrogRing") > 0) FloraArmorRDFactor -= 0.25;
			}

			// "Demolition Expert" Perk
			double DemoExpertRDFactor = 1.00;
			DemoExpertRDFactor = 1.00 - ((CallACS("MiscVarCheckDECORATE",10025) * frandom[demordfactor](0.07,0.14)) + (CallACS("MiscVarCheckDECORATE",10026) * (frandom[demordfactor2](0.07,0.14) * 5 / 2))); 
			if (DemoExpertRDFactor < 0.025) DemoExpertRDFactor = 0.025;

			// Death Rage [Invulnerablity?]
			double DeathRageRDFactor = 1.0;
			if (CallACS("MiscVarCheckDECORATE",9043) > 0) DeathRageRDFactor = 0.0;
			
			// DQ Buffs
			double DQBuffRDFactor = 1.00;
			if (DQBuffTimer > 0) DQBuffRDFactor *= 0.50; // Buff
			if (DQSapTimer > 0) DQBuffRDFactor *= 2.00; // Sap
			if (SleepTimer > 0) // Sleep
			{
				if (random(1,16) == 1) DQBuffRDFactor *= 5.0; else DQBuffRDFactor *= 1.25;
			}

			// Sceptre Swinging [DEFENSIVE]
			double SceptreDefenseRDFactor = 1.0;
			if (Owner.CountInv("SwingDefense0") > 0) SceptreDefenseRDFactor *= 0.95;
			if (Owner.CountInv("SwingDefense1") > 0) SceptreDefenseRDFactor *= 0.8333;
			if (Owner.CountInv("SwingDefense2") > 0) SceptreDefenseRDFactor *= 0.6666;
			if (Owner.CountInv("SwingDefense3") > 0) SceptreDefenseRDFactor *= 0.5;
			if (Owner.CountInv("ShieldDefense") > 0) SceptreDefenseRDFactor *= 0.5;
			if (Owner.CountInv("ShieldDefense2") > 0) SceptreDefenseRDFactor *= 0.25;
			if (Owner.CountInv("ShieldDefense3") > 0) SceptreDefenseRDFactor *= 0.06125;
			if (Owner.CountInv("SceptreSpinDefense1") > 0) SceptreDefenseRDFactor *= 0.9375;
			if (Owner.CountInv("SceptreSpinDefense2") > 0) SceptreDefenseRDFactor *= 0.875;
			if (Owner.CountInv("SceptreSpinDefense3") > 0) SceptreDefenseRDFactor *= 0.75;
			if (Owner.CountInv("SceptreSpinDefense4") > 0) SceptreDefenseRDFactor *= 0.5;

			TotalRDFactor = 1.00
										* EWShieldRDFactor
										* PlayerFistBlockRDFactor
										* MarineArmorRDFactor
										* FloraArmorRDFactor
										* DemoExpertRDFactor
										* DeathRageRDFactor
										* DQBuffRDFactor
										* SceptreDefenseRDFactor;

			double BaseIgnoreFactor = 0.0;
			double DefenseIgnoreFactor = 0.0;
			if (playeractor && playeractor.PlayerDefenseIgnoreFactor > 0.00)
			{
				BaseIgnoreFactor = (1.0 - TotalRDFactor);
				DefenseIgnoreFactor = BaseIgnoreFactor * playeractor.PlayerDefenseIgnoreFactor;
				TotalRDFactor += DefenseIgnoreFactor;
			}
			
			if (GoETimer > 0) TotalRDFactor *= 0.1;
			owner.RadiusDamageFactor = TotalRDFactor;

			int predmg = 0;
			if (playeractor && playeractor.mobjdmg > 0) 
			{
				predmg = playeractor.mobjdmg;
				playeractor.mobjdmg = 0;
			}
			if (dvdsdebug_playerdmgdisplays > 0 && predmg > 0) 
			{
				Console.Printf("    \czRADIUSDAMAGE\c-: \cxTotalRDFactor = %8f\c-, EWShieldRDFactor = %8f, PlayerFistBlockRDFactor = %8f, MarineArmorRDFactor = %8f, FloraArmorRDFactor = %8f, DemoExpertRDFactor = %8f, DeathRageRDFactor = %8f, DQBuffRDFactor = %8f, SceptreDefenseRDFactor = %8f", 
				TotalRDFactor, 
				EWShieldRDFactor, PlayerFistBlockRDFactor, 
				MarineArmorRDFactor, FloraArmorRDFactor, 
				DemoExpertRDFactor, DeathRageRDFactor, 
				DQBuffRDFactor, SceptreDefenseRDFactor);
			}
		}
		
		
		
		
		
		//********
		//**Mass**
		//********
		TotalMass = 100;
		if (playeractor)
		{
			if (CharacterClass == 0) // Deggaris
			{
				TotalMass = 116;
				TotalMass += (PlayerDEF / 9);		// Defense [Seeds]
				TotalMass += (PlayerSTR / 15);		// Strength [Seeds]
				TotalMass += (PlayerSOR / 27);		// Sorcery [Seeds]
				TotalMass += (PlayerTHE / 21);		// Therapeusis [Seeds]
				
				if (Owner.CountInv("DSGreenArmorClass") > 0)		{ TotalMass += 4;  TotalMass = TotalMass * 101 / 100; }
				if (Owner.CountInv("DSBlueArmorClass") > 0)			{ TotalMass += 8;  TotalMass = TotalMass * 102 / 100; }
				if (Owner.CountInv("DSStoneArmorClass1") > 0)		{ TotalMass += 12; TotalMass = TotalMass * 104 / 100; }
				if (Owner.CountInv("DSDiamondArmorClass1") > 0)	{ TotalMass += 16; TotalMass = TotalMass * 108 / 100; }
				if (Owner.CountInv("DSStoneArmorClass2") > 0)		{ TotalMass += 12; TotalMass = TotalMass * 112 / 100; }
				if (Owner.CountInv("DSDiamondArmorClass2") > 0)	{ TotalMass += 16; TotalMass = TotalMass * 124 / 100; }
				
				// Add a point of mass for every 8 levels for Deggaris [max of 25]
				TotalMass = TotalMass + (PlayerLevel / 8);
			}
			if (CharacterClass == 1) // Illucia
			{
				TotalMass = 96;
				TotalMass += (PlayerDEF / 12);		// Defense [Seeds]
				TotalMass += (PlayerSTR / 18);		// Strength [Seeds]
				TotalMass += (PlayerSOR / 21);		// Sorcery [Seeds]
				TotalMass += (PlayerTHE / 15);		// Therapeusis [Seeds]
				
				if (Owner.CountInv("DSGreenArmorClass") > 0)		{ TotalMass += 4;  TotalMass = TotalMass * 101 / 100; }
				if (Owner.CountInv("DSBlueArmorClass") > 0)			{ TotalMass += 8;  TotalMass = TotalMass * 102 / 100; }
				if (Owner.CountInv("DSStoneArmorClass1") > 0)		{ TotalMass += 12; TotalMass = TotalMass * 104 / 100; }
				if (Owner.CountInv("DSDiamondArmorClass1") > 0)	{ TotalMass += 16; TotalMass = TotalMass * 108 / 100; }
				if (Owner.CountInv("DSStoneArmorClass2") > 0)		{ TotalMass += 12; TotalMass = TotalMass * 112 / 100; }
				if (Owner.CountInv("DSDiamondArmorClass2") > 0)	{ TotalMass += 16; TotalMass = TotalMass * 124 / 100; }
				
				// Add a point of mass for every 10 levels for Illucia [max of 20]
				TotalMass = TotalMass + (PlayerLevel / 10);
			}
			if (CharacterClass == 2) // Flora
			{
				TotalMass = 68;
				TotalMass += (PlayerDEF / 15);		// Defense [Seeds]
				TotalMass += (PlayerSTR / 21);		// Strength [Seeds]
				TotalMass += (PlayerSOR / 15);		// Sorcery [Seeds]
				TotalMass += (PlayerTHE / 9);		// Therapeusis [Seeds]

				if (Owner.CountInv("SafeTeaShoes") > 0)						TotalMass += 1;
				if (Owner.CountInv("PearlyCorset") > 0)						TotalMass += 3;
				if (Owner.CountInv("WaterFlyingDress") > 0)				TotalMass += 4;
				if (Owner.CountInv("EvenstarNecklace") > 0)				TotalMass += 1;
				if (Owner.CountInv("CloakofEvasion") > 0)					TotalMass += 3;
				if (Owner.CountInv("AnubisCufflinks") > 0)				TotalMass += 2;
				if (Owner.CountInv("KissaBra") > 0)								TotalMass += 1;
				if (Owner.CountInv("BalrogRing") > 0)							TotalMass += 1;
				if (Owner.CountInv("DoveRibbon") > 0)							TotalMass += 2;
				if (Owner.CountInv("DivineShield") > 0)					{ TotalMass += 10; TotalMass *= 2; }
				if (Owner.CountInv("RuinousShield") > 0)				{ TotalMass -= 10; TotalMass /= 2; }

				if (Owner.CountInv("DSSpiritualExoskin1") > 0)	{ TotalMass += 4; TotalMass = TotalMass * 102 / 100;}
				if (Owner.CountInv("DSSpiritualExoskin2") > 0)	{ TotalMass += 12; TotalMass = TotalMass * 106 / 100;}
				if (Owner.CountInv("DSSpiritualExoskin3") > 0)	{ TotalMass += 30; TotalMass = TotalMass * 115 / 100;}

				if (Owner.CountInv("ShieldDefense") > 0)				{ TotalMass = TotalMass * 5 / 4; }
				if (Owner.CountInv("ShieldDefense2") > 0)				{ TotalMass = TotalMass * 3 / 2; }
				if (Owner.CountInv("ShieldDefense3") > 0)				{ TotalMass = TotalMass * 15 / 8; }
				
				// Add a point of mass for every 12 levels for Flora [max of 16/17]
				TotalMass = TotalMass + (PlayerLevel / 12);
			}
			if (CharacterClass == 8) // Ailish
			{
				TotalMass = 66;
				TotalMass += (PlayerDEF / 9);		// Defense [Seeds]
				TotalMass += (PlayerSTR / 15);		// Strength [Seeds]
				TotalMass += (PlayerSOR / 21);		// Sorcery [Seeds]
				TotalMass += (PlayerTHE / 21);		// Therapeusis [Seeds]

				// Add a point of mass for every 13 levels for Ailish [max of 15]
				TotalMass = TotalMass + (PlayerLevel / 13);
			}
			if (CharacterClass == 9) // Petra
			{
				TotalMass = 70;
				TotalMass += (PlayerDEF / 9);		// Defense [Seeds]
				TotalMass += (PlayerSTR / 21);		// Strength [Seeds]
				TotalMass += (PlayerSOR / 23);		// Sorcery [Seeds]
				TotalMass += (PlayerTHE / 13);		// Therapeusis [Seeds]

				// Add a point of mass for every 8 levels for Petra [max of 22]
				TotalMass = TotalMass + (PlayerLevel / 8);
			}
			
			// Buff Timers
			if (InvulnerabilityTimer > 0) TotalMass *= 128;	// 128x Mass when Invulnerable
			if (DivineAvatarTimer > 0) TotalMass *= 4;		// 4x Mass when using Divine Avatar
			if (GoETimer > 0) TotalMass *= 10;		// 10x Mass when using GoE
			if (DQBuffTimer > 0) TotalMass *= 2;		// 2x Mass when using Buff

			// Sauron Items
			if (Owner.CountInv("SauronHelmet") > 0)						{ TotalMass += 17; TotalMass = TotalMass * 117 / 100; }
			if (Owner.CountInv("SauronGauntletsIllucia") > 0)	{ TotalMass += 6;  TotalMass = TotalMass * 106 / 100; }
			if (Owner.CountInv("SauronGauntletsFlora") > 0)		{ TotalMass += 4;  TotalMass = TotalMass * 104 / 100; }
			if (Owner.CountInv("SauronGauntlets") > 0)				{ TotalMass += 5;  TotalMass = TotalMass * 105 / 100; }
			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0)							{ TotalMass += 3;  TotalMass = TotalMass * 103 / 100; }
			nm = "SauronGauntletsPetra"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0)							{ TotalMass += 7;  TotalMass = TotalMass * 107 / 100; }
			if (Owner.CountInv("TheOneRing") > 0)							{ TotalMass += 17; TotalMass = TotalMass * 117 / 100; }
			
			// Fist Blocks
			if (Owner.CountInv("FistPlayerBlock") > 0)					TotalMass = TotalMass * 2;
			if (Owner.CountInv("FistPlayerBlock2") > 0)					TotalMass = TotalMass * 8 / 3;
			if (Owner.CountInv("FistPlayerBlock3") > 0)					TotalMass = TotalMass * 4;

			// Final Calculations
			owner.mass = TotalMass;
			CallACS("SetMiscellaneousVar",201,TotalMass); // Set to the Total Mass
			//Console.Printf("    Calculated Mass: %d [Real Mass: %d]", TotalMass, owner.mass);
			PlayerMASS = CallACS("StatCheck",10);
		}
		
		
		
		
		
		//*********
		//**JumpZ**
		//*********
		if (playeractor)
		{
			double CharacterJumpZ = 8.0;
			if (CharacterClass == 0) CharacterJumpZ = 7.5;
			if (CharacterClass == 1) CharacterJumpZ = 8.5;
			if (CharacterClass == 2) CharacterJumpZ = 9.0;
			if (CharacterClass == 8) CharacterJumpZ = 7.0;
			if (CharacterClass == 9) CharacterJumpZ = 9.5;

			// Level
			double LevelJumpZ = 1.00;
			if (CharacterClass == 0) LevelJumpZ += (PlayerLevel * 0.00226);
			if (CharacterClass == 1) LevelJumpZ += (PlayerLevel * 0.00256);
			if (CharacterClass == 2) LevelJumpZ += (PlayerLevel * 0.00276);
			if (CharacterClass == 8) LevelJumpZ += (PlayerLevel * 0.00216);
			if (CharacterClass == 9) LevelJumpZ += (PlayerLevel * 0.00296);

			// AGL
			double AGLJumpZ = 1.00;
			if (CharacterClass == 0) AGLJumpZ += (PlayerAGL * 0.00076);
			if (CharacterClass == 1) AGLJumpZ += (PlayerAGL * 0.00086);
			if (CharacterClass == 2) AGLJumpZ += (PlayerAGL * 0.00093);
			if (CharacterClass == 8) AGLJumpZ += (PlayerAGL * 0.00070);
			if (CharacterClass == 9) AGLJumpZ += (PlayerAGL * 0.00100);

			// Armor
			double ArmorJumpZ = 1.00;
			if (CharacterClass == 2)
			{
				if (Owner.CountInv("SafeTeaShoes") > 0) 				ArmorJumpZ += 0.10;
				if (Owner.CountInv("PearlyCorset") > 0) 				ArmorJumpZ += 0.005;
				if (Owner.CountInv("WaterFlyingDress") > 0)			ArmorJumpZ += 0.005;
				if (Owner.CountInv("EvenstarNecklace") > 0)			ArmorJumpZ += 0.0125;
				if (Owner.CountInv("CloakofEvasion") > 0)				ArmorJumpZ += 0.025;
				if (Owner.CountInv("AnubisCufflinks") > 0)			ArmorJumpZ += 0.0125;
				if (Owner.CountInv("KissaBra") > 0)							ArmorJumpZ += 0.025;
				if (Owner.CountInv("DivineShield") > 0)					ArmorJumpZ += 0.00625;
				if (Owner.CountInv("BalrogRing") > 0)						ArmorJumpZ += 0.0125;
				if (Owner.CountInv("DoveRibbon") > 0)						ArmorJumpZ += 0.05;
				if (Owner.CountInv("FalconKnifeEarrings") > 0)	ArmorJumpZ += 0.0375;
			}
			else
			if (CharacterClass == 0 || CharacterClass == 1)
			{
				if (Owner.CountInv("DSGreenArmorClass") > 0)		ArmorJumpZ += 0.0334;
				if (Owner.CountInv("DSBlueArmorClass") > 0)			ArmorJumpZ += 0.05;
				if (Owner.CountInv("DSStoneArmorClass1") > 0)		ArmorJumpZ += 0.0667;
				if (Owner.CountInv("DSDiamondArmorClass1") > 0)	ArmorJumpZ += 0.09;
				if (Owner.CountInv("DSStoneArmorClass2") > 0)		ArmorJumpZ += 0.0833;
				if (Owner.CountInv("DSDiamondArmorClass2") > 0)	ArmorJumpZ += 0.095;
			}
			
			double SauronArmorJumpZ = 1.00;
			if (Owner.CountInv("SauronHelmet") > 0)						SauronArmorJumpZ -= 0.10;
			if (Owner.CountInv("SauronGauntlets") > 0)				SauronArmorJumpZ -= 0.05;
			if (Owner.CountInv("SauronGauntletsIllucia") > 0)	SauronArmorJumpZ -= 0.05;
			if (Owner.CountInv("SauronGauntletsFlora") > 0)		SauronArmorJumpZ -= 0.05;
			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0)							SauronArmorJumpZ -= 0.05;
			nm = "SauronGauntletsPetra"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0)							SauronArmorJumpZ -= 0.05;
			if (Owner.CountInv("TheOneRing") > 0)							SauronArmorJumpZ += 0.25;

			double BuffJumpZ = 1.00;
			if (DQAcceleratleTimer > 0) BuffJumpZ += 0.25;
			if (DQDeceleratleTimer > 0) BuffJumpZ -= 0.25;

			double SceptreJumpZ = 1.00;
			if (CallACS("MiscVarCheckDECORATE",397) == 1) SceptreJumpZ -= 0.20;
			if (CallACS("MiscVarCheckDECORATE",397) == 2) SceptreJumpZ -= 0.10;
			if (CallACS("MiscVarCheckDECORATE",397) == 3) SceptreJumpZ -= 0.05;

			double DivineAvatarJumpZ = 1.00;
			if (DivineAvatarTimer > 0) DivineAvatarJumpZ *= 2.00;

			double GoEJumpZ = 1.00;
			if (GoETimer > 0) GoEJumpZ *= 2.50;

			double PerkFactorJumpZ = 1.0;
			PerkFactorJumpZ += ((JumpMorePerkLevel * 0.05) + (JumpMoreEXPerkLevel * 0.125));

			double StaminaJumpZ = 1.0;
			int StaminaLevel;
			int StaminaMax = 10000;
			if (CallACS("MiscVarCheckDECORATE",22) > 0) StaminaMax = CallACS("MiscVarCheckDECORATE",22);
			StaminaLevel = CallACS("MiscVarCheckDECORATE",21) * 10000 / StaminaMax;
			if (dvds_staminaaffectsspeed > 0)
			{
				if (StaminaLevel < 157) StaminaJumpZ = 0.6625;
				if (StaminaLevel > 156 && StaminaLevel < 626) StaminaJumpZ = 0.7375;
				if (StaminaLevel > 625 && StaminaLevel < 1251) StaminaJumpZ = 0.805;
				if (StaminaLevel > 1250 && StaminaLevel < 2501) StaminaJumpZ = 0.865;
				if (StaminaLevel > 2500 && StaminaLevel < 5001) StaminaJumpZ = 0.9175;
				if (StaminaLevel > 5000 && StaminaLevel < 7501) StaminaJumpZ = 0.9625;
				if (StaminaLevel > 7500 && StaminaLevel < 12501) StaminaJumpZ = 1.00;
				if (StaminaLevel > 12500 && StaminaLevel < 20001) StaminaJumpZ = 1.0375;
				if (StaminaLevel > 20000 && StaminaLevel < 27501) StaminaJumpZ = 1.0825;
				if (StaminaLevel > 27500 && StaminaLevel < 35001) StaminaJumpZ = 1.135;
				if (StaminaLevel > 35000 && StaminaLevel < 42501) StaminaJumpZ = 1.195;
				if (StaminaLevel > 42500 && StaminaLevel < 48751) StaminaJumpZ = 1.2625;
				if (StaminaLevel > 48750) StaminaJumpZ = 1.3375;
			}

			double FistBlockJumpZ = 1.00;
			if (Owner.CountInv("FistPlayerSpeedFactor") > 0) FistBlockJumpZ = 0.75;
			if (Owner.CountInv("FistPlayerSpeedFactor2") > 0) FistBlockJumpZ = 0.825;
			if (Owner.CountInv("FistPlayerSpeedFactor3") > 0) FistBlockJumpZ = 0.90;
			
			double TotalJumpZ = CharacterJumpZ
												* LevelJumpZ
												* AGLJumpZ
												* ArmorJumpZ
												* SauronArmorJumpZ
												* BuffJumpZ
												* SceptreJumpZ
												* PerkFactorJumpZ
												* StaminaJumpZ
												* FistBlockJumpZ
												* DivineAvatarJumpZ
												* GoeJumpZ;

			int TrueJumpHeight = ((TotalJumpZ * (TotalJumpZ + 1.0)) / 2) + owner.maxstepheight;
			PlayerPawn(Owner).JumpZ = TotalJumpZ;
			CallACS("SetMiscellaneousVar",200,TrueJumpHeight); // Set to the True Jump Height
			if (dvdsdebug_showmoveinformation > 0)
			{
				Console.Printf("    \cwTotalJumpZ:\c- \cw%8f\c- [\cxTrueJumpHeight:\c- \cx%d\c-], CharacterJumpZ: %8f, LevelJumpZ: %8f, AGLJumpZ: %8f, ArmorJumpZ: %8f, SauronArmorJumpZ: %8f, BuffJumpZ: %8f, SceptreJumpZ: %8f, PerkFactorJumpZ: %8f, StaminaJumpZ: %8f, FistBlockJumpZ: %8f, DivineAvatarJumpZ: %8f, GoEJumpZ: %8f", 
														TotalJumpZ, TrueJumpHeight,
														CharacterJumpZ, LevelJumpZ, 
														AGLJumpZ, ArmorJumpZ, 
														SauronArmorJumpZ, BuffJumpZ, 
														SceptreJumpZ, PerkFactorJumpZ, 
														StaminaJumpZ, FistBlockJumpZ, 
														DivineAvatarJumpZ, GoEJumpZ);
			}
		}
		
		
		
		
		
		//*****************
		//**Survival Rate**
		//*****************
		int SurvivalRate = CallACS("MiscVarCheckDECORATE",0);
		int SkillFactor;
		if (playeractor)
		{
			// 0.1% for every 2 levels (max of 50 or 5.0% [max of 100 or 10.0% for Flora at Level 200])
			SurvivalRate += (PlayerLevel / 2);
			if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 1 - Base]: %d\c-", SurvivalRate);

			SkillFactor = 0;
			// Every 3/4/5 Points of Defenses = 0.1% increase to Survivability Rate
			if (TrueGameSkill <= SKILL_VERY_EASY) SkillFactor = PlayerDEF / 3;
			if (TrueGameSkill == SKILL_EASY) SkillFactor = PlayerDEF / 3;
			if (TrueGameSkill == SKILL_NORMAL) SkillFactor = PlayerDEF / 4;
			if (TrueGameSkill == SKILL_HARD) SkillFactor = PlayerDEF / 5;
			if (TrueGameSkill == SKILL_VERY_HARD) SkillFactor = PlayerDEF / 5;
			if (TrueGameSkill == SKILL_EXTREME) SkillFactor = PlayerDEF / 6;
			if (TrueGameSkill == SKILL_HORRIBLE) SkillFactor = PlayerDEF / 6;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) SkillFactor = PlayerDEF / 7;
			if (TrueGameSkill >= SKILL_OMEGA) SkillFactor = PlayerDEF / 8;
			SurvivalRate += SkillFactor;
			if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 2 - DefStat Check]: %d,\c- Added: %d, Difficulty Level", SurvivalRate, SkillFactor, TrueGameSkill);

			SkillFactor = 0;
			// Abhorrent's Equipment Set
			if (Owner.CountInv("SauronHelmet") > 0) SkillFactor += 175; // Helmet = 17.5%
			if (Owner.CountInv("SauronGauntlets") > 0) SkillFactor += 50; // Gauntlets (Deggaris) = 5.0%
			if (Owner.CountInv("SauronGauntletsIllucia") > 0) SkillFactor += 60; // Gauntlets (Illucia) = 6.0%
			if (Owner.CountInv("SauronGauntletsFlora") > 0) SkillFactor += 40; // Gauntlets (Flora) = 4.0%
			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0) SkillFactor += 80; // Gauntlets (Ailish) = 8.0%
			nm = "SauronGauntletsPetra"; APPackCheck = nm;
			if (Owner.CountInv(APPackCheck) > 0) SkillFactor += 70; // Gauntlets (Petra) = 7.0%
			if (Owner.CountInv("TheOneRing") > 0) SkillFactor += 333; // The One Ring = 33.3%
			SurvivalRate += SkillFactor;
			if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 3 - Abhorrent's Check]: %d,\c- Added: %d", SurvivalRate, SkillFactor);

			SkillFactor = 0;
			if (CharacterClass != 2) // Deggaris and Illucia take advantage of Doom-equse Armor, however Flora, Ailish, and Petra cannot.
			{
				if (Owner.CountInv("DSGreenArmorClass") > 0) SkillFactor += 5; // Green Armor = 0.5% [Deggaris and Illucia Only]
				if (Owner.CountInv("DSBlueArmorClass") > 0) SkillFactor += 10; // Blue Armor = 1.0% [Deggaris and Illucia Only]
				if (Owner.CountInv("DSStoneArmorClass1") > 0) SkillFactor += 16; // Stone Skin [1] = 1.6% [Deggaris and Illucia Only]
				if (Owner.CountInv("DSDiamondArmorClass1") > 0) SkillFactor += 44; // Diamond Skin [1] = 4.4% [Deggaris and Illucia Only]
				if (Owner.CountInv("DSStoneArmorClass2") > 0) SkillFactor += 66; // Stone Skin [2] = 6.6% [Deggaris and Illucia Only]
				if (Owner.CountInv("DSDiamondArmorClass2") > 0) SkillFactor += 176; // Diamond Skin [2] = 17.6% [Deggaris and Illucia Only]
			}
			if (CharacterClass == 2) // Items only Flora can make use of
			{
				if (Owner.CountInv("DSSpiritualExoskin1") > 0) SkillFactor += 32; // Spiritual Exoskin = 3.2% [Flora Only]
				if (Owner.CountInv("DSSpiritualExoskin2") > 0) SkillFactor += 96; // Greater Spiritual Exoskin = 9.6% [Flora Only]
				if (Owner.CountInv("DSSpiritualExoskin2") > 0) SkillFactor += 288; // Perfected Spiritual Exoskin = 28.8% [Flora Only]
				if (Owner.CountInv("AnubisCufflinks") > 0) SkillFactor += 100; // Anubis Cufflinks = 10.0% [Flora Only]
				if (Owner.CountInv("DoveRibbon") > 0) SkillFactor += 150; // Dove Ribbon = 15.0% [Flora Only]
			}
			SurvivalRate += SkillFactor;
			if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 4 - Armor Item Check]: %d,\c- Added: %d", SurvivalRate, SkillFactor);

			SkillFactor = 0;
			// Divine Avatar = (25.0% of remaining amount uncovered)
			if (DivineAvatarTimer > 0)
			{
				SkillFactor = (1000 - SurvivalRate) * 0.25;
				SurvivalRate += SkillFactor;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 5 - Divine Avatar Check]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}

			SkillFactor = 0;
			// GoE = (62.5% of remaining amount uncovered)
			if (GoETimer > 0)
			{
				SkillFactor = (1000 - SurvivalRate) * 0.625;
				SurvivalRate += SkillFactor;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 5a - GoE Check]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}

			SkillFactor = 0;
			// [STRIFE-Compatibility] Stamina Upgrades
			if (StrifeStaminaLevel > 0)
			{
				SkillFactor = StrifeStaminaLevel * 11;
				SurvivalRate += SkillFactor;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 6 - Strife-Stamina Perk]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}

			SkillFactor = 0;
			// Buff = (10.0% of remaining amount uncovered)
			if (DQBuffTimer > 0)
			{
				SkillFactor = (1000 - SurvivalRate) / 10;
				SurvivalRate += SkillFactor;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 7a - Buff Check]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}
			SkillFactor = 0;
			// Sap = (-10.0% of remaining amount uncovered)
			if (DQSapTimer > 0)
			{
				SkillFactor = (1000 - SurvivalRate) / 10;
				SurvivalRate -= SkillFactor;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 7b - Sap Check]: %d,\c- Subtracted: %d", SurvivalRate, SkillFactor);
			}
		
			SkillFactor = 0;
			// Life Up Perks = total of +6% Survival
			if (LifeUpPerkLevel > 0 || LifeUpEXPerkLevel > 0)
			{
				SkillFactor = ((LifeUpPerkLevel * 6) + (LifeUpEXPerkLevel * 15));
				SurvivalRate += SkillFactor;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 8 - LifeUp Perk]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// Kissa's Armored Brassiere = 25.0%
			if (Owner.CountInv("KissaBra") > 0)
			{
				SkillFactor += 250; 
				SurvivalRate += SkillFactor;
				if (SurvivalRate > 938) SurvivalRate = 938;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 9 - Kissa's Brassiere (Yes)]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}
			else
			{
				if (SurvivalRate > 875) SurvivalRate = 875;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 9 - Kissa's Brassiere (No)]: %d,\c- Added: %d", SurvivalRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// Ruinous Shield
			if (Owner.CountInv("RuinousShield") > 0)
			{
				SkillFactor = SurvivalRate - (SurvivalRate / 5); // Ruinous Shield divides Survival Rate by 5
				SurvivalRate /= 5;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 10 - Ruinous Shield]: %d,\c- Subtracted: %d", SurvivalRate, SkillFactor);
			}

			SkillFactor = SurvivalRate;
			int survivecalcfactor = dvds_survivecalcfactor;
			if (survivecalcfactor < 10) survivecalcfactor = 10;
			if (survivecalcfactor > 1000) survivecalcfactor = 1000;
			SurvivalRate = SurvivalRate * survivecalcfactor / 100;
			if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 11 - Survive-Factor Calc]: %d,\c- Previous: %d, SurvivalCalcFactor: %d", SurvivalRate, SkillFactor, survivecalcfactor);

			SkillFactor = SurvivalRate;
			// Invulnerability
			if (InvulnerabilityTimer > 0)
			{
				SurvivalRate = 1000;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 12 - Invulnerability Check]: %d,\c- Previous: %d", SurvivalRate, SkillFactor);
			}

			SkillFactor = SurvivalRate;
			// Death Rage's Invulnerability
			if (CallACS("MiscVarCheckDECORATE",9043) > 0) 
			{
				SurvivalRate = 1000;
				if (debugsurvival > 0) Console.Printf("    \cwSurvival Rate % [STEP 12 - Death Rage Invulnerability Check]: %d,\c- Previous: %d", SurvivalRate, SkillFactor);
			}
			int SurviveRNGVal = random(1,1000); // Based on 0.1% to 100.0% [though the displays only show full %]

			// Transplants back to ACS for HUD displays/etc
			CallACS("MiscVarSetDECORATE",213,SurviveRNGVal);
			CallACS("MiscVarSetDECORATE",232,SurvivalRate);
			
			if (SurviveRNGVal <= SurvivalRate) owner.player.cheats |= CF_BUDDHA; else owner.player.cheats &= ~CF_BUDDHA;
			
			if (debugsurvival > 0)
			{
				cheatcheck = owner.player.cheats;
				if (SurviveRNGVal <= SurvivalRate) Console.Printf("    \cdSurvival Rate % Roll / Rate: %d / %d, [%d]", SurviveRNGVal, SurvivalRate, cheatcheck);
																			else Console.Printf("    \cgSurvival Rate % Roll / Rate: %d / %d, [%d]", SurviveRNGVal, SurvivalRate, cheatcheck);
			}
		}
		
		
		
		
		
		//*******************
		//*RUINOUS SHIELD D:*
		//*******************
		int UncurseIntervalChance;
		int UncurseIntervalChance2;
		int RuinousShieldPercent, RuinousShieldPercentF;
		int UncursePtsTotalAdded = 0;
		int UncursePtsAdd1 = 0;
		int uncursetimerincrease = 100;
		int uncurselevel = CallACS("MiscVarCheckDECORATE",202);
		if (playeractor)
		{
			RuinousPtsCurrent = CallACS("MiscVarCheckDECORATE",202);
			if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 0]: %d\c-, %d / %d", uncurselevel, RuinousPtsCurrent, RuinousPtsNeeded);
			// Base Max Interval
			UncurseMaxInterval = 7000; // 70 [*100] tics [up to -17 tics with all items]
			if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 1 - Interval Max (Base)]: %d\c-", UncurseMaxInterval);

			previousdelaycount = UncurseMaxInterval;
			if (Owner.CountInv("FalconKnifeEarrings") > 0) UncurseMaxInterval -= 500;
			if (Owner.CountInv("BalrogRing") > 0) UncurseMaxInterval -= 400;
			if (Owner.CountInv("EvenstarNecklace") > 0) UncurseMaxInterval -= 300;
			if (Owner.CountInv("AnubisCufflinks") > 0) UncurseMaxInterval -= 200;
			if (Owner.CountInv("DoveRibbon") > 0) UncurseMaxInterval -= 200;
			if (Owner.CountInv("KissaBra") > 0) UncurseMaxInterval -= 100;
			if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 2 - Interval Max (Armor)]: %d\c-, Previous: %d", UncurseMaxInterval, previousdelaycount);
			
			// Base Interval Chance
			UncurseIntervalChance = 40;
			if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 3 - Interval Chance (Armor)]: %d\c-", UncurseIntervalChance);
			
			previousdelaycount = UncurseIntervalChance;
			if (Owner.CountInv("SafeTeaShoes") > 0) UncurseIntervalChance += 1;
			if (Owner.CountInv("PearlyCorset") > 0) UncurseIntervalChance += 1;
			if (Owner.CountInv("WaterFlyingDress") > 0) UncurseIntervalChance += 1;
			if (Owner.CountInv("EvenstarNecklace") > 0) UncurseIntervalChance += 2;
			if (Owner.CountInv("CloakofEvasion") > 0) UncurseIntervalChance += 1;
			if (Owner.CountInv("FalconKnifeEarrings") > 0) UncurseIntervalChance += 3;
			if (Owner.CountInv("AnubisCufflinks") > 0) UncurseIntervalChance += 2;
			if (Owner.CountInv("KissaBra") > 0) UncurseIntervalChance += 1;
			if (Owner.CountInv("BalrogRing") > 0) UncurseIntervalChance += 2;
			if (Owner.CountInv("DoveRibbon") > 0) UncurseIntervalChance += 1;
			if (Owner.CountInv("SauronHelmet") > 0) UncurseIntervalChance -= 2;
			if (Owner.CountInv("SauronGauntletsFlora") > 0) UncurseIntervalChance -= 3;
			if (Owner.CountInv("TheOneRing") > 0) UncurseIntervalChance += 11;
			if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 4 - Interval Chance (Armor)]: %d\c-, Previous: %d", UncurseIntervalChance, previousdelaycount);
			
			UncurseIntervalChance2 = 8;
			if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 5 - Interval Chance 2 (Armor)]: %d\c-", UncurseIntervalChance2);

			previousdelaycount = UncurseIntervalChance2;
			if (Owner.CountInv("PearlyCorset") > 0) UncurseIntervalChance2 += random(0,1);
			if (Owner.CountInv("DoveRibbon") > 0) UncurseIntervalChance2 += random(1,3);
			if (Owner.CountInv("CloakOfEvasion") > 0) UncurseIntervalChance2 += random(2,5);
			if (Owner.CountInv("WaterFlyingDress") > 0) UncurseIntervalChance2 += 2;
			if (Owner.CountInv("AnubisCufflinks") > 0) UncurseIntervalChance2 += 4;
			if (Owner.CountInv("FalconKnifeEarrings") > 0) UncurseIntervalChance2 += 6;
			if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 6 - Interval Chance 2 (Armor)]: %d\c-, Previous: %d", UncurseIntervalChance2, previousdelaycount);
			
			// Amount of Points for Full Uncurse is determined by Difficulty level
			if (TrueGameSkill <= SKILL_VERY_EASY) RuinousPtsNeeded = 384;
			if (TrueGameSkill == SKILL_EASY) RuinousPtsNeeded = 448;
			if (TrueGameSkill == SKILL_NORMAL) RuinousPtsNeeded = 576;
			if (TrueGameSkill == SKILL_HARD) RuinousPtsNeeded = 768;
			if (TrueGameSkill == SKILL_VERY_HARD) RuinousPtsNeeded = 1024;
			if (TrueGameSkill == SKILL_EXTREME) RuinousPtsNeeded = 1152;
			if (TrueGameSkill == SKILL_HORRIBLE) RuinousPtsNeeded = 1280;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) RuinousPtsNeeded = 1408;
			if (TrueGameSkill >= SKILL_OMEGA) RuinousPtsNeeded = 1536;
			CallACS("MiscVarSetDECORATE",269,RuinousPtsNeeded); // Set
			if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 7 - Get Max Uncurse Pts Needed]: %d\c-", RuinousPtsNeeded);
			
			// Checks to determine how many points the Ruinous Shield has gathered towards becoming an uncursed Divine Shield
			if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0) // Flora
			{
				uncursetimerincrease = 100;
				if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 8 - Uncurse Interval (Base)]: %d\c-", uncursetimerincrease);

				previousdelaycount = uncursetimerincrease;
				uncursetimerincrease = (uncursetimerincrease * dvds_uncurserate) / 100;
				if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 9 - Uncurse Interval (MenuFactor)]: %d\c-, Previous: %d, Uncurse Factor: %d%", uncursetimerincrease, dvds_uncurserate, previousdelaycount);

				if (UsingInGameMenu == 0) UncurseInterval += uncursetimerincrease;
				if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 10 - Uncurse Interval Increment]: %d / %d\c-, Increment: %d%, Uncurse Pts: (%d) %d / %d", UncurseInterval, UncurseMaxInterval, uncursetimerincrease, uncurselevel, RuinousPtsCurrent, RuinousPtsNeeded);
				if (UncurseInterval >= UncurseMaxInterval)
				{
					UncurseInterval -= UncurseMaxInterval;
					
					// Base Chance
					UncursePtsAdd1 = 0;
					if (random(1,100) <= UncurseIntervalChance) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 2;
						if (random(1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 11a - Uncurse Pts (Base)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Safe Tea Shoes
					UncursePtsAdd1 = 0;
					if (random(1,100) <= UncurseIntervalChance && Owner.CountInv("SafeTeaShoes") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 3;
						if (random(1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 11b - Uncurse Pts (Safe Tea Shoes)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Pearly Corset
					UncursePtsAdd1 = 0;
					if (random(1,100) <= UncurseIntervalChance && Owner.CountInv("PearlyCorset") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 6;
						if (random(1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 11c - Uncurse Pts (Pearly Corset)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Water Flying Dress
					UncursePtsAdd1 = 0;
					if (random(1,100) <= UncurseIntervalChance && Owner.CountInv("WaterFlyingDress") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 4;
						if (random(1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 11d - Uncurse Pts (Water Flying Dress)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Evenstar Necklace
					UncursePtsAdd1 = 0;
					if (random(1,100) <= UncurseIntervalChance && Owner.CountInv("EvenstarNecklace") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 1;
						if (random(1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 11e - Uncurse Pts (Evenstar Necklace)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Cloak of Evasion
					UncursePtsAdd1 = 0;
					if (random(1,100) <= UncurseIntervalChance && Owner.CountInv("EvenstarNecklace") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 2;
						if (random(1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 11f - Uncurse Pts (Cloak of Evasion)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Anubis Cufflinks
					UncursePtsAdd1 = 0;
					if (random(1,100) <= UncurseIntervalChance && Owner.CountInv("AnubisCufflinks") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 2;
						if (random(1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 11g - Uncurse Pts (Anubis Cufflinks)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Kissa's Bra
					UncursePtsAdd1 = 0;
					if (random(1,100) <= UncurseIntervalChance && Owner.CountInv("KissaBra") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 5;
						if (random(1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 11h - Uncurse Pts (Kissa's Bra)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Balrog Ring
					UncursePtsAdd1 = 0;
					if (random(1,100) <= UncurseIntervalChance && Owner.CountInv("BalrogRing") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 1;
						if (random(1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 11i - Uncurse Pts (Balrog Ring)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Dove Ribbon
					UncursePtsAdd1 = 0;
					if (random(1,100) <= UncurseIntervalChance && Owner.CountInv("DoveRibbon") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 10;
						if (random(1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 11j - Uncurse Pts (Dove Ribbon)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);
					
					// Falcon Knife Earrings
					UncursePtsAdd1 = 0;
					if (random(1,100) <= UncurseIntervalChance && Owner.CountInv("FalconKnifeEarrings") > 0) // 35-66% chance of increase
					{
						UncursePtsAdd1 = 3;
						if (random(1,100) <= UncurseIntervalChance2) UncursePtsAdd1 *= 2;
						UncursePtsTotalAdded += UncursePtsAdd1;
					}
					if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 11k - Uncurse Pts (Falcon Knife Earrings)]: %d\c-, Increment: %d%", UncursePtsTotalAdded, UncursePtsAdd1);

					if (DivineAvatarTimer > 0) UncursePtsTotalAdded *= 1.25;
					if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 11l - Uncurse Pts (Divine Avatar)]: %d", UncursePtsTotalAdded);

					if (GoETimer > 0) UncursePtsTotalAdded *= 5;
					if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 11m - Uncurse Pts (GoE)]: %d", UncursePtsTotalAdded);
					
					RuinousPtsCurrent += UncursePtsTotalAdded;
					if (debuguncurse) Console.Printf("    \cnShield Uncursing [Step 12 - Increment Uncurse Pts]: %d / %d\c-, Total Increment: %d%", RuinousPtsCurrent, RuinousPtsNeeded, UncursePtsTotalAdded);
					CallACS("MiscVarSetDECORATE",202,UncursePtsTotalAdded,1); // Add
					
					if (RuinousPtsCurrent >= RuinousPtsNeeded)
					{
						Owner.A_GiveInventory("DivineShield", 1);
						if (Owner.CountInv("RuinousShield") > 0) Owner.A_TakeInventory("RuinousShield", 1);
						owner.A_PrintBold("\c[Gold]CONGRADULATIONS!!\n\n\cfTHE RUINOUS SHIELD IS NO LONGER CURSED!\n\n\c[Gold]YOU NOW POSSESS AND WIELD THE MIGHTY 'DIVINE SHIELD'!!");
						owner.A_PlaySound("Uncursed",CHAN_7,1.0,0,ATTN_NONE);
						UncurseInterval = 0;
					}
				}
			}
			// Checks to make sure you cannot hold the Ruinous Shield if you already have a Divine Shield (the latter is the uncursed version of the former).
			if (CharacterClass == 2 && Owner.CountInv("DivineShield") > 0 && Owner.CountInv("RuinousShield") > 0) Owner.A_TakeInventory("RuinousShield",9999); // Flora
		}
		
		
		
		
		
		//*****************************************************
		//*Checks Flora's EXP for using the Sceptre of Empyrea*
		//*****************************************************
		if (playeractor)
		{
			if (CharacterClass == 2) // Flora
			{
				BaseSceptreEXP = 312;
				if (TrueGameSkill <= SKILL_VERY_EASY) BaseSceptreEXP = 240;
				if (TrueGameSkill == SKILL_EASY) BaseSceptreEXP = 288;
				if (TrueGameSkill == SKILL_NORMAL) BaseSceptreEXP = 312;
				if (TrueGameSkill == SKILL_HARD) BaseSceptreEXP = 336;
				if (TrueGameSkill == SKILL_VERY_HARD) BaseSceptreEXP = 384;
				if (TrueGameSkill == SKILL_EXTREME) BaseSceptreEXP = 408;
				if (TrueGameSkill == SKILL_HORRIBLE) BaseSceptreEXP = 432;
				if (TrueGameSkill == SKILL_IMPOSSIBLE) BaseSceptreEXP = 456;
				if (TrueGameSkill >= SKILL_OMEGA) BaseSceptreEXP = 480;
				
				int SceptreLvl1Req = BaseSceptreEXP * 1;
				int SceptreLvl2Req = BaseSceptreEXP * 3;
				int SceptreLvl3Req = BaseSceptreEXP * 6;
				int SceptreLvl4Req = BaseSceptreEXP * 10;
				int SceptreLvl5Req = BaseSceptreEXP * 15;
				int SceptreLvl6Req = BaseSceptreEXP * 21;
				int SceptreLvl7Req = BaseSceptreEXP * 28;
				int SceptreLvl8Req = BaseSceptreEXP * 36;
				int SceptreLvl9Req = BaseSceptreEXP * 45;
				int SceptreLvl10Req = BaseSceptreEXP * 55;
				int SceptreLvl11Req = BaseSceptreEXP * 66;
				int SceptreLvl12Req = BaseSceptreEXP * 78;
				int SceptreLvl13Req = BaseSceptreEXP * 91;
				int SceptreLvl14Req = BaseSceptreEXP * 105;
				int SceptreLvl15Req = BaseSceptreEXP * 120;
				int SceptreLvl16Req = BaseSceptreEXP * 136;
				CallACS("MiscVarSetDECORATE",301,SceptreLvl1Req);
				CallACS("MiscVarSetDECORATE",302,SceptreLvl2Req);
				CallACS("MiscVarSetDECORATE",303,SceptreLvl3Req);
				CallACS("MiscVarSetDECORATE",304,SceptreLvl4Req);
				CallACS("MiscVarSetDECORATE",305,SceptreLvl5Req);
				CallACS("MiscVarSetDECORATE",306,SceptreLvl6Req);
				CallACS("MiscVarSetDECORATE",307,SceptreLvl7Req);
				CallACS("MiscVarSetDECORATE",308,SceptreLvl8Req);
				CallACS("MiscVarSetDECORATE",309,SceptreLvl9Req);
				CallACS("MiscVarSetDECORATE",310,SceptreLvl10Req);
				CallACS("MiscVarSetDECORATE",311,SceptreLvl11Req);
				CallACS("MiscVarSetDECORATE",312,SceptreLvl12Req);
				CallACS("MiscVarSetDECORATE",313,SceptreLvl13Req);
				CallACS("MiscVarSetDECORATE",314,SceptreLvl14Req);
				CallACS("MiscVarSetDECORATE",315,SceptreLvl15Req);
				CallACS("MiscVarSetDECORATE",316,SceptreLvl16Req);
				//Console.Printf("%d / %d / %d / %d / %d / %d / %d / %d / %d / %d / %d / %d / %d / %d / %d / %d / %d", BaseSceptreEXP, SceptreLvl1Req, SceptreLvl2Req, SceptreLvl3Req, SceptreLvl4Req, SceptreLvl5Req, SceptreLvl6Req, SceptreLvl7Req, SceptreLvl8Req, SceptreLvl9Req, SceptreLvl10Req, SceptreLvl11Req, SceptreLvl12Req, SceptreLvl13Req, SceptreLvl14Req, SceptreLvl15Req, SceptreLvl16Req);
				
				int SceptreActualLevel;
				SceptreLevelEXP = CallACS("OtherVarCheckDECORATE",10);
				if (SceptreLevelEXP >= CallACS("MiscVarCheckDECORATE",316)) SceptreActualLevel = 16;
				if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",316)) SceptreActualLevel = 15;
				if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",315)) SceptreActualLevel = 14;
				if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",314)) SceptreActualLevel = 13;
				if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",313)) SceptreActualLevel = 12;
				if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",312)) SceptreActualLevel = 11;
				if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",311)) SceptreActualLevel = 10;
				if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",310)) SceptreActualLevel = 9;
				if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",309)) SceptreActualLevel = 8;
				if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",308)) SceptreActualLevel = 7;
				if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",307)) SceptreActualLevel = 6;
				if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",306)) SceptreActualLevel = 5;
				if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",305)) SceptreActualLevel = 4;
				if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",304)) SceptreActualLevel = 3;
				if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",303)) SceptreActualLevel = 2;
				if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",302)) SceptreActualLevel = 1;
				if (SceptreLevelEXP < CallACS("MiscVarCheckDECORATE",301)) SceptreActualLevel = 0;
				//Console.Printf("%d", SceptreActualLevel);
				CallACS("OtherVarSetDECORATE",11,SceptreActualLevel); 
			}
		}
		
		
		
		
		//******************************************************
		//*Hellcore Cooldown Process [25 tics = 1% of cooldown]*
		//******************************************************
		int HellcoreCoolRatio = 400;
		if (playeractor)
		{
			HellcoreOverheatLevel = CallACS("OtherVarCheckDECORATE",6);
			if (HellcoreOverheatLevel > 0 && PlayerCurrentHealth)
			{
				HellcoreCoolRatio = 400;
				if (debughellcorecldn) Console.Printf("    \crHellcore Cooldown [Step 1 - Cooldown Increment (Base)]: %d\c-, Heat Level:", HellcoreCoolRatio, HellcoreOverheatLevel);

				// Dove Ribbon quickly cools down Hellcore meter.
				previousdelaycount = HellcoreCoolRatio;
				if (Owner.CountInv("DoveRibbon") > 0)
				{
					HellcoreCoolRatio *= 3;
				}
				if (debughellcorecldn) Console.Printf("    \crHellcore Cooldown [Step 2 - Cooldown Increment (Dove Ribbon)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);
				
				// Divine Avatar speeds up cooldown by 100%
				previousdelaycount = HellcoreCoolRatio;
				if (DivineAvatarTimer > 0) 
				{
					HellcoreCoolRatio *= 2;
				}
				if (debughellcorecldn) Console.Printf("    \crHellcore Cooldown [Step 3 - Cooldown Increment (Divine Avatar)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);

				// Divine Avatar speeds up cooldown by 400%
				previousdelaycount = HellcoreCoolRatio;
				if (GoETimer > 0) 
				{
					HellcoreCoolRatio *= 5;
				}
				if (debughellcorecldn) Console.Printf("    \crHellcore Cooldown [Step 3a - Cooldown Increment (GoE)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);
				
				// Fatigue = 0.2x cooldown speed
				previousdelaycount = HellcoreCoolRatio;
				if (FatigueTimer > 0)
				{
					HellcoreCoolRatio /= 5;
				}
				if (debughellcorecldn) Console.Printf("    \crHellcore Cooldown [Step 4 - Cooldown Increment (Fatigue)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);
				
				// Sleep VERY quickly cools down Hellcore meter.
				previousdelaycount = HellcoreCoolRatio;
				if (SleepTimer > 0) 
				{
					HellcoreCoolRatio *= 5; 
				}
				if (debughellcorecldn) Console.Printf("    \crHellcore Cooldown [Step 5 - Cooldown Increment (Sleep)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);
				
				// Soul Mastery
				PerkFactor = 200;
				previousdelaycount = HellcoreCoolRatio;
				if (CallACS("MiscVarCheckDECORATE",10033) > 0)
				{
					PerkFactor = 200 + ((CallACS("MiscVarCheckDECORATE",10033) * 6) + (CallACS("MiscVarCheckDECORATE",10034) * 15));
					HellcoreCoolRatio = HellcoreCoolRatio * PerkFactor / 200;
				}
				if (debughellcorecldn) Console.Printf("    \crHellcore Cooldown [Step 6 - Cooldown Increment (Soul Mastery)]: %d\c-, Previous: %d, PerkFactor %d / 200", HellcoreCoolRatio, previousdelaycount, PerkFactor);
				
				// "Cleared of Mind: Perk
				PerkFactor = 80;
				previousdelaycount = HellcoreCoolRatio;
				if (ClearedOfMindParkLevel > 0)
				{
					PerkFactor = 80 + ((ClearedOfMindParkLevel * 6) + (ClearedOfMindEXParkLevel * 15));
					HellcoreCoolRatio = HellcoreCoolRatio * PerkFactor / 80;
				}
				if (debughellcorecldn) Console.Printf("    \crHellcore Cooldown [Step 7 - Cooldown Increment (Cleared of Mind)]: %d\c-, Previous: %d, PerkFactor %d / 80", HellcoreCoolRatio, previousdelaycount, PerkFactor);
				
				// Check Hellcore Cooldown Multiplier in Options
				previousdelaycount = HellcoreCoolRatio;
				HellcoreCoolRatio = (HellcoreCoolRatio * dvds_heatcoolmultiplier) / 100;
				if (HellcoreCoolRatio < 1) HellcoreCoolRatio = 1;
				if (debughellcorecldn) Console.Printf("    \crHellcore Cooldown [Step 8 - Cooldown Increment (Menu Option)]: %d\c-, Previous: %d, Multiplier %d%", HellcoreCoolRatio, previousdelaycount, dvds_heatcoolmultiplier);
				
				// ???????
				previousdelaycount = HellcoreCoolRatio;
				if (Owner.CountInv("IsHaSatanNow") > 0)
				{
					HellcoreCoolRatio = HellcoreCoolRatio * 16;
				}
				if (debughellcorecldn) Console.Printf("    \crHellcore Cooldown [Step 9 - Cooldown Increment (???????)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);
				
				// Playing Unloved [2x Cooldown Speed]
				previousdelaycount = HellcoreCoolRatio;
				if (CallACS("DVDSSpecialArrayCheckDECORATE",3) > 0)
				{
					HellcoreCoolRatio = HellcoreCoolRatio * 2;
				}
				if (debughellcorecldn) Console.Printf("    \crHellcore Cooldown [Step 10a - Cooldown Increment (Playing Unloved)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);

				// Playing The City of the Damned: Apocalypse [1.25x Cooldown Speed]
				previousdelaycount = HellcoreCoolRatio;
				if (CallACS("DVDSSpecialArrayCheckDECORATE",4) > 0)
				{
					HellcoreCoolRatio = (HellcoreCoolRatio * 5) / 4;
				}
				if (debughellcorecldn) Console.Printf("    \crHellcore Cooldown [Step 10b - Cooldown Increment (Playing TCOTD:A)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);

				// Playing Happy Time Circus 2 [1.5x Cooldown Speed]
				previousdelaycount = HellcoreCoolRatio;
				if (CallACS("DVDSSpecialArrayCheckDECORATE",5) > 0)
				{
					HellcoreCoolRatio = (HellcoreCoolRatio * 3) / 2;
				}
				if (debughellcorecldn) Console.Printf("    \crHellcore Cooldown [Step 10c - Cooldown Increment (Playing Happy Time Circus 2)]: %d\c-, Previous: %d", HellcoreCoolRatio, previousdelaycount);
				
				
				if (UsingInGameMenu != 0) HellcoreCoolRatio = 0; // If using In-Game Menus
				if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious"
				{
					previousdelaycount = HellcoreOverheatLevel;
					HellcoreOverheatLevel -= HellcoreCoolRatio;
					if (debughellcorecldn) Console.Printf("    \crHellcore Cooldown [Step 11 - Cooldown Increments]: New Heat Level: %d\c-, Old Heat Level: %d", HellcoreOverheatLevel, previousdelaycount);
				}
			}
			if (HellcoreOverheatLevel < 0) HellcoreOverheatLevel = 0;
			CallACS("OtherVarSetDECORATE",6,HellcoreOverheatLevel);
			
			// Check For If Using Hellcore Weapon
			SkillFactor = 0;
			if (weapon is "ImpClaw" || weapon is "DarkImpClaw" ||
					weapon is "CacodemonEye" || weapon is "CacolanternEye" || weapon is "AbaddonEye") SkillFactor += 1; 
			if (weapon is "KnightFist" || weapon is "BaronFist" || weapon is "BelphegorFist" ||
					weapon is "BruiserFist" || weapon is "ArchonFist" || weapon is "PyroFist") SkillFactor += 1; 
			if (weapon is "IncarnateSkull" || weapon is "ArchvileHand" || 
					weapon is "DiabloistHand" || weapon is "BalrogFist") SkillFactor += 1; 
			if (SkillFactor > 0) { Owner.A_GiveInventory("FloraUsingHellcoreWeapon",1); } else { Owner.A_TakeInventory("FloraUsingHellcoreWeapon",9999); }
			
			if (CharacterClass == 2) 
			{
				if (HellcoreOverheatLevel < 250000) 
				{
					Owner.A_GiveInventory("FloraHellcoreNotOverheated",1);
					Owner.A_TakeInventory("FloraHellcore25PercentOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore50PercentOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore75PercentOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore100PercentOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore250PercentOverheated",9999);
				}
				if (HellcoreOverheatLevel > 249999 && HellcoreOverheatLevel < 500000) 
				{
					Owner.A_TakeInventory("FloraHellcoreNotOverheated",9999);
					Owner.A_GiveInventory("FloraHellcore25PercentOverheated",1);
					Owner.A_TakeInventory("FloraHellcore50PercentOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore75PercentOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore100PercentOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore250PercentOverheated",9999);
				}
				if (HellcoreOverheatLevel > 499999 && HellcoreOverheatLevel < 750000) 
				{
					Owner.A_TakeInventory("FloraHellcoreNotOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore25PercentOverheated",9999);
					Owner.A_GiveInventory("FloraHellcore50PercentOverheated",1);
					Owner.A_TakeInventory("FloraHellcore75PercentOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore100PercentOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore250PercentOverheated",9999);
				}
				if (HellcoreOverheatLevel > 749999 && HellcoreOverheatLevel < 1000000) 
				{
					Owner.A_TakeInventory("FloraHellcoreNotOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore25PercentOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore50PercentOverheated",9999);
					Owner.A_GiveInventory("FloraHellcore75PercentOverheated",1);
					Owner.A_TakeInventory("FloraHellcore100PercentOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore250PercentOverheated",9999);
				}
				if (HellcoreOverheatLevel > 999999 && HellcoreOverheatLevel < 2500000) 
				{
					Owner.A_TakeInventory("FloraHellcoreNotOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore25PercentOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore50PercentOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore75PercentOverheated",9999);
					Owner.A_GiveInventory("FloraHellcore100PercentOverheated",1);
					Owner.A_TakeInventory("FloraHellcore250PercentOverheated",9999);
				}
				if (HellcoreOverheatLevel > 2499999) 
				{
					Owner.A_TakeInventory("FloraHellcoreNotOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore25PercentOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore50PercentOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore75PercentOverheated",9999);
					Owner.A_TakeInventory("FloraHellcore100PercentOverheated",9999);
					Owner.A_GiveInventory("FloraHellcore250PercentOverheated",1);
				}
			}
			
			// Melee Weapon Inv Check
			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			nn = "SauronGauntletsPetra"; APPackCheck2 = nn;
			SkillFactor = 0;
			if (weapon is "Fist" || weapon is "FistDeggaris" || 
					weapon is "FistIllucia" || weapon is "FistFlora") SkillFactor += 1;
			if (weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || 
					weapon is "SauronGauntletsFlora" || weapon is APPackCheck || 
					weapon is APPackCheck2 || weapon is "SceptreOfEmpyrea") SkillFactor += 1;
			if (weapon is "Chainsaw" || weapon is "Chainsaw2" || weapon is "DoubleBladedChainsaw") SkillFactor += 1; 
			if (SkillFactor > 0) { Owner.A_GiveInventory("UsingMeleeWeapon",1); } else { Owner.A_TakeInventory("UsingMeleeWeapon",9999); }
		}
		
		
		
		
		
		//*****************
		//**Critical Hits**
		//*****************
		int CriticalHitRate = CallACS("MiscVarCheckDECORATE",0);
		if (playeractor)
		{
			SkillFactor = 0;
			if (TrueGameSkill <= SKILL_VERY_EASY) CriticalHitRate /= 4;
			if (TrueGameSkill == SKILL_EASY) CriticalHitRate /= 5;
			if (TrueGameSkill == SKILL_NORMAL) CriticalHitRate /= 6; 
			if (TrueGameSkill == SKILL_HARD) CriticalHitRate /= 7; 
			if (TrueGameSkill == SKILL_VERY_HARD) CriticalHitRate /= 8;
			if (TrueGameSkill == SKILL_EXTREME) CriticalHitRate /= 8;
			if (TrueGameSkill == SKILL_HORRIBLE) CriticalHitRate /= 9;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) CriticalHitRate /= 9;
			if (TrueGameSkill >= SKILL_OMEGA) CriticalHitRate /= 10;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 1 - Base]: %d\c-, Difficulty Level", CriticalHitRate, TrueGameSkill);

			// Level + Stat Calculations
			SkillFactor = (PlayerLevel * 5) / 16; // Each level is +0.03125% crit rate
			CriticalHitRate += SkillFactor;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 2a - Stats: Level]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerAGL * 3) / 16; // 1 pt of Agility is +0.01875% crit rate
			CriticalHitRate += SkillFactor;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 2b - Stats: Agility]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerDEF * 3) / 32; // 1 pt of Defense is +0.009375% crit rate
			CriticalHitRate += SkillFactor;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 2c - Stats: Defense]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerDFT * 7) / 4; // 1 pt of Deftness is +0.175% crit rate
			CriticalHitRate += SkillFactor;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 2d - Stats: Deftness]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerSOR * 1) / 32; // 1 pt of Sorcery is +0.003125% crit rate
			CriticalHitRate += SkillFactor;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 2e - Stats: Sorcery]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerSTR * 1) / 8; // 1 pt of Strength is +0.0125% crit rate
			CriticalHitRate += SkillFactor;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 2f - Stats: Strength]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			
			SkillFactor = (PlayerTHE * 1) / 32; // 1 pt of Therapeusis is +0.003125% crit rate
			CriticalHitRate += SkillFactor;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 2g - Stats: Therapeusis]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);

			// Oomph/Blunt
			SkillFactor = 0;
			// Oomph = (5% of remaining amount uncovered)
			if (DQOomphTimer > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) / 20;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 3a - Oomph Check]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			SkillFactor = 0;
			// Blunt = (-5% of remaining amount uncovered)
			if (DQBluntTimer > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) / 20;
				CriticalHitRate -= SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 3b - Blunt Check]: %d,\c- Subtracted: %d", CriticalHitRate, SkillFactor);
			}
			
			// Acceleratle/Deceleratle
			SkillFactor = 0;
			// Acceleratle (10% of remaining amount uncovered)
			if (DQAcceleratleTimer > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) / 10;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 4a - Acceleratle Check]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			SkillFactor = 0;
			// Deceleratle (-10% of remaining amount uncovered)
			if (DQDeceleratleTimer > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) / 10;
				CriticalHitRate -= SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 4b - Deceleratle Check]: %d,\c- Subtracted: %d", CriticalHitRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// Divine Avatar (12.5% of remaining amount uncovered)
			if (DivineAvatarTimer > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) * 0.125;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 5 - Divine Avatar Check]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// GoE (31.25% of remaining amount uncovered)
			if (GoETimer > 0)
			{
				SkillFactor = (1000 - CriticalHitRate) * 0.3125;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 5b - GoE Check]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// [STRIFE-Compatibility] Stamina Upgrades [up to 3.125% more Crit]
			if (StrifeStaminaLevel > 0)
			{
				SkillFactor = (StrifeStaminaLevel * 25) / 8;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 6 - Strife-Stamina Perk]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// [STRIFE-Compatibility] Accuracy Upgrades [up to 1.875% more Crit]
			if (StrifeAccuracyLevel > 0)
			{
				SkillFactor = (StrifeAccuracyLevel * 15) / 8;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 6 - Strife-Accuracy Perk]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}

			int MeleeWeaponCritCheck = 0;
			nm = "FistAilish"; APPackCheck = nm;
			nn = "FistPetra"; APPackCheck2 = nn;
			no = "SauronGauntletsAilish"; APPackCheck3 = no;
			np = "SauronGauntletsPetra"; APPackCheck4 = np;
			If (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora" || 
					weapon is APPackCheck || weapon is APPackCheck2 ||
					weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || 
					weapon is APPackCheck3 || weapon is APPackCheck4 ||
					weapon is "Chainsaw2" || weapon is "DoubleBladedChainsaw" || 
					weapon is "SceptreOfEmpyrea") MeleeWeaponCritCheck = 1;

			// Uppercut Bonuses
			SkillFactor = 0;
			if (Owner.CountInv("UppercutCritBonus1") > 0) // up to +4% more Crit
			{
				SkillFactor = (1000 - CriticalHitRate) / 25;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 7 - Uppercut Bonus (1)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			SkillFactor = 0;
			if (Owner.CountInv("UppercutCritBonus2") > 0) // up to +8% more Crit
			{
				SkillFactor = ((1000 - CriticalHitRate) * 2) / 25;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 7 - Uppercut Bonus (2)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			
			// Kick Bonus
			SkillFactor = 0;
			if (Owner.CountInv("KickCritBonus1") > 0) // up to +2.5% more Crit
			{
				SkillFactor = (1000 - CriticalHitRate) / 40;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 8 - Kicking Bonus (1)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}
			if (Owner.CountInv("KickCritBonus2") > 0) // up to +6.25% more Crit
			{
				SkillFactor = (1000 - CriticalHitRate) / 16;
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 8 - Kicking Bonus (2)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}


			// Dashing
			SkillFactor = 0;
			if (Owner.CountInv("PlayerDashing") > 0) // +2% more Crit [with most melee weapons], +0.5% with other weapons
			{
				If (MeleeWeaponCritCheck == 1) SkillFactor = (1000 - CriticalHitRate) / 50;
																	else SkillFactor = (1000 - CriticalHitRate) / 200;

				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) 
				{
					If (MeleeWeaponCritCheck == 1) Console.Printf("    \cwCrit Rate % [STEP 9 - Dashing Bonus (Melee)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
																		else Console.Printf("    \cwCrit Rate % [STEP 9 - Dashing Bonus (NON-Melee)]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
				}
			}

			//if (weapon is "SceptreOfEmpyrea") MeleeWeaponCritCheck = 0;
			// Martial Arts Mastery = total of +8% Crit
			SkillFactor = 0;
			if (CallACS("MiscVarCheckDECORATE",10035) > 0)
			{
				If (MeleeWeaponCritCheck == 1)
				{
					SkillFactor = (CallACS("MiscVarCheckDECORATE",10035) * 8) + (CallACS("MiscVarCheckDECORATE",10036) * 20);
					CriticalHitRate += SkillFactor;
					if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 10a - Martial Arts Mastery]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
				}
			}
			// Berserker Fit = total of +16% Crit
			SkillFactor = 0;
			if (CallACS("MiscVarCheckDECORATE",10051) > 0)
			{
				If (MeleeWeaponCritCheck == 1)
				{
					SkillFactor = (CallACS("MiscVarCheckDECORATE",10051) * 16) + (CallACS("MiscVarCheckDECORATE",10052) * 40);
					CriticalHitRate += SkillFactor;
					if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 10b - Berserker Fit Perk]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
				}
			}

			// Stam Up Perks = total of +2/6% Crit
			SkillFactor = 0;
			if (StamUpPerkLevel > 0)
			{
				If (MeleeWeaponCritCheck == 1) SkillFactor = (StamUpPerkLevel * 6) + (StamUpEXPerkLevel * 15);
																	else SkillFactor = (StamUpPerkLevel * 2) + (StamUpEXPerkLevel * 5);
				CriticalHitRate += SkillFactor;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 11 - Stam Up Perk]: %d,\c- Added: %d", CriticalHitRate, SkillFactor);
			}

			// Armor
			SkillFactor = CriticalHitRate;
			if (owner.CountInv("RuinousShield") > 0)
			{
				CriticalHitRate /= 2.56;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 12 - Ruinous Shield]: %d,\c- Previous: %d", CriticalHitRate, SkillFactor);
			}
			
			SkillFactor = CriticalHitRate;
			int criticalcalcfactor = dvds_criticalcalcfactor;
			if (criticalcalcfactor < 1) criticalcalcfactor = 1;
			if (criticalcalcfactor > 1000) criticalcalcfactor = 1000;
			CriticalHitRate = CriticalHitRate * criticalcalcfactor / 100;
			if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 13 - Factor Check]: %d,\c- Previous: %d, Factor: %d", CriticalHitRate, SkillFactor, criticalcalcfactor);

			// High-Cap Crit at 100.0%, Low-Cap it at 0.1%
			if (CriticalHitRate < 1) CriticalHitRate = 1;
			if (CriticalHitRate > 1000) CriticalHitRate = 1000;

			// Cheat for ALWAYS-CRIT
			if (Owner.CountInv("CheatCrit") > 0 || Owner.CountInv("CheatCritUltimate") > 0) 
			{
				CriticalHitRate = 2000;
				if (debugcrithits > 0) Console.Printf("    \cwCrit Rate % [STEP 13 - CRIT CHEAT IS ON]: %d", CriticalHitRate);
			}

			int CritRNGVal = random(1,1000); // Based on 0.1% to 100.0% [though the displays only show full %]
			if (CritRNGVal <= CriticalHitRate) { if (owner.CountInv("DealCriticalHit") <= 0) owner.A_GiveInventory("DealCriticalHit",1); }
																		else { if (owner.CountInv("DealCriticalHit") >= 1) owner.A_TakeInventory("DealCriticalHit",9999); }

			// Transplants back to ACS for HUD displays/etc
			CallACS("MiscVarSetDECORATE",235,CriticalHitRate);

			if (debugcrithits > 0)
			{
				if (CritRNGVal <= CriticalHitRate) Console.Printf("    \cdCrit Rate % Roll / Rate: %d / %d", CritRNGVal, CriticalHitRate);
																			else Console.Printf("    \cgCrit Rate % Roll / Rate: %d / %d", CritRNGVal, CriticalHitRate);
			}
		}
		
		
		
		
		
		//*********************************
		//*Check Sauron Equipment Directly*
		//*********************************
		nm = "SauronGauntletsAilish"; APPackCheck = nm;
		nn = "SauronGauntletsPetra"; APPackCheck2 = nn;
		if (playeractor)
		{
			if (CharacterClass == 0) // Deggaris's Gauntlets
			{
				if (Owner.CountInv("SauronGauntlets") > 0) { Owner.A_GiveInventory("SauronGauntletsItem", 1); } else { Owner.A_TakeInventory("SauronGauntletsItem", 9999); }
				if (Owner.CountInv("SauronGauntletsIllucia") > 0) { Owner.A_TakeInventory("SauronGauntletsIllucia", 9999); Owner.A_GiveInventory("SauronGauntlets", 1); }
				if (Owner.CountInv("SauronGauntletsFlora") > 0) { Owner.A_TakeInventory("SauronGauntletsFlora", 9999); Owner.A_GiveInventory("SauronGauntlets", 1); }
				if (Owner.CountInv(APPackCheck) > 0) { Owner.A_TakeInventory(APPackCheck, 9999); Owner.A_GiveInventory("SauronGauntlets", 1); }
				if (Owner.CountInv(APPackCheck2) > 0) { Owner.A_TakeInventory(APPackCheck2, 9999); Owner.A_GiveInventory("SauronGauntlets", 1); }
			}
			if (CharacterClass == 1) // Illucia's Gauntlets
			{
				if (Owner.CountInv("SauronGauntlets") > 0) { Owner.A_TakeInventory("SauronGauntlets", 9999); Owner.A_GiveInventory("SauronGauntletsIllucia", 1); }
				if (Owner.CountInv("SauronGauntletsIllucia") > 0) { Owner.A_GiveInventory("SauronGauntletsItem", 1); } else { Owner.A_TakeInventory("SauronGauntletsItem", 9999); }
				if (Owner.CountInv("SauronGauntletsFlora") > 0) { Owner.A_TakeInventory("SauronGauntletsFlora", 9999); Owner.A_GiveInventory("SauronGauntletsIllucia", 1); }
				if (Owner.CountInv(APPackCheck) > 0) { Owner.A_TakeInventory(APPackCheck, 9999); Owner.A_GiveInventory("SauronGauntletsIllucia", 1); }
				if (Owner.CountInv(APPackCheck2) > 0) { Owner.A_TakeInventory(APPackCheck2, 9999); Owner.A_GiveInventory("SauronGauntletsIllucia", 1); }
			}
			if (CharacterClass == 2) // Flora's Gauntlets
			{
				if (Owner.CountInv("SauronGauntlets") > 0) { Owner.A_TakeInventory("SauronGauntlets", 9999); Owner.A_GiveInventory("SauronGauntletsFlora", 1); }
				if (Owner.CountInv("SauronGauntletsIllucia") > 0) { Owner.A_TakeInventory("SauronGauntletsIllucia", 9999); Owner.A_GiveInventory("SauronGauntletsFlora", 1); }
				if (Owner.CountInv("SauronGauntletsFlora") > 0) { Owner.A_GiveInventory("SauronGauntletsItem", 1); } else { Owner.A_TakeInventory("SauronGauntletsItem", 9999); }
				if (Owner.CountInv(APPackCheck) > 0) { Owner.A_TakeInventory(APPackCheck, 9999); Owner.A_GiveInventory("SauronGauntletsFlora", 1); }
				if (Owner.CountInv(APPackCheck2) > 0) { Owner.A_TakeInventory(APPackCheck2, 9999); Owner.A_GiveInventory("SauronGauntletsFlora", 1); }
			}
			if (CharacterClass == 8) // Ailish's Gauntlets
			{
				if (Owner.CountInv("SauronGauntlets") > 0) { Owner.A_TakeInventory("SauronGauntlets", 9999); Owner.A_GiveInventory(APPackCheck, 1); }
				if (Owner.CountInv("SauronGauntletsIllucia") > 0) { Owner.A_TakeInventory("SauronGauntletsIllucia", 9999); Owner.A_GiveInventory(APPackCheck, 1); }
				if (Owner.CountInv("SauronGauntletsFlora") > 0) { Owner.A_TakeInventory("SauronGauntletsFlora", 9999); Owner.A_GiveInventory(APPackCheck, 1); }
				if (Owner.CountInv(APPackCheck) > 0) { Owner.A_GiveInventory("SauronGauntletsItem", 1); } else { Owner.A_TakeInventory("SauronGauntletsItem", 9999); }
				if (Owner.CountInv(APPackCheck2) > 0) { Owner.A_TakeInventory(APPackCheck2, 9999); Owner.A_GiveInventory(APPackCheck, 1); }
			}
			if (CharacterClass == 9) // Petra's Gauntlets
			{
				if (Owner.CountInv("SauronGauntlets") > 0) { Owner.A_TakeInventory("SauronGauntlets", 9999); Owner.A_GiveInventory(APPackCheck2, 1); }
				if (Owner.CountInv("SauronGauntletsIllucia") > 0) { Owner.A_TakeInventory("SauronGauntletsIllucia", 9999); Owner.A_GiveInventory(APPackCheck2, 1); }
				if (Owner.CountInv("SauronGauntletsFlora") > 0) { Owner.A_TakeInventory("SauronGauntletsFlora", 9999); Owner.A_GiveInventory(APPackCheck2, 1); }
				if (Owner.CountInv(APPackCheck) > 0) { Owner.A_TakeInventory(APPackCheck, 9999); Owner.A_GiveInventory(APPackCheck2, 1); }
				if (Owner.CountInv(APPackCheck2) > 0) { Owner.A_GiveInventory("SauronGauntletsItem", 1); } else { Owner.A_TakeInventory("SauronGauntletsItem", 9999); }
			}
			
			if (Owner.CountInv("TheOneRing") > 0)
			{
				Owner.A_GiveInventory("RingFullMap", 1); // All characters get a full automap with the Ring
				Owner.A_GiveInventory("RingScanner", 1); // All characters get a map scanner with the Ring
				if (CharacterClass == 0) Owner.A_GiveInventory("RingGhost", 1); // Deggaris becomes Ghostly like with the Ring
				if (CharacterClass == 1) Owner.A_GiveInventory("RingShadow", 1); // Illucia becomes Shadow like with the Ring 
			}
			else
			{
				Owner.A_TakeInventory("RingFullMap", 1);
				Owner.A_TakeInventory("RingScanner", 1);
				Owner.A_TakeInventory("RingGhost", 1);
				Owner.A_TakeInventory("RingShadow", 1);
			}
		}
		
		
		
		
		
		//***********************
		//*Infinite Ammo Chances*
		//***********************
		int infammoreqremaining;
		int infammoneeded = 0;
		int infammoneeded2 = 0;
		if (playeractor)
		{
			if (Owner.CountInv("DSGreenArmorClass") > 0)		infammoneeded += 250; // +2.5% Chance
			if (Owner.CountInv("DSBlueArmorClass") > 0)			infammoneeded += 400; // +4.0% Chance
			if (Owner.CountInv("DSStoneArmorClass1") > 0)		infammoneeded += 650; // +6.5% Chance
			if (Owner.CountInv("DSDiamondArmorClass1") > 0)		infammoneeded += 1000; // +10.0% Chance
			if (Owner.CountInv("DSStoneArmorClass2") > 0)		infammoneeded += 1500; // +15.0% Chance
			if (Owner.CountInv("DSDiamondArmorClass2") > 0)		infammoneeded += 2500; // +25.0% Chance
			if (ModType != 0) infammoneeded = infammoneeded * 3 / 2; // Marine's Armor gives them 1.5x the chance of infinite ammo (from their specfic armors only) on each tic in DVI/DVII mode.
			if (debuginfiniteammo) Console.Printf("    \cwInfinite Ammo [STEP 1 - Marine Armor]: %d\c-", infammoneeded);

			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			nn = "SauronGauntletsPetra"; APPackCheck2 = nn;
			if (Owner.CountInv("SauronHelmet") > 0)				infammoneeded2 += 750; // +7.5% Chance
			if (Owner.CountInv("SauronGauntlets") > 0)			infammoneeded2 += 750; // +7.5% Chance
			if (Owner.CountInv("SauronGauntletsIllucia") > 0)	infammoneeded2 += 750; // +7.5% Chance
			if (Owner.CountInv("SauronGauntletsFlora") > 0)		infammoneeded2 += 750; // +7.5% Chance
			if (Owner.CountInv(APPackCheck) > 0)		infammoneeded2 += 750; // +7.5% Chance
			if (Owner.CountInv(APPackCheck2) > 0)		infammoneeded2 += 750; // +7.5% Chance
			if (Owner.CountInv("TheOneRing") > 0)				infammoneeded2 += 2500; // +25.0% Chance
			if (ModType != 0) infammoneeded2 = infammoneeded2 * 5 / 4; // Sauron's Armor gives them 1.25x the chance of infinite ammo on each tic in DVI/DVII mode.
			if (debuginfiniteammo) Console.Printf("    \cwInfinite Ammo [STEP 2 - Sauron Armor]: %d\c-", infammoneeded2);

			infammoneeded += infammoneeded2;
			if (DivineAvatarTimer > 0)
			{
				infammoneeded += 1250;
				infammoreqremaining = (10000 - infammoneeded) / 4; // Gets 25% of the remaining value not covered by the above.
				infammoneeded += infammoreqremaining;
			}
			if (debuginfiniteammo) Console.Printf("    \cwInfinite Ammo [STEP 3 - Divine Avatar]: %d\c-", infammoneeded);
			
			// "Bottomless Magazines" Perk
			if (CallACS("MiscVarCheckDECORATE",10047) > 0)
			{
				infammoneeded += 500;
				if (CallACS("MiscVarCheckDECORATE",10047) > 1) infammoneeded += 500;
				if (CallACS("MiscVarCheckDECORATE",10047) > 2) infammoneeded += 500;
				if (CallACS("MiscVarCheckDECORATE",10047) > 3) infammoneeded += 500;
				if (CallACS("MiscVarCheckDECORATE",10047) > 4) infammoneeded += 500;
			}
			if (debuginfiniteammo) Console.Printf("    \cwInfinite Ammo [STEP 4 - Bottomless Mags]: %d\c-", infammoneeded);
			
			// "Bottomless Magazines EX" Perk
			if (CallACS("MiscVarCheckDECORATE",10048) > 0)
			{
				infammoneeded += 750;
				if (CallACS("MiscVarCheckDECORATE",10048) > 1) infammoneeded += 750;
			}
			if (debuginfiniteammo) Console.Printf("    \cwInfinite Ammo [STEP 5 - Bottomless Mags EX]: %d\c-", infammoneeded);
			
			int infammochance = random(1,10000);
			if (infammochance <= infammoneeded)
			{
				Owner.A_GiveInventory("RandomInfiniteAmmo",1);
			}
			else
			{
				Owner.A_TakeInventory("RandomInfiniteAmmo",9999);
			}
			if (debuginfiniteammo) Console.Printf("    \cwInfinite Ammo [STEP 6 - Chance Roll]: %d / %d\c-", infammochance, infammoneeded);

			if (debuginfiniteammo) Console.Printf("    \cwInfinite Ammo [STEP ? - Minigun Heat]: %d / %d\c-", minigunheat, minigunheatmax);
		}
		
		
		
		
		
		//****************************************
		//**IronFeet/Mask Implementation Effects**
		//****************************************
		if (playeractor)
		{
			if (Owner.CountInv("PowerIronFeet") > 0)
			{
				if (Owner.CountInv("IronFeetNoPoison") == 0) Owner.A_GiveInventory("IronFeetNoPoison",1);
				if (Owner.CountInv("MaskNoFire") > 0) Owner.A_TakeInventory("MaskNoFire",0x7FFFFFFF);
			}
			else if (Owner.CountInv("PowerMask") > 0)
			{
				if (Owner.CountInv("IronFeetNoPoison") == 0) Owner.A_GiveInventory("IronFeetNoPoison",1);
				if (Owner.CountInv("MaskNoFire") == 0) Owner.A_GiveInventory("MaskNoFire",1);
			}
			else
			{
				if (Owner.CountInv("IronFeetNoPoison") > 0) Owner.A_TakeInventory("IronFeetNoPoison",0x7FFFFFFF);
				if (Owner.CountInv("MaskNoFire") > 0) Owner.A_TakeInventory("MaskNoFire",0x7FFFFFFF);
			}
		}
		
		
		
		
		
		//***********
		//**Evasion**
		//***********
		if (playeractor)
		{
			// Set's The Base increase from each point of Agility
			if (CharacterClass == 0) { AglEvadeCheck = 9;  DftEvadeCheck = 0; } // Deggaris
			if (CharacterClass == 1) { AglEvadeCheck = 10; DftEvadeCheck = 0; } // Illucia
			if (CharacterClass == 2) { AglEvadeCheck = 11; DftEvadeCheck = 0; } // Flora
			if (CharacterClass == 8) { AglEvadeCheck = 8;  DftEvadeCheck = 0; } // Ailish
			if (CharacterClass == 9) { AglEvadeCheck = 22; DftEvadeCheck = 0; } // Petra (Has double of Flora's)

			if (Owner.CountInv("SauronHelmet") > 0) { AglEvadeCheck += 1; DftEvadeCheck += 1; }
			if (CharacterClass == 0 && Owner.CountInv("SauronGauntlets") > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
			if (CharacterClass == 1 && Owner.CountInv("SauronGauntletsIllucia") > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
			if (CharacterClass == 2 && Owner.CountInv("SauronGauntletsFlora") > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			if (CharacterClass == 8 && Owner.CountInv(APPackCheck) > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
			nm = "SauronGauntletsPetra"; APPackCheck = nm;
			if (CharacterClass == 9 && Owner.CountInv(APPackCheck) > 0) { AglEvadeCheck += 2; DftEvadeCheck += 2; }
			if (Owner.CountInv("TheOneRing") > 0) { AglEvadeCheck += 6; DftEvadeCheck += 6; }
			if (debugevasion > 0) Console.Printf("    \cwEvasion Rate [STEP 0 - Agl/Def Evade Check]: %d / %d\c-", AglEvadeCheck, DftEvadeCheck);

			SkillFactor = 0;
			SkillFactor = ((PlayerAGL * AglEvadeCheck) + (PlayerDFT * DftEvadeCheck)) / 2;
			EvasionRate += SkillFactor;
			if (debugevasion > 0) Console.Printf("    \cwEvasion Rate [STEP 1 - Base (Agl/Evade)]: %d\c-", EvasionRate);

			// Divine Avatar
			SkillFactor = 0;
			if (DivineAvatarTimer > 0)
			{
				SkillFactor = EvasionRate * 1.75;
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate [STEP 2 - Divine Avatar]: %d\c-, Added: %d", EvasionRate, SkillFactor);
			}
			
			// GoE
			SkillFactor = 0;
			if (GoETimer > 0)
			{
				SkillFactor = EvasionRate * 2.875;
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate [STEP 2a - GoE]: %d\c-, Added: %d", EvasionRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// DodgeMore perks
			if (DodgeMorePerkLevel > 0 || DodgeMoreEXPerkLevel > 0)
			{
				SkillFactor = ((DodgeMorePerkLevel * 250) + (DodgeMoreEXPerkLevel * 625));
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate [STEP 3 - DodgeMore Perks]: %d\c-, Added: %d", EvasionRate, SkillFactor);
			}

			SkillFactor = 0;
			// [STRIFE-Compatibility] Stamina Upgrades
			if (StrifeStaminaLevel > 0)
			{
				SkillFactor = StrifeStaminaLevel * 111;
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 4 - Strife-Stamina Perk]: %d,\c- Added: %d", EvasionRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// Checks Evasion Based on Level
			SkillFactor = PlayerLevel * 5;
			if (DivineAvatarTimer > 0) SkillFactor = SkillFactor * 7 / 5;
			EvasionRate += SkillFactor;
			if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 5a - Level Check]: %d,\c- Added: %d", EvasionRate, SkillFactor);

			SkillFactor = 0;
			// Flora Armor Checks
			if (CharacterClass == 2)
			{
				// Flora has Safe Tea Shoes? [+3.75% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("SafeTeaShoes") > 0) SkillFactor += 375;
				
				// Flora has Pearly Corset? [+0.75% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("PearlyCorset") > 0) SkillFactor += 75;
				
				// Flora has Water Flying Dress? [+1.25% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("WaterFlyingDress") > 0) SkillFactor += 125;
				
				// Flora has Evenstar Necklace? [+2.5% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("EvenstarNecklace") > 0) SkillFactor += 250;
				
				// Flora has Cloak of Evasion? [+12.50% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("CloakOfEvasion") > 0) SkillFactor += 1250;
				
				// Flora has Falcon Knife Earrings? [+1.25% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("FalconKnifeEarrings") > 0) SkillFactor += 125;
				
				// Flora has Anubis Cufflinks? [+0.5% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("AnubisCufflinks") > 0) SkillFactor += 50;
				
				// Flora has Kissa's Brasseire? [+1% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("KissaBra") > 0) SkillFactor += 100;
				
				// Flora has Balrog Ring? [+0.5% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("BalrogRing") > 0) SkillFactor += 50;
				
				// Flora has Dove Ribbon? [+1.75% Chance to totally "Evade" damage even from a direct hit.]
				if (Owner.CountInv("DoveRibbon") > 0) SkillFactor += 175;
			}
			EvasionRate += SkillFactor;
			if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 6 - Flora Armor Check]: %d,\c- Added: %d", EvasionRate, SkillFactor);

			SkillFactor = 0;
			// Someone has Sauron's Helmet [-1.56% Chance]
			if (Owner.CountInv("SauronHelmet") > 0) 
			{
				SkillFactor = 156;
				EvasionRate -= SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 7a - Sauron Helm Check]: %d,\c- Subtracted: %d", EvasionRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// Someone has The One Ring [+6.25% Chance]
			if (Owner.CountInv("TheOneRing") > 0) 
			{
				SkillFactor = 625;
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 7b - One Ring Check]: %d,\c- Added: %d", EvasionRate, SkillFactor);
			}

			SkillFactor = 0;
			// Haste Buff [150% Evade]
			if (Owner.CountInv("HasteBuff") > 0)
			{
				SkillFactor = EvasionRate / 2;
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 8a - Haste Check]: %d,\c- Added: %d", EvasionRate, SkillFactor);
			}
			
			SkillFactor = 0;
			// Slow Ailment [66.7% Evade]
			if (Owner.CountInv("SlowAilment") > 0)
			{
				SkillFactor = EvasionRate * 1 / 3;
				EvasionRate -= SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 8b - Slow Check]: %d,\c- Subtracted: %d", EvasionRate, SkillFactor);
			}
			
			SkillFactor = 0;
			if (CharacterClass == 2)
			{
				// Ruinous Shield [Evade reduced by 5/8ths]
				if (Owner.CountInv("RuinousShield") > 0)
				{
					SkillFactor = EvasionRate * 5 / 8;
					EvasionRate -= SkillFactor;
					if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 9 - Ruinous Shield Check]: %d,\c- Subtracted: %d", EvasionRate, SkillFactor);
				}
				
				// Divine Shield [Evade Increased by 1/4ths]
				if (Owner.CountInv("DivineShield") > 0)
				{
					SkillFactor = EvasionRate * 1 / 4;
					EvasionRate += SkillFactor;
					if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 9 - Divine Shield Check]: %d,\c- Added: %d", EvasionRate, SkillFactor);
				}
			}
			
			SkillFactor = 0;
			// On The Move Perk
			int IsMoving = 0;
			if (PlayerVelX < -3.814697266 || PlayerVelX > 3.814697266) IsMoving++;
			if (PlayerVelY < -3.814697266 || PlayerVelY > 3.814697266) IsMoving++;
			if (PlayerVelZ < -1.907348633 || PlayerVelZ > 1.907348633) IsMoving++;
			if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP ? - Vel Checks]: IsMoving?: %d, x%8f / y%8f / z%8f", IsMoving, PlayerVelX, PlayerVelY, PlayerVelZ);
			if (OnTheMovePerkLevel > 0 && IsMoving > 0) // "On The Move" Perk
			{
				if (OnTheMovePerkLevel == 1) { SkillFactor = 250 + ((PlayerAGL * 100) / 40); }
				if (OnTheMovePerkLevel == 2) { SkillFactor = 400 + ((PlayerAGL * 100) / 32); }
				if (OnTheMovePerkLevel == 3) { SkillFactor = 550 + ((PlayerAGL * 100) / 24); }
				if (OnTheMovePerkLevel == 4) { SkillFactor = 700 + ((PlayerAGL * 100) / 16); }
				if (OnTheMovePerkLevel >= 5) { SkillFactor = 850 + ((PlayerAGL * 100) / 8); }
		
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 10 - On The Move]: %d,\c- Added: %d", EvasionRate, SkillFactor);
			}

			// Caps Evasion Chances out at 75% [unless you have the Dove's Ribbon, which it caps at 92.5%]
			int EvasionMin;
			int EvasionMax;
			if (Owner.CountInv("DoveRibbon") > 0)
			{
				EvasionMin = 175;
				EvasionMax = 9250;
				EvasionMin += ((DodgeMorePerkLevel * 25) + (DodgeMoreEXPerkLevel * 63) + (OnTheMovePerkLevel * 16) + (OnTheMoveEXPerkLevel * 42));
				EvasionMax += ((DodgeMorePerkLevel * 50) + (DodgeMoreEXPerkLevel * 125) + (OnTheMovePerkLevel * 33) + (OnTheMoveEXPerkLevel * 84));
			}
			else
			{
				EvasionMin = 0;
				EvasionMax = 7500;
				EvasionMin += ((DodgeMorePerkLevel * 20) + (DodgeMoreEXPerkLevel * 50) + (OnTheMovePerkLevel * 13) + (OnTheMoveEXPerkLevel * 33));
				EvasionMax += ((DodgeMorePerkLevel * 30) + (DodgeMoreEXPerkLevel * 75) + (OnTheMovePerkLevel * 20) + (OnTheMoveEXPerkLevel * 50));
			}
			if (EvasionRate < EvasionMin) EvasionRate = EvasionMin;
			if (EvasionRate > EvasionMax) EvasionRate = EvasionMax;
			if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 11 - Dove Ribbon Check]: %d,\c- EvadeMin: %d, EvadeMax: %d", EvasionRate, EvasionMin, EvasionMax);
			
			
			// Check for Equipped Weapon
			If (weapon is "BFG90002") BasePerkFactor = -625;
			If (weapon is "RocketLauncher2") BasePerkFactor = -313;
			If (weapon is "Railgun2" || weapon is "Karasawa2" ||
					weapon is "Repeater2" || weapon is "PlasmaRifle2")
			{
				BasePerkFactor = -156;
			}

			nm = "SauronGauntletsAilish"; APPackCheck = nm;
			nn = "SauronGauntletsPetra"; APPackCheck2 = nn;
			If (weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || 
					weapon is APPackCheck || weapon is APPackCheck2)
			{
				BasePerkFactor = -156;
			}

			no = "FistAilish"; APPackCheck3 = no;
			np = "FistPetra"; APPackCheck4 = np;
			If (weapon is "Chainsaw2" || weapon is "DoubleBladedChainsaw") BasePerkFactor = -78;
			If (weapon is "Minigun") BasePerkFactor = -78;
			If (weapon is "EvilWarriorShield") BasePerkFactor = -63;
			If (weapon is "Chaingun2") BasePerkFactor = -39;
			If (weapon is "FistDeggaris" || 
					weapon is "FistIllucia" || 
					weapon is "FistFlora" || 
					weapon is APPackCheck3 || weapon is APPackCheck4)
			{
				BasePerkFactor = 625;
			}
			If (weapon is "SceptreOfEmpyrea") BasePerkFactor = 1250;
			
			If (weapon is "Shotgun2") BasePerkFactor = 63;
			If (weapon is "Pistol2") BasePerkFactor = 125;
			If (weapon is "DualPistols") BasePerkFactor = (125 * 3) / 2;
			
			// Hellcore Weapons
			int EvadeCurrHellcoreLevel = 0;
			If (weapon is "ImpClaw") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",96); }
			If (weapon is "DarkImpClaw") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",97); }
			If (weapon is "CacodemonEye") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",98); }
			If (weapon is "CacolanternEye") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",99); }
			If (weapon is "AbaddonEye") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",100); }
			If (weapon is "KnightFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",101); }
			If (weapon is "BaronFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",102); }
			If (weapon is "BelphegorFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",103); }
			If (weapon is "BruiserFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",104); }
			If (weapon is "ArchonFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",105); }
			If (weapon is "PyroFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",106); }
			If (weapon is "IncarnateSkull") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",107); }
			If (weapon is "ArchvileHand") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",108); }
			If (weapon is "DiabloistHand") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",109); }
			If (weapon is "BalrogFist") { EvadeCurrHellcoreLevel = CallACS("MiscVarCheckDECORATE",110); }
			if (EvadeCurrHellcoreLevel > 0) BasePerkFactor = (1250 * EvadeCurrHellcoreLevel) / 8;
			
			If (weapon is "SapphireWandNew") BasePerkFactor = 125;
			If (weapon is "DualSapphireWandsNew") BasePerkFactor = (125 * 3) / 2;
			nm = "GoldWandNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 187;
			nm = "DualGoldWandNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (187 * 3) / 2;
			nm = "CrossbowNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 325;
			nm = "DualCrossbowNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (325 * 3) / 2;
			nm = "SuperCrossbowNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 468;
			nm = "DualSuperCrossbowNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (468 * 3) / 2;
			nm = "DragonClawNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 250;
			nm = "DualDragonClawNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (250 * 3) / 2;
			nm = "HellStaffNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 250;
			nm = "DualHellStaffNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (250 * 3) / 2;
			nm = "PhoenixRodNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 187;
			nm = "DualPhoenixRodNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (187 * 3) / 2;
			nm = "FiremaceNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 125;
			nm = "DualFiremaceNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = (125 * 3) / 2;
			nm = "StrifeCrossbowNew"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 325;
			nm = "StrifeCrossbow2New"; APPackCheck = nm; If (weapon is APPackCheck) BasePerkFactor = 325;

			if (BasePerkFactor != 0)
			{
				PerkFactor = BasePerkFactor;
				PerkFactor += ((DodgeMorePerkLevel * (BasePerkFactor / 20)) + (DodgeMoreEXPerkLevel * (BasePerkFactor / 8)));
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 12 - Weapon Check]: %d,\c- Change: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
			}
			
			SkillFactor = 0;
			// Acceleratle = +1/5 of remaining % Evasion added (done after caps are normally calculated)
			if (DQAcceleratleTimer > 0)
			{
				PerkFactor = 2000;
				PerkFactor += ((DodgeMorePerkLevel * 200) + (DodgeMoreEXPerkLevel * 500));
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 13a - Acceleratle Check]: %d,\c- Add: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
			}
			// Deceleratle = -1/5 of remaining % Current Evasion removed (done after caps are normally calculated)
			if (DQDeceleratleTimer > 0)
			{
				PerkFactor = 2000;
				PerkFactor -= ((DodgeMorePerkLevel * 100) + (DodgeMoreEXPerkLevel * 250));
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate -= SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 13b - Deceleratle Check]: %d,\c- Subtracted: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
			}

			SkillFactor = 0;
			// BlurSphere = +1/3 of remaining % Evasion added (done after caps are normally calculated) [in other words, make the Blur Sphere & Invisibility Spells actually USEFUL >__>;]
			if (Owner.CountInv("PowerInvisibility") > 0 || Owner.CountInv("InvisiblitySpell") > 0)
			{
				PerkFactor = 3334;
				PerkFactor += ((DodgeMorePerkLevel * 125) + (DodgeMoreEXPerkLevel * 313));
				SkillFactor = (10000 - EvasionRate) * PerkFactor / 10000;
				EvasionRate += SkillFactor;
				if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 14 - Invisibility Check]: %d,\c- Added: %d, PerkFactor: %d", EvasionRate, SkillFactor, PerkFactor);
			}

			SkillFactor = EvasionRate;
			int evadecalcfactor = dvds_evadecalcfactor;
			if (evadecalcfactor < 10) evadecalcfactor = 10;
			if (evadecalcfactor > 1000) evadecalcfactor = 1000;
			EvasionRate = EvasionRate * evadecalcfactor / 100;
			if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 15 - Factor Check]: %d,\c- Previous: %d, Factor: %d", EvasionRate, SkillFactor, evadecalcfactor);
			
			int ultmaxevasionrate = 9875;
			if (EvasionRate < 0) EvasionRate = 0;
			if (EvasionRate > ultmaxevasionrate) EvasionRate = ultmaxevasionrate;
			if (debugevasion > 0) Console.Printf("    \cwEvasion Rate % [STEP 16 - Final Check]: %d / %d\c-", EvasionRate, ultmaxevasionrate);
			// Transplants back to ACS for HUD displays/etc
			CallACS("MiscVarSetDECORATE",23,EvasionRate);

			int EvasionRNGVal = random(1,10000); // Based on 0.1% to 100.0% [though the displays only show full %]
			if (EvasionRNGVal <= EvasionRate) 
			{
				if (owner.CountInv("EvadeAnAttack") <= 0) owner.A_GiveInventory("EvadeAnAttack",1); 
				if (debugevasion > 0) Console.Printf("    \cdEvasion % Roll / Rate: %d / %d", EvasionRNGVal, EvasionRate);
			}
			else 
			{ 
				if (owner.CountInv("EvadeAnAttack") >= 1) owner.A_TakeInventory("EvadeAnAttack",9999); 
				if (debugevasion > 0) Console.Printf("    \cgEvasion % Roll / Rate: %d / %d", EvasionRNGVal, EvasionRate);
			}
		}
		
		
		
		
		
		//*********************
		//*Check Tension Level*
		//*********************
		if (playeractor)
		{
			int TensionChargeFailRate;
			int TensionChargeTimeMax;
			int TensionStaminaPerTic;
			int randompulseinterval1;
			int randompulseinterval2;
			int randompulseinterval3;
			int randompulseinterval4;
			double pulsevolume;
			int maxpulseinterval;
			int TensionChargeAmount;
			int TensionCoolDownRatio;
			int TensionStaminaDivisor;
			int TensionChargeFailRatio = dvds_tension_failrateratio;
			int KillCounter = CallACS("MiscVarCheckDECORATE",158);
			int TensionOverChargeAllowed = dvds_allowtensionocdmg;

			TensionLevel = CallACS("MiscVarCheckDECORATE",181);
			int TensionLevelLastTic = CallACS("MiscVarCheckDECORATE",182);
			TensionTimer = CallACS("MiscVarCheckDECORATE",183);
			int TensionCountingDown = CallACS("MiscVarCheckDECORATE",184);
			TensionWarmupTimer = CallACS("MiscVarCheckDECORATE",185);
			TensionCooldownTimer = CallACS("MiscVarCheckDECORATE",186);
			int TensionMaxCooldownTimer = CallACS("MiscVarCheckDECORATE",188);
			TensionChargeLoopTimer = CallACS("MiscVarCheckDECORATE",189);
			TensionActivePulseTimer = CallACS("MiscVarCheckDECORATE",190);
			int TensionBackgroundAuraTimer = CallACS("MiscVarCheckDECORATE",246);
			TensionOverPsycheTimer = CallACS("MiscVarCheckDECORATE",250);
			TensionOverchargeTimer = CallACS("MiscVarCheckDECORATE",251);
			TensionMaxOverchargeTimer = CallACS("MiscVarCheckDECORATE",261);
			TensionMaxOverPsycheTimer = CallACS("MiscVarCheckDECORATE",262);
			if (TensionLevel == 0)  // 0 to 5 Tension [4 Seconds, 20% Total Stamina Use, 0% Fail Rate]
			{
				TensionChargeFailRate = 0;
				TensionChargeTimeMax = 14000;
				TensionStaminaPerTic = 2000;
				TensionMaxOverPsycheTimer = 99999999;
				TensionMaxOverchargeTimer = 99999999;
				TensionOverPsycheTimer = 0;
				TensionOverchargeTimer = 0;
			}
			
			if (TensionLevel == 1)  // 5 to 20 Tension [4.25~ Seconds, 22.5% Total Stamina Use, 2.5% Fail Rate]
			{
				TensionChargeFailRate = 25;
				TensionChargeTimeMax = 14880;
				TensionStaminaPerTic = 2250;
				TensionMaxOverPsycheTimer = 21000; // 600 Seconds [10 minutes]
				TensionMaxOverchargeTimer = 130; // 3.71 seconds
			}
			
			if (TensionLevel == 2)  // 20 to 50 Tension [4.5~ Seconds, 25% Total Stamina Use, 10% Fail Rate]
			{
				TensionChargeFailRate = 100;
				TensionChargeTimeMax = 15750;
				TensionStaminaPerTic = 2500;
				TensionMaxOverPsycheTimer = 15750; // 450 Seconds [7.5 minutes]
				TensionMaxOverchargeTimer = 110; // 3.14 seconds
			}
			
			if (TensionLevel == 3)  // 50 to 100 Tension [5 Seconds, 30% Total Stamina Use, 50% Fail Rate]
			{
				TensionChargeFailRate = 500;
				TensionChargeTimeMax = 17500;
				TensionStaminaPerTic = 3000;
				TensionMaxOverPsycheTimer = 10500; // 300 Seconds [5 minutes]
				TensionMaxOverchargeTimer = 90; // 2.57 seconds
			}
			
			if (TensionLevel == 4)  // 100 to 250 Tension [5.5 Seconds, 35% Total Stamina Use, 70% Fail Rate]
			{
				TensionChargeFailRate = 700;
				TensionChargeTimeMax = 19250;
				TensionStaminaPerTic = 3500;
				TensionMaxOverPsycheTimer = 5250; // 150 Seconds [2.5 minutes]
				TensionMaxOverchargeTimer = 70; // 2 seconds
			}
			
			if (TensionLevel == 5)  // 250 to 500 Tension [6 Seconds, 40% Total Stamina Use, 85% Fail Rate]
			{
				TensionChargeFailRate = 850;
				TensionChargeTimeMax = 21000;
				TensionStaminaPerTic = 4000;
				TensionMaxOverPsycheTimer = 2100; // 60 Seconds
				TensionMaxOverchargeTimer = 60; // 1.71 seconds
			}
			
			if (TensionLevel == 6)  // 500 to 1000 Tension [7.5 Seconds, 50% Total Stamina Use, 92.5% Fail Rate]
			{
				TensionChargeFailRate = 950;
				TensionChargeTimeMax = 26250;
				TensionStaminaPerTic = 5000;
				TensionMaxOverPsycheTimer = 1575; // 45 Seconds
				TensionMaxOverchargeTimer = 50; // 1.42 seconds
			}
			if (TensionLevel == 7)
			{
				TensionChargeFailRate = 1000;
				TensionChargeTimeMax = 26250;
				TensionStaminaPerTic = 5000;
				TensionMaxOverPsycheTimer = 1050; // 30 Seconds
				TensionMaxOverchargeTimer = 40; // 1.14 seconds
			}
			
			TensionMaxOverPsycheTimer *= 20;
			TensionMaxOverchargeTimer *= 20;
			
			if (DivineAvatarTimer > 0)
			{
				TensionMaxOverPsycheTimer *= 4;
				TensionMaxOverchargeTimer *= 4;
			}
			if (debugtensioninfo) 
			{
				Console.Printf("Tension [Step 1 - Get Initial Values]: TensionLevel: %d, FailRate: %d, MaxChargeTime: %d, StamPerTic: %d, OverpsychTimer: %d / %d, OverchargeTimer: %d / %d", 
												TensionLevel, TensionChargeFailRate, TensionChargeTimeMax, TensionStaminaPerTic, TensionOverPsycheTimer, TensionMaxOverPsycheTimer, TensionOverchargeTimer, TensionMaxOverchargeTimer);
			}
			
			// Tension Per Tic Calcs
			TensionStaminaDivisor = TensionChargeTimeMax / 190;
			TensionStaminaPerTic = TensionStaminaPerTic / TensionStaminaDivisor;
			if (debugtensioninfo) Console.Printf("Tension [Step 2 - Stam Use Calc P1]: StamPerTic: %d, MaxChargeTime: %d, Divisor: %d", TensionStaminaPerTic, TensionChargeTimeMax, TensionStaminaDivisor);
			// Check Tension Speed Option [also affects Stamina]
			TensionStaminaPerTic = (TensionStaminaPerTic * tensionspeedmulti) / 100;
			if (debugtensioninfo) Console.Printf("Tension [Step 3 - Stam Use Calc P2 - Tension Speed/Stam Multi]: StamPerTic: %d, Multiplier: %d%", TensionStaminaPerTic, tensionspeedmulti);
			// Falcon Knife Earrings [-10% Consumption]
			if (Owner.CountInv("FalconKnifeEarrings") > 0) TensionStaminaPerTic = TensionStaminaPerTic * 9 / 10;
			if (debugtensioninfo) Console.Printf("Tension [Step 4 - Stam Use Calc P3 - Falcon Knife Earrings]: StamPerTic: %d", TensionStaminaPerTic);
			
			// Fail Rate Calcs
			if (Owner.CountInv("PowerStrength") > 0) TensionChargeFailRate -= 125; // -12.5% Fail Rate When Berserked
			if (debugtensioninfo) Console.Printf("Tension [Step 5 - Fail Rate Calc P1 - Berserk]: %d", TensionChargeFailRate);
			if (DivineAvatarTimer > 0) TensionChargeFailRate -= 250; // -25% Fail Rate When In Divine Avatar
			if (debugtensioninfo) Console.Printf("Tension [Step 6 - Fail Rate Calc P2 - Divine Avatar]: %d", TensionChargeFailRate);
			if (GoETimer > 0) TensionChargeFailRate /= 5; // 0.2x Fail Rate When In GoE
			if (debugtensioninfo) Console.Printf("Tension [Step 7 - Fail Rate Calc P3 - GoE]: %d", TensionChargeFailRate);
			
			if (TensionChargeFailRatio < 0) TensionChargeFailRatio = 0;
			if (TensionChargeFailRatio > 1000) TensionChargeFailRatio = 1000;
			if (debugtensioninfo) Console.Printf("Tension [Step 8 - Fail Rate Calc P4 - Caps]: %d", TensionChargeFailRate);
			
			TensionChargeFailRate = (TensionChargeFailRate * TensionChargeFailRatio) / 100;
			if (debugtensioninfo) Console.Printf("Tension [Step 9 - Fail Rate Calc P5 - Failure Ratio Multi]: %d, Multiplier: %d%", TensionChargeFailRate, TensionChargeFailRatio);

			PerkFactor = 10000 - ((PsycheFastPerkLevel * 125) + (PsycheFastEXPerkLevel * random(312,313)));
			TensionChargeFailRate = (TensionChargeFailRate * PerkFactor) / 10000;
			if (debugtensioninfo) Console.Printf("Tension [Step 10 - Fail Rate Calc P6 - PsycheFast]: %d, PerkFactor: %d / 10000", TensionChargeFailRate, PerkFactor);

			if (dvds_musou_powertripmode == 1) TensionChargeFailRate = TensionChargeFailRate / 5; // Check "Power Trip" mode Cheat
			if (dvds_musou_powertripmode == 2) TensionChargeFailRate = TensionChargeFailRate / 10; // Check "Power Trip" mode Cheat
			if (debugtensioninfo) Console.Printf("Tension [Step 11 - Fail Rate Calc P7 - Power Trip Mode]: %d", TensionChargeFailRate);
			if (TensionChargeFailRate <= 0) TensionChargeFailRate = 0;
			if (debugtensioninfo) Console.Printf("Tension [Step 12 - Fail Rate Calc P8 - LowCap]: %d", TensionChargeFailRate);
			
			// Cooldown Base
			TensionCoolDownRatio = 200;
			if (debugtensioninfo) Console.Printf("Tension [Step 13 - Cooldown Calc P1 - Base]: %d", TensionCoolDownRatio);
			// PsycheFast Cooldown
			PerkFactor = ((PsycheFastPerkLevel * 500) + (PsycheFastEXPerkLevel * 1250)) + 10000;
			TensionCoolDownRatio = TensionCoolDownRatio * PerkFactor / 10000; // "PsycheMore" and "PsycheMore EX" perks.
			if (debugtensioninfo) Console.Printf("Tension [Step 14 - Cooldown Calc P2 - PsychFast]: %d, PerkFactor: %d / 10000", TensionCoolDownRatio, PerkFactor);
			// Cooldown Multiplier
			TensionCoolDownRatio = TensionCoolDownRatio * dvds_tension_cooldownmultiplier / 100;
			if (debugtensioninfo) Console.Printf("Tension [Step 15 - Cooldown Calc P3 - Cooldown Multiplier]: %d, Multiplier: %d%", TensionCoolDownRatio, dvds_tension_cooldownmultiplier);
			
			// Kill Combo
			if (KillCounter > 1)
			{
				if (KillCounter > 10 && KillCounter < 21) { TensionCoolDownRatio = (TensionCoolDownRatio * 1010) / 1000; }
				else if (KillCounter > 20 && KillCounter < 36) { TensionCoolDownRatio = (TensionCoolDownRatio * 1030) / 1000; }
				else if (KillCounter > 35 && KillCounter < 61) { TensionCoolDownRatio = (TensionCoolDownRatio * 1060) / 1000; }
				else if (KillCounter > 60 && KillCounter < 101) { TensionCoolDownRatio = (TensionCoolDownRatio * 1100) / 1000; }
				else if (KillCounter > 100 && KillCounter < 201) { TensionCoolDownRatio = (TensionCoolDownRatio * 1200) / 1000; }
				else if (KillCounter > 200 && KillCounter < 501) { TensionCoolDownRatio = (TensionCoolDownRatio * 1500) / 1000; }
				else if (KillCounter > 500) { TensionCoolDownRatio = (TensionCoolDownRatio * 1950) / 1000; }
			}
			if (debugtensioninfo) Console.Printf("Tension [Step 16 - Cooldown Calc P4 - Kill Counter]: %d, KillCount: %d", TensionCoolDownRatio, KillCounter);
			
			int DashTimer = CallACS("MiscVarCheckDECORATE",166);
			if (DashTimer <= 0 && UsingInGameMenu == 0) TensionCooldownTimer -= TensionCoolDownRatio;
			if (TensionCooldownTimer <= 0) { TensionCooldownTimer = 0; TensionMaxCooldownTimer = TensionCooldownTimer; }
			if (debugtensioninfo) Console.Printf("Tension [Step 17 - Cooldown Calc P5 - Final Countdown]: Timer: %d / %d, Decrease: %d", TensionCooldownTimer, TensionMaxCooldownTimer, TensionCoolDownRatio);
			
			if (PlayerCurrentHealth > 0)
			{
				TensionChargeAmount = 0;
				FreezePlayer = 0;
				if (MenuModeToggle > 0) FreezePlayer += 1;
				if (FatigueTimer > 0 && random(1,20) == 1) FreezePlayer += 1;
				if (SleepTimer > 0) FreezePlayer += 1;
				if (buttons & BT_USE && buttons & BT_SPEED && TensionCooldownTimer <= 0 && FreezePlayer == 0)
				{
					if (AllowTension > 0 && CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // Tension is Enabled & If Player is "Conscious"
					{
						TensionCooldownTimer = 0;
						TensionMaxCooldownTimer = TensionCooldownTimer;
						
						if (TensionLevel <= 7 && TensionCountingDown <= 0)
						{
							CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
							if (CurrentStamina >= TensionStaminaPerTic)
							{
								if (TensionLevel < 7)
								{
									TensionChargeLoopTimer++; // Increase Charge-Up Sound Loop Timer
									if (TensionChargeLoopTimer == 1) owner.A_PlaySound("tensioncharge",CHAN_6,1.0);
									if (TensionChargeLoopTimer >= 63) TensionChargeLoopTimer = 0;
									
									if (TensionWarmupTimer == 0 && CharacterClass == 2) owner.A_PlaySound("FloraChargeTension",CHAN_VOICE,1.0,0,ATTN_NORM);
									owner.A_SpawnItemEx("TensionParticleGenerator",0,0,1,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION);
									if (TensionLevel > 3 && random(1,100) > 50) owner.A_SpawnItemEx("TensionParticleGenerator",0,0,1,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION); // "100"+ Tension
									if (TensionLevel > 4 && random(1,100) > 80) owner.A_SpawnItemEx("TensionParticleGenerator",0,0,1,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION); // "250"+ Tension
									if (TensionLevel > 5 && random(1,100) > 86) owner.A_SpawnItemEx("TensionParticleGenerator",0,0,1,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION); // "500"+ Tension
									if (TensionLevel > 6 && random(1,100) > 91) owner.A_SpawnItemEx("TensionParticleGenerator",0,0,1,0.0,0.0,0.0,0,SXF_NOCHECKPOSITION); // "1000"+ Tension
								}
								else
								{
									TensionChargeLoopTimer = 0;
								}
								
								// Quaking
								if (TensionLevel == 0) owner.A_Quake(1,4,0,512,"null");
								if (TensionLevel == 1) owner.A_Quake(2,4,0,512,"null");
								if (TensionLevel == 2) owner.A_Quake(3,4,0,512,"null");
								if (TensionLevel == 3) owner.A_Quake(4,4,0,512,"null");
								if (TensionLevel == 4) owner.A_Quake(5,4,0,512,"null");
								if (TensionLevel == 5) owner.A_Quake(7,4,0,512,"null");
								if (TensionLevel == 6) owner.A_Quake(9,4,0,512,"null");
								if (TensionLevel < 7) 
								{
									CallACS("MiscVarSetDECORATE",21,TensionStaminaPerTic,2); // Subtract
								}
								
								// 100 = 1 tic
								TensionChargeAmount = 100;
								if (debugtensioninfo) Console.Printf("Tension [Step 18a - Charge Up P1]: %d", TensionChargeAmount);
								
								// -37.5% Charge Speed When Fatigued
								if (FatigueTimer > 0) TensionChargeAmount = TensionChargeAmount * 5 / 8;
								if (debugtensioninfo) Console.Printf("Tension [Step 18b - Charge Up P2 - Fatigue]: %d", TensionChargeAmount);

								// -25% Charge Speed When Berserked
								if (Owner.CountInv("PowerStrength") > 0) TensionChargeAmount = TensionChargeAmount * 3 / 4;
								if (debugtensioninfo) Console.Printf("Tension [Step 18c - Charge Up P3 - Berserk]: %d", TensionChargeAmount);

								// -12.5% Charge Speed When in Divine Avatar
								if (DivineAvatarTimer > 0) TensionChargeAmount = TensionChargeAmount * 7 / 8;
								if (debugtensioninfo) Console.Printf("Tension [Step 18d - Charge Up P4 - Divine Avatar]: %d", TensionChargeAmount);

								// +50% Charge Speed When in GoE
								if (GoETimer > 0) TensionChargeAmount = TensionChargeAmount * 3 / 2;
								if (debugtensioninfo) Console.Printf("Tension [Step 18d - Charge Up P4 - Divine Avatar]: %d", TensionChargeAmount);

								// +12.5% Charge Speed When Low on Health
								if (Owner.CountInv("LowHealth") > 0) TensionChargeAmount = TensionChargeAmount * 1125 / 1000;
								if (debugtensioninfo) Console.Printf("Tension [Step 18e - Charge Up P5 - Low Health]: %d", TensionChargeAmount);

								// +33.4% Charge Speed When Critically Low on Health
								if (Owner.CountInv("CriticalHealth") > 0) TensionChargeAmount = TensionChargeAmount * 1334 / 1000;
								if (debugtensioninfo) Console.Printf("Tension [Step 18f - Charge Up P6 - Critically-Low Health]: %d", TensionChargeAmount);

								// +33.4% Charge Speed for Flora
								if (CharacterClass == 2) TensionChargeAmount = TensionChargeAmount * 1334 / 1000;
								if (debugtensioninfo) Console.Printf("Tension [Step 18g - Charge Up P7 - Flora Check]: %d", TensionChargeAmount);

								// +50% Charge Speed for Flora when Low on Health
								if (CharacterClass == 2 && Owner.CountInv("LowHealth") > 0) TensionChargeAmount = TensionChargeAmount * 1500 / 1000;
								if (debugtensioninfo) Console.Printf("Tension [Step 18h - Charge Up P8 - Flora - Low Health]: %d", TensionChargeAmount);

								// +125% Charge Speed for Flora when Critically low on Health
								if (CharacterClass == 2 && Owner.CountInv("CriticalHealth") > 0) TensionChargeAmount = TensionChargeAmount * 2250 / 1000;
								if (debugtensioninfo) Console.Printf("Tension [Step 18i - Charge Up P9 - Flora - Critically-Low Health]: %d", TensionChargeAmount);

								// Check Tension Charge Multiplier Option
								TensionChargeAmount = TensionChargeAmount * dvds_tension_chargemultiplier / 100;
								if (debugtensioninfo) Console.Printf("Tension [Step 18j - Charge Up P10 - Charge Multiplier]: %d, Multiplier: %d%", TensionChargeAmount, dvds_tension_chargemultiplier);

								// Check Tension Speed Option [also affects Stamina]
								TensionChargeAmount = (TensionChargeAmount * tensionspeedmulti) / 100;
								if (debugtensioninfo) Console.Printf("Tension [Step 18k - Charge Up P11 - Tension Speed Multi]: %d, Multiplier: %d%", TensionChargeAmount, tensionspeedmulti);

								// Check "Power Trip" mode Cheat
								if (dvds_musou_powertripmode == 1) TensionChargeAmount *= 5;
								if (dvds_musou_powertripmode == 2) TensionChargeAmount *= 10;
								if (debugtensioninfo) Console.Printf("Tension [Step 18l - Charge Up P12 - Power Trip Mode]: %d", TensionChargeAmount);
								
								// Kill Combo
								if (KillCounter > 1)
								{
									if (KillCounter > 10 && KillCounter < 21) { TensionChargeAmount = (TensionChargeAmount * 1005) / 1000; }
									else if (KillCounter > 20 && KillCounter < 36) { TensionChargeAmount = (TensionChargeAmount * 1015) / 1000; }
									else if (KillCounter > 35 && KillCounter < 61) { TensionChargeAmount = (TensionChargeAmount * 1030) / 1000; }
									else if (KillCounter > 60 && KillCounter < 101) { TensionChargeAmount = (TensionChargeAmount * 1050) / 1000; }
									else if (KillCounter > 100 && KillCounter < 201) { TensionChargeAmount = (TensionChargeAmount * 1100) / 1000; }
									else if (KillCounter > 200 && KillCounter < 501) { TensionChargeAmount = (TensionChargeAmount * 1250) / 1000; }
									else if (KillCounter > 500) { TensionChargeAmount = (TensionChargeAmount * 1475) / 1000; }
								}
								if (debugtensioninfo) Console.Printf("Tension [Step 18m - Charge Up P13 - Kill Counter]: %d, KillCount: %d", TensionChargeAmount, KillCounter);
								
								// PsycheMore perks
								PerkFactor = ((PsycheFastPerkLevel * 750) + (PsycheFastEXPerkLevel * 1875)) + 10000;
								TensionChargeAmount = TensionChargeAmount * PerkFactor / 10000; // "PsycheMore" and "PsycheMore EX" perks.
								TensionChargeAmount += (PsycheFastPerkLevel / 2);
								TensionChargeAmount += PsycheFastEXPerkLevel;
								if (debugtensioninfo) Console.Printf("Tension [Step 18n - Charge Up P14 - PsycheFast]: %d", TensionChargeAmount);
								
								// Kill-Combo Bonus
								int TensionChargeKillBonus = ((KillCounter * 3) / 4) + 100;
								if (KillCounter > 0) TensionChargeAmount = (TensionChargeAmount * TensionChargeKillBonus) / 100;
								if (debugtensioninfo) Console.Printf("Tension [Step 18o - Charge Up P15 - Kill Bonus]: %d, KillBonus: %d%", TensionChargeAmount, TensionChargeKillBonus);
								
								// Up-Clamp to 1 Tic
								if (TensionChargeAmount < 1) TensionChargeAmount = 1;
								if (debugtensioninfo) Console.Printf("Tension [Step 18p - Charge Up P16 - Clamp]: %d", TensionChargeAmount);
							}
							else
							{
								if (TensionChargeLoopTimer > 0) TensionChargeLoopTimer = 0;
						
								if (TensionLevel == 0) TensionCooldownTimer = 3500;
								else if (TensionLevel == 1) TensionCooldownTimer = 3720;
								else if (TensionLevel == 2) TensionCooldownTimer = 3940;
								else if (TensionLevel == 3) TensionCooldownTimer = 4380;
								else if (TensionLevel == 4) TensionCooldownTimer = 4810;
								else if (TensionLevel == 5) TensionCooldownTimer = 5250;
								else if (TensionLevel == 6) TensionCooldownTimer = 6560;
								TensionCooldownTimer = TensionCooldownTimer * 3 / 2;
								TensionMaxCooldownTimer = TensionCooldownTimer;
						
								if (TensionLevel < 7)
								{
									owner.A_PlaySound("tensionfailed",CHAN_7,1.0);
								}
						
								CallACS("MiscVarSetDECORATE",21,0);
								TensionChargeAmount -= 250;
								if (debugtensioninfo) Console.Printf("Tension [Step 18 - Charge Up P1]: %d", TensionChargeAmount);
							}
						}

					}
				}
				else
				{
					if (TensionChargeLoopTimer > 0) TensionChargeLoopTimer = 0;
					TensionChargeAmount -= 250;
					if (debugtensioninfo) Console.Printf("Tension [Step 18 - Charge Up P1]: %d", TensionChargeAmount);
				}
				// Movement to decrease Tension charge.
				int C3 = 0;
				FreezePlayer = 0;
				if (MenuModeToggle > 0) FreezePlayer += 1;
				if (SleepTimer > 0) FreezePlayer += 1;
				if (FreezePlayer == 0)
				{
					buttons = owner.GetPlayerInput(INPUT_BUTTONS);
					if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) C3 = -500;
					else if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) C3 = -500;
					else if (buttons & BT_JUMP || buttons & BT_CROUCH) C3 = -500;
				}
				if (C3 != 0 && TensionCooldownTimer < 7000 && FreezePlayer == 0)
				{
					if (AllowTension > 0) // Tension is Enabled
					{
						TensionCooldownTimer = 7000; // 1 Sec
						TensionMaxCooldownTimer = TensionCooldownTimer;
					}
				}
				TensionChargeAmount += C3;
				if (debugtensioninfo) Console.Printf("Tension [Step 19 - Charge Up Input]: %d, input-change: %d", TensionChargeAmount, C3);
				
				if (TensionCountingDown <= 0 && UsingInGameMenu == 0) TensionWarmupTimer += TensionChargeAmount;
				if (debugtensioninfo) Console.Printf("Tension [Step 20 - Increase Warmup/Charge]:  %d / %d, Charge: %d", TensionWarmupTimer, TensionChargeTimeMax, TensionChargeAmount);

				if (TensionWarmupTimer <= 0) TensionWarmupTimer = 0;
				
				if (TensionWarmupTimer >= TensionChargeTimeMax)
				{
					
					if (random(1,1000) > TensionChargeFailRate)
					{
						TensionCountingDown = 0;
						
						if (TensionLevel == 0) { TensionCooldownTimer = 3500; owner.A_SetBlend("FE 68 FD",0.33,43); }
						else if (TensionLevel == 1) { TensionCooldownTimer = 3720; owner.A_SetBlend("FE 68 FD",0.33,48); }
						else if (TensionLevel == 2) { TensionCooldownTimer = 3940; owner.A_SetBlend("FE 68 FD",0.33,53); }
						else if (TensionLevel == 3) { TensionCooldownTimer = 4380; owner.A_SetBlend("FE 68 FD",0.33,56); }
						else if (TensionLevel == 4) { TensionCooldownTimer = 4810; owner.A_SetBlend("FE 68 FD",0.33,61); }
						else if (TensionLevel == 5) { TensionCooldownTimer = 5250; owner.A_SetBlend("FE 68 FD",0.33,66); }
						else if (TensionLevel == 6) { TensionCooldownTimer = 6560; owner.A_SetBlend("FE 68 FD",0.33,70); }
						TensionCooldownTimer *= 2;
						TensionMaxCooldownTimer = TensionCooldownTimer;
						TensionOverPsycheTimer = 0;
						TensionOverchargeTimer = 0;
						
						if (TensionLevel >= 0 && TensionLevel <= 2) // to 5,20,50
						{
							owner.A_PlaySound("tensionincrease",CHAN_7,1.0,0,ATTN_NORM);
						}
						if (TensionLevel >= 3 && TensionLevel <= 4)  // to 100,250 [Super High Tension]
						{
							owner.A_PlaySound("tensionhigh1",CHAN_7,1.0,0,ATTN_NORM);
							if (CharacterClass == 2 && TensionLevel == 3 && random(1,3) == 1) owner.A_PlaySound("FloraEnterHighTension1",CHAN_VOICE,1.0,0,ATTN_NORM);
							if (CharacterClass == 2 && TensionLevel == 4 && random(1,2) == 1) owner.A_PlaySound("FloraEnterHighTension2",CHAN_VOICE,1.0,0,ATTN_NORM);
						}
						if (TensionLevel == 5) // to 500
						{
							owner.A_PlaySound("tensionhigh2",CHAN_7,1.0,0,ATTN_NORM);
							if (CharacterClass == 2) owner.A_PlaySound("FloraEnterHighTension2",CHAN_VOICE,1.0,0,ATTN_NORM);
						}
						if (TensionLevel == 6) // to 1000
						{
							owner.A_PlaySound("tensionhigh3",CHAN_7,1.0,0,ATTN_NORM);
							if (CharacterClass == 2) owner.A_PlaySound("FloraEnterHighTension3",CHAN_VOICE,1.0,0,ATTN_NORM);
						}
						
						double project_RealZ = (owner.player.viewHeight * 39 / 50) + 8.0;
						string blastwavetype;
						if (TensionLevel == 0) blastwavetype = "PlayerTension5BlastRadius";
						if (TensionLevel == 1) blastwavetype = "PlayerTension20BlastRadius";
						if (TensionLevel == 2) blastwavetype = "PlayerTension50BlastRadius";
						if (TensionLevel == 3) blastwavetype = "PlayerTension100BlastRadius";
						if (TensionLevel == 4) blastwavetype = "PlayerTension250BlastRadius";
						if (TensionLevel == 5) blastwavetype = "PlayerTension500BlastRadius";
						if (TensionLevel == 6) blastwavetype = "PlayerTension1000BlastRadius";
						owner.A_SpawnProjectile(blastwavetype,project_RealZ,0,0,CMF_TRACKOWNER,0);
						if (debugtensioninfo) Console.Printf("Tension [Step 21 - BlastWave SpawnZ]: %8f", project_RealZ);

						TensionLevel += 1;
						
						if (TensionLevel == 1) TensionTimer = 3600;
						if (TensionLevel == 2) TensionTimer = 4320;
						if (TensionLevel == 3) TensionTimer = 5184;
						if (TensionLevel == 4) TensionTimer = 6221;
						if (TensionLevel == 5) TensionTimer = 7465;
						if (TensionLevel == 6) TensionTimer = 8958;
						if (TensionLevel == 7) TensionTimer = 10750;
					}
					else // Psyche Up Fails D:
					{
						TensionCountingDown = 0;
						
						if (AllowTension > 0) // Tension is Enabled
						{
							if (TensionLevel == 0) TensionCooldownTimer = 3500;
							else if (TensionLevel == 1) TensionCooldownTimer = 3720;
							else if (TensionLevel == 2) TensionCooldownTimer = 3940;
							else if (TensionLevel == 3) TensionCooldownTimer = 4380;
							else if (TensionLevel == 4) TensionCooldownTimer = 4810;
							else if (TensionLevel == 5) TensionCooldownTimer = 5250;
							else if (TensionLevel == 6) TensionCooldownTimer = 6560;
							TensionCooldownTimer = TensionCooldownTimer * 3 / 2;
							TensionMaxCooldownTimer = TensionCooldownTimer;
						
							if (TensionLevel < 7)
							{
								owner.A_PlaySound("tensionfailed",CHAN_7,1.0);
							}
						}
						
						if (TensionLevel == 1) TensionTimer = 3600;
						if (TensionLevel == 2) TensionTimer = 4320;
						if (TensionLevel == 3) TensionTimer = 5184;
						if (TensionLevel == 4) TensionTimer = 6221;
						if (TensionLevel == 5) TensionTimer = 7465;
						if (TensionLevel == 6) TensionTimer = 8958;
						if (TensionLevel == 7) TensionTimer = 10750;
					}
					TensionWarmupTimer = 0; // Reset Warmup Timer
				}
			}
			else
			{
				if (TensionLevel > 0) // Level
				{ 
					owner.A_PlaySound("tensionrevert",CHAN_5,1.0,0,ATTN_NORM); TensionLevel = 0; 
				}
				if (TensionLevelLastTic > 0) TensionLevelLastTic = 0; // Compare
				if (TensionTimer > 0) TensionTimer = 0; // Timer
				if (TensionCountingDown != 0) TensionCountingDown = 0; // Timer Counts Down?
				if (TensionWarmupTimer > 0) TensionWarmupTimer = 0;
				if (TensionCooldownTimer > 0) TensionCooldownTimer = 0;
				if (TensionMaxCooldownTimer > 0) TensionMaxCooldownTimer = 0;
				if (TensionChargeLoopTimer > 0) TensionChargeLoopTimer = 0;
				if (TensionActivePulseTimer > 0) TensionActivePulseTimer = 0;
			}

			// Tension Effects
			if (PlayerCurrentHealth > 0)
			{
				if (TensionLevel != 0)
				{
					if (TensionLevel == 1) { pulsevolume = frandom(0.118110236,0.244094488); maxpulseinterval = random(21,23); }
					if (TensionLevel == 2) { pulsevolume = frandom(0.141732283,0.37007874); maxpulseinterval = random(19,21); }
					if (TensionLevel == 3) { pulsevolume = frandom(0.165354331,0.496062992); maxpulseinterval = random(17,19); }
					if (TensionLevel == 4) { pulsevolume = frandom(0.188976378,0.622047244); maxpulseinterval = random(15,17); }
					if (TensionLevel == 5) { pulsevolume = frandom(0.212598425,0.748031496); maxpulseinterval = random(13,15); }
					if (TensionLevel == 6) { pulsevolume = frandom(0.236220472,0.874015748); maxpulseinterval = random(12,14); }
					if (TensionLevel == 7) { pulsevolume = frandom(0.25984252,1.0); maxpulseinterval = random(11,13); }
					maxpulseinterval *= 2;
					if (random(1,4) == 1) randompulseinterval1 = maxpulseinterval * 2; else randompulseinterval1 = random(1,maxpulseinterval);
					if (random(1,4) == 1) randompulseinterval2 = maxpulseinterval * 2; else randompulseinterval2 = random(1,maxpulseinterval);
					if (random(1,4) == 1) randompulseinterval3 = maxpulseinterval * 2; else randompulseinterval3 = random(1,maxpulseinterval);
					if (random(1,4) == 1) randompulseinterval4 = maxpulseinterval * 2; else randompulseinterval4 = random(1,maxpulseinterval);
					TensionActivePulseTimer++; // Increase Charge-Up Sound Loop Timer
					if (debugtensioninfo) Console.Printf("Tension [Step 22 - PulseTimer]: %d", TensionActivePulseTimer);
					
					if (TensionActivePulseTimer == randompulseinterval1 && TensionLevel >= 1)
					{
						owner.A_PlaySound("tensionpulserand",CHAN_5,pulsevolume,0,ATTN_NORM); 
						randompulseinterval1 = random(1,maxpulseinterval);
					}
					if (TensionActivePulseTimer == randompulseinterval2 && TensionLevel >= 3)
					{
						owner.A_PlaySound("tensionpulserand",CHAN_5,pulsevolume,0,ATTN_NORM); 
						randompulseinterval2 = random(1,maxpulseinterval);
					}
					if (TensionActivePulseTimer == randompulseinterval3 && TensionLevel >= 5)
					{
						owner.A_PlaySound("tensionpulserand",CHAN_5,pulsevolume,0,ATTN_NORM); 
						randompulseinterval3 = random(1,maxpulseinterval);
					}
					if (TensionActivePulseTimer == randompulseinterval4 && TensionLevel >= 7)
					{
						owner.A_PlaySound("tensionpulserand",CHAN_5,pulsevolume,0,ATTN_NORM); 
						randompulseinterval4 = random(1,maxpulseinterval);
					}
					if (TensionActivePulseTimer >= maxpulseinterval) TensionActivePulseTimer = 0;
					
					// Background Sound for the humming of tension.
					TensionBackgroundAuraTimer++;
					if (TensionBackgroundAuraTimer == 1)
					{
						owner.A_StopSound(CHAN_6);
						if (TensionLevel == 1) owner.A_PlaySound("tensionaura5",CHAN_6,1.0,0,ATTN_NORM);
						if (TensionLevel == 2) owner.A_PlaySound("tensionaura20",CHAN_6,1.0,0,ATTN_NORM);
						if (TensionLevel == 3) owner.A_PlaySound("tensionaura50",CHAN_6,1.0,0,ATTN_NORM);
						if (TensionLevel == 4) owner.A_PlaySound("tensionaura100",CHAN_6,1.0,0,ATTN_NORM);
						if (TensionLevel == 5) owner.A_PlaySound("tensionaura250",CHAN_6,1.0,0,ATTN_NORM);
						if (TensionLevel == 6) owner.A_PlaySound("tensionaura500",CHAN_6,1.0,0,ATTN_NORM);
						if (TensionLevel == 7) owner.A_PlaySound("tensionaura1000",CHAN_6,1.0,0,ATTN_NORM);
					}
					if (TensionBackgroundAuraTimer >= 68) TensionBackgroundAuraTimer = 0;
					
					int TensionOverchargeDmgFactor;
					int TensionOverchargeDmgBase;
					int TensionOverchargeDmgFinal;
					int TensionOverchargeDmgThreshold = PlayerCurrentHealth / 256;
					if (TensionOverchargeDmgThreshold < 1) TensionOverchargeDmgThreshold = 1;
					if (debugtensioninfo) Console.Printf("Tension [Step 23 - Set Overcharge DMG Threshold]: %d", TensionOverchargeDmgThreshold);
					
					// Overcharge Tracking
					int TensionOCTimer1Amount = 20;
					int TensionOCTimer2Amount = 20;
					if (debugtensioninfo) Console.Printf("Tension [Step 24 - Set Overcharge Increment Amts]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);
					
					if (InvulnerabilityTimer > 0) // Invulnerability stops the Overcharge timers while in effect
					{
						TensionOCTimer1Amount *= 0;
						TensionOCTimer2Amount *= 0;
					}
					if (debugtensioninfo) Console.Printf("Tension [Step 24b - Set Overcharge Increment (Invuln)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (DQOomphTimer > 0) // Oomph Slows it down
					{
						TensionOCTimer1Amount *= 0.75;
						TensionOCTimer2Amount *= 0.75;
					}
					if (debugtensioninfo) Console.Printf("Tension [Step 24c - Set Overcharge Increment (Oomph)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (DQBuffTimer > 0) // Buff Slows it down
					{
						TensionOCTimer1Amount *= 0.75;
						TensionOCTimer2Amount *= 0.75;
					}
					if (debugtensioninfo) Console.Printf("Tension [Step 24d - Set Overcharge Increment (Buff)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (DQAcceleratleTimer > 0) // Accelerate Speeds it up
					{
						TensionOCTimer1Amount *= 1.2;
						TensionOCTimer2Amount *= 1.2;
					}
					if (debugtensioninfo) Console.Printf("Tension [Step 24e - Set Overcharge Increment (Accelerate)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (DQDeceleratleTimer > 0) // Decelerate Slows it down
					{
						TensionOCTimer1Amount *= 0.8;
						TensionOCTimer2Amount *= 0.8;
					}
					if (debugtensioninfo) Console.Printf("Tension [Step 24f - Set Overcharge Increment (Decelerate)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (PoisonedTimer > 0) // Poison Really Speeds it Up
					{
						TensionOCTimer1Amount *= 1.75;
						TensionOCTimer2Amount *= 1.75;
					}
					if (debugtensioninfo) Console.Printf("Tension [Step 24g - Set Overcharge Increment (Poison)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (BerserkTimer > 0) // Berserk Speeds it up
					{
						TensionOCTimer1Amount *= 1.25;
						TensionOCTimer2Amount *= 1.25;
					}
					if (debugtensioninfo) Console.Printf("Tension [Step 24h - Set Overcharge Increment (Berserk)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (TensionCountingDown == 1) // If Tension is draining
					{
						TensionOCTimer1Amount = TensionOCTimer1Amount / 3;
						TensionOCTimer2Amount = TensionOCTimer2Amount / 3;
					}
					if (debugtensioninfo) Console.Printf("Tension [Step 24i - Set OverPsyche/Overcharge Increment (Tension CountDown)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (DivineAvatarTimer == 1) // DivineAvatar
					{
						TensionOCTimer1Amount *= 0.5;
						TensionOCTimer2Amount *= 0.5;
					}
					if (debugtensioninfo) Console.Printf("Tension [Step 24j - Set OverPsyche/Overcharge Increment (Divine Avatar)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					if (GoETimer > 0) // GoE
					{
						TensionOCTimer1Amount *= 0.2;
						TensionOCTimer2Amount *= 0.2;
					}
					if (debugtensioninfo) Console.Printf("Tension [Step 24k - Set OverPsyche/Overcharge Increment (GoE)]: OverPsyche: %d, OverCharge: %d", TensionOCTimer1Amount, TensionOCTimer2Amount);

					// TensionOverCharge Allowed?
					if (TensionOverChargeAllowed > 0)
					{
						if (MenuModeToggle == 0) TensionOverPsycheTimer += TensionOCTimer1Amount; 
					}
					else
					{
						TensionOverPsycheTimer = 0;
					}
					if (debugtensioninfo) Console.Printf("Tension [Step 25 - OverPsyche Increment]: OverPsycheTimer: %d / %d, OverPsyche: %d", TensionOverPsycheTimer, TensionMaxOverPsycheTimer, TensionOCTimer1Amount);
					
					if (TensionOverPsycheTimer >= TensionMaxOverPsycheTimer && TensionOverChargeAllowed > 0)
					{
						TensionOverPsycheTimer = TensionMaxOverPsycheTimer;
						if (TensionOverChargeAllowed > 0) 
						{
							if (MenuModeToggle == 0) TensionOverchargeTimer += TensionOCTimer2Amount;
						}
						else 
						{
							TensionOverchargeTimer = 0;
						}
						if (debugtensioninfo) Console.Printf("Tension [Step 26 - OverCharge Increment]: OverChargeTimer: %d / %d, OverPsyche: %d", TensionOverchargeTimer, TensionMaxOverchargeTimer, TensionOCTimer2Amount);
						
						if (TensionOverchargeTimer >= TensionMaxOverchargeTimer && TensionOverChargeAllowed > 0)
						{
							TensionOverchargeTimer = 0;
							TensionMaxOverchargeTimer = 0;
							TensionOverchargeDmgFactor = random(6,10) * ((6 + ((TensionLevel * 9) / 4)) / 7);
							TensionOverchargeDmgBase = (random(2,3) * TensionOverchargeDmgFactor) / 8;
							if (TensionOverchargeDmgBase < 2 && TensionLevel > 4) TensionOverchargeDmgBase = 2;
							if (GoETimer > 0) TensionOverchargeDmgBase *= 0.2;
							if (TensionOverchargeDmgBase < 1) TensionOverchargeDmgBase = 1;
							TensionOverchargeDmgFinal = PlayerCurrentHealth - TensionOverchargeDmgBase;
							if (TensionOverchargeDmgFinal < TensionOverchargeDmgThreshold) TensionOverchargeDmgFinal = TensionOverchargeDmgThreshold;
							if (TensionOverchargeDmgFinal > TensionOverchargeDmgThreshold)
							{
								if (InvulnerabilityTimer == 0) // If not Invulnerable
								{
									if (CharacterClass == 2 && random(1,5) == 1) ACS_NamedExecuteAlways("FloraPainScreams",0,0,0,0);
									if (CharacterClass == 8 && random(1,5) == 1) ACS_NamedExecuteAlways("AilishPainScreams",0,0,0,0);
									if (CharacterClass == 9 && random(1,5) == 1) ACS_NamedExecuteAlways("PetraPainScreams",0,0,0,0);
									owner.health = TensionOverchargeDmgFinal;
									PlayerCurrentHealth = owner.health;
								}
							}
						}
					}
					else
					{
						TensionOverchargeTimer = 0;
					}
					
					int tensiontimerdecrease;
					if (TensionCountingDown != 0 && TensionTimer >= 0)
					{
						tensiontimerdecrease = 20;
						if (debugtensioninfo) Console.Printf("Tension [Step 27 - TensionDecrease Increment]: %d", tensiontimerdecrease);

						tensiontimerdecrease = tensiontimerdecrease * dvds_tension_countdownmultiplier / 100;
						if (debugtensioninfo) Console.Printf("Tension [Step 27b - TensionDecrease Multiplier]: %d, Multiplier: %d%", tensiontimerdecrease, dvds_tension_countdownmultiplier);

						if (dvds_musou_powertripmode == 1) tensiontimerdecrease = tensiontimerdecrease / 5; // 'Power Trip' mode cheat
						if (dvds_musou_powertripmode == 2) tensiontimerdecrease = tensiontimerdecrease / 10; // 'Power Trip' mode cheat
						if (debugtensioninfo) Console.Printf("Tension [Step 27c - TensionDecrease - Power Trip]: %d", tensiontimerdecrease);

						if (owner.CountInv("MartArtsMaster1") > 0) tensiontimerdecrease = (tensiontimerdecrease * random(800,900)) / 1000;
						if (owner.CountInv("MartArtsMaster2") > 0) tensiontimerdecrease = (tensiontimerdecrease * random(400,600)) / 1000;
						if (debugtensioninfo) Console.Printf("Tension [Step 27d - TensionDecrease - MartArts Mastery]: %d", tensiontimerdecrease);

						PerkFactor = 10000 - ((PsycheFastPerkLevel * 250) + (PsycheFastEXPerkLevel * 625));
						tensiontimerdecrease = (tensiontimerdecrease * PerkFactor) / 10000;
						if (debugtensioninfo) Console.Printf("Tension [Step 27e - TensionDecrease - PsycheFast]: %d, PerkFactor: %d / 10000", tensiontimerdecrease, PerkFactor);

						If (UsingInGameMenu == 0) TensionTimer -= tensiontimerdecrease;
						if (debugtensioninfo) Console.Printf("Tension [Step 28 - TensionDecrease - Decrement]: %d, Decrease: %d", TensionTimer, tensiontimerdecrease);
					}
					
					if (TensionTimer <= 0) 
					{
						if (AllowTension > 0) // Tension is Enabled
						{
							if (TensionLevel == 1) TensionCooldownTimer = 14000; // Cooldown Timer set to 4 seconds
							if (TensionLevel == 2) TensionCooldownTimer = 14880; // Cooldown Timer set to 4.25 seconds
							if (TensionLevel == 3) TensionCooldownTimer = 15750; // Cooldown Timer set to 4.5 seconds
							if (TensionLevel == 4) TensionCooldownTimer = 17500; // Cooldown Timer set to 5 seconds
							if (TensionLevel == 5) TensionCooldownTimer = 19250; // Cooldown Timer set to 5.5 seconds
							if (TensionLevel == 6) TensionCooldownTimer = 21000; // Cooldown Timer set to 6 seconds
							if (TensionLevel == 7) TensionCooldownTimer = 26250; // Cooldown Timer set to 7.5 seconds
							TensionCooldownTimer *= 2;
							TensionMaxCooldownTimer = TensionCooldownTimer;
						}
					
						TensionWarmupTimer = 0; // Warmup Timer
						TensionCountingDown = 0; // Tension Timer
						TensionLevel = 0; // Tension Level
						TensionBackgroundAuraTimer = 0; // Tension Aura-Sound Timer
						owner.A_StopSound(CHAN_5);
						owner.A_StopSound(CHAN_6);
						owner.A_StopSound(CHAN_7);
						owner.A_PlaySound("tensionrevert",CHAN_5,1.0,0,ATTN_NORM);
					}
				}
				
				if (AllowTension > 0) // Tension is Enabled
				{
					if (TensionLevel < 0) TensionLevel = 0;
					if (TensionLevel > 7) TensionLevel = 7;
				}
				else
				{
					if (TensionLevel != 0) { TensionLevel = 0; owner.A_PlaySound("tensionrevert",CHAN_5,1.0,0,ATTN_NORM); }
					if (TensionTimer != 0) TensionTimer = 0; // Timer
					if (TensionCountingDown != 0) TensionCountingDown = 0; // Timer Counts Down?
					if (TensionWarmupTimer != 0) TensionWarmupTimer = 0;
					if (TensionCooldownTimer != 0) TensionCooldownTimer = 0;
					if (dvds_tension_chargemultiplier != 0) TensionChargeLoopTimer = 0;
					if (TensionMaxCooldownTimer != 0) TensionActivePulseTimer = 0;   
				}
	
				if (TensionLevel >= 4) { owner.A_GiveInventory("TensionTrail", 1); } else { owner.A_TakeInventory("TensionTrail", 9999); } // Tension is "100" or higher
			}
			// Tension Aura Actor Control

			CallACS("MiscVarSetDECORATE",181,TensionLevel);
			CallACS("MiscVarSetDECORATE",182,TensionLevelLastTic);
			CallACS("MiscVarSetDECORATE",183,TensionTimer);
			CallACS("MiscVarSetDECORATE",184,TensionCountingDown);
			CallACS("MiscVarSetDECORATE",185,TensionWarmupTimer);
			CallACS("MiscVarSetDECORATE",186,TensionCooldownTimer);
			CallACS("MiscVarSetDECORATE",188,TensionMaxCooldownTimer);
			CallACS("MiscVarSetDECORATE",189,TensionChargeLoopTimer);
			CallACS("MiscVarSetDECORATE",190,TensionActivePulseTimer);
			CallACS("MiscVarSetDECORATE",246,TensionBackgroundAuraTimer);
			CallACS("MiscVarSetDECORATE",250,TensionOverPsycheTimer);
			CallACS("MiscVarSetDECORATE",251,TensionOverchargeTimer);
			CallACS("MiscVarSetDECORATE",261,TensionMaxOverchargeTimer);
			CallACS("MiscVarSetDECORATE",262,TensionMaxOverPsycheTimer);
		}
		
		
		
		
		
		//*************************************
		//*Blacken Screen if Blinded or Asleep*
		//*************************************
		if (playeractor)
		{
			if (BlindTimer > 0) owner.A_SetBlend("00 00 00",0.975,3);
			if (SleepTimer > 0) owner.A_SetBlend("00 00 00",0.9875,3);
		}
		
		
		
		
		
		//*******************
		//*Whistle Countdown*
		//*******************
		if (playeractor && PlayerCurrentHealth > 0 && CallACS("MiscVarCheckDECORATE",168) > 0) CallACS("MiscVarSetDECORATE",168,-1,1);
		
		
		
		
		
		//**************************************************************************************************************
		//*DQ-Style Seed System [DROPPED Versions only, naturally added Seeds/etc do not get despawned via this system]*
		//**************************************************************************************************************
		if (playeractor)
		{
			int SeedLimit = CallACS("MiscVarCheckDECORATE",29);
			// for the Seed limit amount [to be used in more than one script]
			if (TrueGameSkill <= SKILL_VERY_EASY) SeedLimit = 128;
			if (TrueGameSkill == SKILL_EASY) SeedLimit = 120;
			if (TrueGameSkill == SKILL_NORMAL) SeedLimit = 112;
			if (TrueGameSkill == SKILL_HARD) SeedLimit = 104;
			if (TrueGameSkill == SKILL_VERY_HARD) SeedLimit = 96;
			if (TrueGameSkill == SKILL_EXTREME) SeedLimit = 88;
			if (TrueGameSkill == SKILL_HORRIBLE) SeedLimit = 80;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) SeedLimit = 72;
			if (TrueGameSkill >= SKILL_OMEGA) SeedLimit = 64;
			if (ModType == 0) SeedLimit *= 4; // 4x the usual limits on Classic Doom 1/2 / Heretic / Hexen / Strife
			CallACS("MiscVarSetDECORATE",29,SeedLimit);
			
			int SeedLimit2 = CallACS("MiscVarCheckDECORATE",28);
			// for the Seed of Skill limit amount [to be used in more than one script]
			if (TrueGameSkill <= SKILL_VERY_EASY) SeedLimit2 = 32;
			if (TrueGameSkill == SKILL_EASY) SeedLimit2 = 30;
			if (TrueGameSkill == SKILL_NORMAL) SeedLimit2 = 28;
			if (TrueGameSkill == SKILL_HARD) SeedLimit2 = 26;
			if (TrueGameSkill == SKILL_VERY_HARD) SeedLimit2 = 24;
			if (TrueGameSkill == SKILL_EXTREME) SeedLimit2 = 22;
			if (TrueGameSkill == SKILL_HORRIBLE) SeedLimit2 = 20;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) SeedLimit2 = 16;
			if (TrueGameSkill >= SKILL_OMEGA) SeedLimit2 = 14;
			if (ModType == 0) SeedLimit2 *= 4; // 4x the usual limits on Classic Doom 1/2 / Heretic / Hexen / Strife
			CallACS("MiscVarSetDECORATE",28,SeedLimit2);
			
			int FyggLimit = CallACS("MiscVarCheckDECORATE",26);
			// for the Fygg limit amount [to be used in more than one script]
			if (TrueGameSkill <= SKILL_VERY_EASY) FyggLimit = 3;
			if (TrueGameSkill == SKILL_EASY) FyggLimit = 3;
			if (TrueGameSkill == SKILL_NORMAL) FyggLimit = 3;
			if (TrueGameSkill == SKILL_HARD) FyggLimit = 2;
			if (TrueGameSkill == SKILL_VERY_HARD) FyggLimit = 2;
			if (TrueGameSkill == SKILL_EXTREME) FyggLimit = 2;
			if (TrueGameSkill == SKILL_HORRIBLE) FyggLimit = 1;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) FyggLimit = 1;
			if (TrueGameSkill >= SKILL_OMEGA) FyggLimit = 1;
			if (ModType == 0) FyggLimit *= 4; // 4x the usual limits on Classic Doom 1/2 / Heretic / Hexen / Strife
			CallACS("MiscVarSetDECORATE",26,FyggLimit);
		}
		
		
		
		
		
		//**************************
		//*Character Checks Misc #1*
		//**************************
		if (playeractor)
		{
			if (CharacterClass == 0) { if (Owner.CountInv("DeggarisInPlay") < 1) Owner.A_GiveInventory("DeggarisInPlay",1); } else Owner.A_TakeInventory("DeggarisInPlay",1);
			if (CharacterClass == 1) { if (Owner.CountInv("IlluciaInPlay") < 1) Owner.A_GiveInventory("IlluciaInPlay",1); } else Owner.A_TakeInventory("IlluciaInPlay",1);
			if (CharacterClass == 2) { if (Owner.CountInv("FloraInPlay") < 1) Owner.A_GiveInventory("FloraInPlay",1); } else Owner.A_TakeInventory("FloraInPlay",1);
			if (CharacterClass == 8) { if (Owner.CountInv("AilishInPlay") < 1) Owner.A_GiveInventory("AilishInPlay",1); } else Owner.A_TakeInventory("AilishInPlay",1);
			if (CharacterClass == 9) { if (Owner.CountInv("PetraInPlay") < 1) Owner.A_GiveInventory("PetraInPlay",1); } else Owner.A_TakeInventory("PetraInPlay",1);
			
			if (CharacterClass == 2)
			{
				// Slot 1
				if (Owner.CountInv("Chainsaw") > 0) Owner.A_TakeInventory("Chainsaw", 1);
				if (Owner.CountInv("Chainsaw2") > 0) Owner.A_TakeInventory("Chainsaw2", 1);
				// Slot 2
				if (Owner.CountInv("FloraLearnedPistols") == 0)
				{
					if (Owner.CountInv("Pistol") > 0) Owner.A_TakeInventory("Pistol", 1);
					if (Owner.CountInv("Pistol2") > 0) Owner.A_TakeInventory("Pistol2", 1);
				}
				// Slot 3
				if (Owner.CountInv("Shotgun") > 0) Owner.A_TakeInventory("Shotgun", 1);
				if (Owner.CountInv("Shotgun2") > 0) Owner.A_TakeInventory("Shotgun2", 1);
				// Slot 4
				if (Owner.CountInv("Chaingun") > 0) Owner.A_TakeInventory("Chaingun", 1);
				if (Owner.CountInv("Chaingun2") > 0) Owner.A_TakeInventory("Chaingun2", 1);
				// Slot 5
				if (Owner.CountInv("RocketLauncher") > 0) Owner.A_TakeInventory("RocketLauncher", 1);
				if (Owner.CountInv("RocketLauncher2") > 0) Owner.A_TakeInventory("RocketLauncher2", 1);
				// Slot 6
				if (Owner.CountInv("PlasmaRifle") > 0) Owner.A_TakeInventory("PlasmaRifle", 1);
				if (Owner.CountInv("PlasmaRifle2") > 0) Owner.A_TakeInventory("PlasmaRifle2", 1);
				if (Owner.CountInv("Railgun2") > 0) Owner.A_TakeInventory("Railgun2", 1);
				if (Owner.CountInv("Repeater2") > 0) Owner.A_TakeInventory("Repeater2", 1);
				if (Owner.CountInv("Karasawa2") > 0) Owner.A_TakeInventory("Karasawa2", 1);
				// Slot 7
				if (Owner.CountInv("BFG9000") > 0) Owner.A_TakeInventory("BFG9000", 1);
				if (Owner.CountInv("BFG90002") > 0) Owner.A_TakeInventory("BFG90002", 1);
			}
			else
			{
				// Slot 1
				if (Owner.CountInv("SceptreOfEmpyrea") > 0) Owner.A_TakeInventory("SceptreOfEmpyrea", 1);
				if (Owner.CountInv("DoubleBladedChainsaw") > 0 && Owner.CountInv("Chainsaw2")) Owner.A_TakeInventory("Chainsaw2", 1);
				// Slot 3
				if (Owner.CountInv("DiarisLongbow") > 0) Owner.A_TakeInventory("DiarisLongbow", 1);
				// Slot 4
				if (Owner.CountInv("ImpClaw") > 0) Owner.A_TakeInventory("ImpClaw", 1);
				if (Owner.CountInv("DarkImpClaw") > 0) Owner.A_TakeInventory("DarkImpClaw", 1);
				if (Owner.CountInv("CacodemonEye") > 0) Owner.A_TakeInventory("CacodemonEye", 1);
				if (Owner.CountInv("CacolanternEye") > 0) Owner.A_TakeInventory("CacolanternEye", 1);
				if (Owner.CountInv("AbaddonEye") > 0) Owner.A_TakeInventory("AbaddonEye", 1);
				// Slot 5
				if (Owner.CountInv("KnightFist") > 0) Owner.A_TakeInventory("KnightFist", 1);
				if (Owner.CountInv("BaronFist") > 0) Owner.A_TakeInventory("BaronFist", 1);
				if (Owner.CountInv("BelphegorFist") > 0) Owner.A_TakeInventory("BelphegorFist", 1);
				if (Owner.CountInv("BruiserFist") > 0) Owner.A_TakeInventory("BruiserFist", 1);
				if (Owner.CountInv("ArchonFist") > 0) Owner.A_TakeInventory("ArchonFist", 1);
				if (Owner.CountInv("PyroFist") > 0) Owner.A_TakeInventory("PyroFist", 1);
				// Slot 6
				if (Owner.CountInv("IncarnateSkull") > 0) Owner.A_TakeInventory("IncarnateSkull", 1);
				if (Owner.CountInv("ArchvileHand") > 0) Owner.A_TakeInventory("ArchvileHand", 1);
				if (Owner.CountInv("DiabloistHand") > 0) Owner.A_TakeInventory("DiabloistHand", 1);
				if (Owner.CountInv("BalrogFist") > 0) Owner.A_TakeInventory("BalrogFist", 1);
			}
		}
		
		
		
		
		
		//***********************
		//*Check for Magic Focus*
		//***********************
		int FocusDrain;
		CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		if (playeractor)
		{
			FreezePlayer = 0;
			if (MenuModeToggle > 0) FreezePlayer += 1;
			if (FatigueTimer > 0 && random(1,5) > 2) FreezePlayer += 1;
			if (SleepTimer > 0) FreezePlayer += 1;
			if (SilenceTimer > 0 && random(1,5) > 2) FreezePlayer += 1;
			buttons = owner.GetPlayerInput(INPUT_BUTTONS);
			//Console.Printf("    \cnFocusing [Step 0 - Input]: %d\c-", buttons);
			if (buttons & BT_ZOOM && buttons & BT_SPEED && CurrentStamina >= FocusDrain && FreezePlayer == 0)
			{
				if (random(1,25) == 1) FocusDrain = (random(1,2) * 4);
													else FocusDrain = (random(4,8) * 5);
				if (StrifeStaminaLevel > 0) FocusDrain = FocusDrain * (100 - (StrifeStaminaLevel * 3)) / 100;
				if (Owner.CountInv("FalconKnifeEarrings") > 0) FocusDrain = FocusDrain * 9 / 10;
				//Console.Printf("    \cnFocusing [Step 1 - Base Drain]: %d\c-", FocusDrain);
				
				if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0)
				{
					previousdelaycount = CurrentStamina;
					CurrentStamina -= FocusDrain;
					if (CurrentStamina < 0) CurrentStamina = 0;
					CallACS("MiscVarSetDECORATE",21,CurrentStamina);
					//Console.Printf("    \cnFocusing [Step 2 - Reduce Stamina]: Current: %d\c-, Previous: %d, DrainAmt: %d", CurrentStamina, previousdelaycount, FocusDrain);
				
					CallACS("MiscVarSetDECORATE",212,1); // "Focus" on
					CallACS("MiscVarSetDECORATE",231,1,1); // Increment Focus Timer

					// Focus Generator
					if (FocusTimer == 1)
					{
						owner.A_SpawnItemEx("FocusParticleSource",0,0,0,0.0,0.0,0.0,0,SXF_SETMASTER);
					}
				}
				else
				{
					CallACS("MiscVarSetDECORATE",212,0); // "Focus" off
					CallACS("MiscVarSetDECORATE",231,0);
					owner.A_RemoveChildren(true,RMVF_MISC,"FocusParticleSource");
				}
			}
			else
			{
				CallACS("MiscVarSetDECORATE",212,0); // "Focus" off
				CallACS("MiscVarSetDECORATE",231,0);
				owner.A_RemoveChildren(true,RMVF_MISC,"FocusParticleSource");
			}
			if (IsFocusOn > 0) // Focusing
			{
				if (PlayerCurrentHealth > 0) owner.A_SetBlend("00 00 30", 0.9375, 1);
			}
		}
		
		
		
		
		
		//************************************************************************
		//**Ruinous Shield Degeneration Effect [will NOT kill the player though]**
		//************************************************************************
		int DegenMinimumHPFactor = 10; 
		int DegenMinimumManaFactor = 80;
		int DegenMinimumHP;
		int DegenMinimumMana;
		int CursedShieldDegenInterval;
		int DegenValue, CurseEffectRand;
		if (playeractor)
		{
			// Determines how low HP/MP can degenerate to when the Ruinous Shield is equipped. [used as Divisors]
			if (TrueGameSkill <= SKILL_VERY_EASY) { DegenMinimumHPFactor = 8; DegenMinimumManaFactor = 64; }
			if (TrueGameSkill == SKILL_EASY) { DegenMinimumHPFactor = 9; DegenMinimumManaFactor = 72; }
			if (TrueGameSkill == SKILL_NORMAL) { DegenMinimumHPFactor = 10; DegenMinimumManaFactor = 80; }
			if (TrueGameSkill == SKILL_HARD) { DegenMinimumHPFactor = 11; DegenMinimumManaFactor = 88; }
			if (TrueGameSkill == SKILL_VERY_HARD) { DegenMinimumHPFactor = 12; DegenMinimumManaFactor = 96; }
			if (TrueGameSkill == SKILL_EXTREME) { DegenMinimumHPFactor = 13; DegenMinimumManaFactor = 104; }
			if (TrueGameSkill == SKILL_HORRIBLE) { DegenMinimumHPFactor = 14; DegenMinimumManaFactor = 112; }
			if (TrueGameSkill == SKILL_IMPOSSIBLE) { DegenMinimumHPFactor = 15; DegenMinimumManaFactor = 120; }
			if (TrueGameSkill >= SKILL_OMEGA) { DegenMinimumHPFactor = 16; DegenMinimumManaFactor = 128; }
			DegenMinimumHPFactor = DegenMinimumHPFactor * 3 / 4;
			DegenMinimumManaFactor = DegenMinimumManaFactor * 3 / 4;
			DegenMinimumHP = PlayerMaxHP / DegenMinimumHPFactor;
			DegenMinimumMana = PlayerMaxMP / DegenMinimumManaFactor;
			if (debugcursedmg) Console.Printf("    \cnCurse Degeneration [Step 1 - Base Divisors]: HP %d, MP: %d\c-, LowHP: %d, LowMP: %d", DegenMinimumHPFactor, DegenMinimumManaFactor, DegenMinimumHP, DegenMinimumMana);
			
			if (Owner.CountInv("RuinousShield") > 0)
			{
				// Set Curse Degeneration Intervals
				CursedShieldDegenInterval = 5;
				FreezePlayer = 0;
				if (MenuModeToggle > 0) FreezePlayer += 1;
				if (SleepTimer > 0) FreezePlayer += 1;
				if (FreezePlayer == 0)
				{
					if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) CursedShieldDegenInterval = CursedShieldDegenInterval * 6 / 5;
					if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) CursedShieldDegenInterval = CursedShieldDegenInterval * random(6,7) / 5;
					if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) CursedShieldDegenInterval = CursedShieldDegenInterval * 7 / 5;
					if (buttons & BT_JUMP) CursedShieldDegenInterval = CursedShieldDegenInterval * 6 / 5;
					if (buttons & BT_CROUCH) CursedShieldDegenInterval = CursedShieldDegenInterval * 2 / 5;
				}
				if (random(1,16) == 1) CursedShieldDegenInterval *= 2;
				if (debugcursedmg) Console.Printf("    \cnCurse Degeneration [Step 2 - Base Degen Intervals (\cyInput: %d\cn)]: Interval: %d, Frozen?: %d", buttons, CursedShieldDegenInterval, FreezePlayer);
				
				// Checks Armor Items and other types for Degen speed.
				SkillFactor = 200;
				if (CharacterClass == 2)
				{
					if (Owner.CountInv("PearlyCorset") > 0) SkillFactor -= 20;
					if (Owner.CountInv("EvenstarNecklace") > 0) SkillFactor -= 10;
					if (Owner.CountInv("AnubisCufflinks") > 0) SkillFactor -= 15;
					if (Owner.CountInv("BalrogRing") > 0) SkillFactor -= 25;
					// total of -34 = 66% speed with all four items
				}
				CursedShieldDegenInterval = CursedShieldDegenInterval * SkillFactor / 200;
				if (debugcursedmg) Console.Printf("    \cnCurse Degeneration [Step 3 - Degen Intervals (Post-Armor)]: %d, Factor: %d / 200", CursedShieldDegenInterval, SkillFactor);
				
				// Final Degen Interval
				if (UsingInGameMenu != 0) CursedShieldDegenInterval = 0;
				if (debugcursedmg) Console.Printf("    \cnCurse Degeneration [Step 4 - Degen Intervals (MenuCheck)]: %d", CursedShieldDegenInterval);

				RuinousShieldDegenTimer += CursedShieldDegenInterval;
				// Curse Effect Execution
				if (debugcursedmg) Console.Printf("    \cnCurse Degeneration [Step 5 - Degen Intervals Timer]: %d / %d", RuinousShieldDegenTimer, CursedShieldDegenTimer);
				if (RuinousShieldDegenTimer >= CursedShieldDegenTimer)
				{
					PlayerCurrentHealth = owner.health;
					if (PlayerCurrentHealth > DegenMinimumHP)
					{
						// HP Degeneration
						PlayerMaxHP = CallACS("StatCheck",1);
						CurseEffectRand = random(1,8);
						switch(CurseEffectRand)
						{
							case 1: DegenValue = PlayerMaxHP / 67; break;
							case 2: case 3: DegenValue = PlayerMaxHP / 133; break;
							case 4: case 5: DegenValue = PlayerMaxHP / 200; break;
							case 6: case 7: DegenValue = PlayerMaxHP / 266; break;
							case 8: DegenValue = PlayerMaxHP / 334; break;
						}
				
						if (DegenValue < 1) DegenValue = 1;
						PlayerCurrentHealth -= DegenValue;
						if (PlayerCurrentHealth < DegenMinimumHP) PlayerCurrentHealth = DegenMinimumHP;

						owner.health = PlayerCurrentHealth;
						CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
						CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);
						if (debugcursedmg) Console.Printf("    \cnCurse Degeneration [Step 6a - HP Degen]: %d", DegenValue);
					}
				
					PlayerCurrentMP = CallACS("StatCheck",14);
					if (PlayerCurrentMP > DegenMinimumMana)
					{
						// MP Degeneration
						PlayerMaxMP = CallACS("StatCheck",2);
						CurseEffectRand = random(1,8);
						switch(CurseEffectRand)
						{
							case 1: DegenValue = PlayerMaxMP / 67; break;
							case 2: case 3: DegenValue = PlayerMaxMP / 133; break;
							case 4: case 5: DegenValue = PlayerMaxMP / 200; break;
							case 6: case 7: DegenValue = PlayerMaxMP / 266; break;
							case 8: DegenValue = PlayerMaxMP / 334; break;
						}
					
						if (DegenValue < 1) DegenValue = 1;
						PlayerCurrentMP -= DegenValue;
						if (PlayerCurrentMP < DegenMinimumMana) PlayerCurrentMP = DegenMinimumMana;

						CallACS("OtherVarSetDECORATE",2,PlayerCurrentMP);
						CallACS("MiscVarSetDECORATE",243,PlayerCurrentMP);
						CallACS("MiscVarSetDECORATE",238,PlayerCurrentMP);
						if (debugcursedmg) Console.Printf("    \cnCurse Degeneration [Step 6b - MP Degen]: %d", DegenValue);
					}
				
					RuinousShieldDegenTimer = 0;
					CursedShieldDegenTimer = 175 + random(-10,10);
				}
			}
			else
			{
				CurseEffectRand = 0;
				DegenValue = 0;
				RuinousShieldDegenTimer = 0;
				CursedShieldDegenTimer = 175 + random(-10,10);
			}
		}
		
		
		
		
		
		//***************************
		//** Divine Avatar HP Regen**
		//***************************
		int DivineRegenAmount;
		if (playeractor)
		{
			if (PlayerCurrentHealth > 0 && DivineAvatarTimer > 0)
			{
				delaycount = 20;
				if (debugregenhealth && PlayerCurrentHealth < MaxHealthLimit) Console.Printf("    \caDivineAvatar HP Regen [Step 1 - Base Interval Delay]: %d\c-", delaycount);
				
				if (GoETimer > 0) delaycount *= 5;
				if (debugregenhealth && PlayerCurrentHealth < MaxHealthLimit) Console.Printf("    \caDivineAvatar HP Regen [Step 1b - Interval Delay (GoE)]: %d\c-", delaycount);
				
				DivineRegenTimer += delaycount;
				if (debugregenhealth && PlayerCurrentHealth < MaxHealthLimit) Console.Printf("    \caDivineAvatar HP Regen [Step 2 - Increment Count]: %d / %d\c-, DelayCount: %d", DivineRegenTimer, DivineRegenInterval, delaycount);

				if (PlayerCurrentHealth > 0 && DivineRegenTimer >= DivineRegenInterval)
				{
					DivineRegenAmount = MaxHealthLimit / random(67,100);
					if (debugregenhealth && PlayerCurrentHealth < MaxHealthLimit) Console.Printf("    \caDivineAvatar HP Regen [Step R1 - Base Regen Amount]: %d\c-", DivineRegenAmount);

					previousdelaycount = DivineRegenAmount;
					if (CharacterClass == 0 && Owner.CountInv("SauronGauntletsItem") > 0) DivineRegenAmount = DivineRegenAmount * 17 / 16;
					if (CharacterClass == 1 && Owner.CountInv("SauronGauntletsItem") > 0) DivineRegenAmount = DivineRegenAmount * 17 / 16;
					if (CharacterClass == 2 && Owner.CountInv("SauronGauntletsItem") > 0) DivineRegenAmount = DivineRegenAmount * 17 / 16;
					if (CharacterClass == 8 && Owner.CountInv("SauronGauntletsItem") > 0) DivineRegenAmount = DivineRegenAmount * 17 / 16;
					if (CharacterClass == 9 && Owner.CountInv("SauronGauntletsItem") > 0) DivineRegenAmount = DivineRegenAmount * 17 / 16;
					if (debugregenhealth && PlayerCurrentHealth < MaxHealthLimit) Console.Printf("    \caDivineAvatar HP Regen [Step R2 - Regen Amount (Gauntlets)]: %d\c-, Previous: %d", DivineRegenAmount, previousdelaycount);

					previousdelaycount = DivineRegenAmount;
					if (Owner.CountInv("TheOneRing") > 0) DivineRegenAmount = DivineRegenAmount * 9 / 8;
					if (debugregenhealth && PlayerCurrentHealth < MaxHealthLimit) Console.Printf("    \caDivineAvatar HP Regen [Step R3 - Regen Amount (The One Ring)]: %d\c-, Previous: %d", DivineRegenAmount, previousdelaycount);

					PlayerCurrentHealth = owner.health;
					if (PlayerCurrentHealth < MaxHealthLimit)
					{
						PlayerCurrentHealth += DivineRegenAmount;
						if (PlayerCurrentHealth >= MaxHealthLimit) PlayerCurrentHealth = MaxHealthLimit;
						owner.health = PlayerCurrentHealth;
						CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
						CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);
					}
					DivineRegenTimer = 0;
					DivineRegenInterval = random(30,35) * 20;
				}
			}
			else
			{
				DivineRegenTimer = 0;
				DivineRegenInterval = random(30,35) * 20;
			}
		}
		
		
		
		
		
		//***************************
		//** Dove's Ribbon HP Regen**
		//***************************
		int DoveRegenAmount;
		if (playeractor)
		{
			if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) // Flora
			{
				delaycount = 20;
				if (debugregenhealth && PlayerCurrentHealth < MaxHealthLimit) Console.Printf("    \caDoveRibbon HP Regen [Step 1 - Base Interval Delay]: %d\c-", delaycount);
				
				if (GoETimer > 0) delaycount *= 5;
				if (debugregenhealth && PlayerCurrentHealth < MaxHealthLimit) Console.Printf("    \caDoveRibbon HP Regen [Step 1b - Interval Delay (GoE)]: %d\c-", delaycount);
				
				DoveRegenTimer += delaycount;
				if (debugregenhealth && PlayerCurrentHealth < MaxHealthLimit) Console.Printf("    \caDoveRibbon HP Regen [Step 2 - Increment Count]: %d / %d\c-, DelayCount: %d", DoveRegenTimer, DivineRegenInterval, delaycount);
	
				if (DoveRegenTimer >= DoveRegenInterval)
				{
					DoveRegenAmount = PlayerLevel / 50 + 1;
					if (debugregenhealth && PlayerCurrentHealth < MaxHealthLimit) Console.Printf("    \caDoveRibbon HP Regen [Step R1 - Base Regen Amount]: %d\c-", DoveRegenAmount);

					PlayerCurrentHealth = owner.health;
					if (PlayerCurrentHealth < MaxHealthLimit)
					{
						PlayerCurrentHealth += DoveRegenAmount;
						if (PlayerCurrentHealth >= MaxHealthLimit) PlayerCurrentHealth = MaxHealthLimit;
						owner.health = PlayerCurrentHealth;
						CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
						CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);
					}
					DoveRegenTimer = 0;
					DoveRegenInterval = random(27,32) * 20;
				}
			}
			else
			{
				DoveRegenTimer = 0;
				DoveRegenInterval = random(27,32) * 20;
			}
		}
		
		
		
		
		//****************
		//**Health Regen**
		//****************
		int RegenMaxHealth;
		int StamUpgradeDelay;
		int StaminaInputFactor;
		int HPRegenAmount;
		int HPDegenAmount;
		HPDelayInterval = 140;
		if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
		if (playeractor)
		{
			// Base Character Interval Max
			if (CharacterClass == 0) HPDelayInterval = 118; // Deggaris Regenerates the second Fastest [3.54 seconds]
			if (CharacterClass == 1) HPDelayInterval = 140; // Illucia has an even speed of Regeneration [4 seconds]
			if (CharacterClass == 2) HPDelayInterval = 162; // Flora Regenerates slower than Illucia [4.46 seconds]
			if (CharacterClass == 8) HPDelayInterval = 175; // Ailish Regenerates the slowest [5 seconds]
			if (CharacterClass == 9) HPDelayInterval = 81; // Petra Regenerates the fastest [2.314285714 seconds]
			if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 1 - Base Interval Delay]: %d\c-", HPDelayInterval);
			
			// Level Check [Interval Delay]
			previousdelaycount = HPDelayInterval;
			if (TrueGameSkill <= SKILL_VERY_EASY) HPDelayInterval -= 6;
			if (TrueGameSkill == SKILL_EASY) HPDelayInterval -= 2;
			if (TrueGameSkill == SKILL_NORMAL) HPDelayInterval += 0;
			if (TrueGameSkill == SKILL_HARD) HPDelayInterval += 2;
			if (TrueGameSkill == SKILL_VERY_HARD) HPDelayInterval += 6;
			if (TrueGameSkill == SKILL_EXTREME) HPDelayInterval += 8;
			if (TrueGameSkill == SKILL_HORRIBLE) HPDelayInterval += 12;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) HPDelayInterval += 14;
			if (TrueGameSkill >= SKILL_OMEGA) HPDelayInterval += 16;
			if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 2 - Interval Delay (Difficulty)]: %d\c-, Previous: %d", HPDelayInterval, previousdelaycount);
			
			previousdelaycount = HPDelayInterval;
			HPDelayInterval -= (PlayerLevel / 7); 
			if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 3 - Interval Delay (PlayerLevel)]: %d\c-, Previous: %d", HPDelayInterval, previousdelaycount);
			
			previousdelaycount = HPDelayInterval;
			HPDelayInterval *= 20;
			if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 4 - Interval Delay (Final Calc)]: %d\c-, Previous: %d", HPDelayInterval, previousdelaycount);
			
			PlayerCurrentHealth = owner.health;
			if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
			if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 5 - Check Max Health Cap (Dove?)]: %d\c-, Current Health: %d", RegenMaxHealth, PlayerCurrentHealth);
			
			// Base Delay Count
			SkillFactor = 0;
			delaycount = 20;
			if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 6 - Get Base RegenTimer Increment]: %d\c-", delaycount);
			
			// Character Delay Count
			SkillFactor = 0;
			if (CharacterClass == 0) SkillFactor = (PlayerDEF / 8); // 8pts of Defense will decrease regen wait by 1 tic each [Deggaris]
			if (CharacterClass == 1) SkillFactor = (PlayerDEF / 10); // 10pts of Defense will decrease regen wait by 1 tic each [Illucia]
			if (CharacterClass == 2) SkillFactor = (PlayerDEF / 12); // 12pts of Defense will decrease regen wait by 1 tic each [Flora]
			if (CharacterClass == 8) SkillFactor = (PlayerDEF / 12); // 12pts of Defense will decrease regen wait by 1 tic each [Ailish]
			if (CharacterClass == 9) SkillFactor = (PlayerDEF / 6); // 6pts of Defense will decrease regen wait by 1 tic each [Petra]
			delaycount += SkillFactor;
			if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 7 - Get Character RegenTimer Increment]: %d\c-, Added: %d", delaycount, SkillFactor);
			
			// Stamina Upgrades [Strife]
			SkillFactor = (StrifeStaminaLevel * 4) / 3;
			delaycount += SkillFactor;
			if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 8 - Get Strife Stamina RegenTimer Inc]: %d\c-, Added: %d", delaycount, SkillFactor);
			
			// Accelerates HP Regen when Tension is Boosted
			SkillFactor = 20;
			if (TensionLevel >= 1) SkillFactor += 1; // "5" = +1 [+5%]
			if (TensionLevel >= 2) SkillFactor += 1; // "20" = +2 [+10%]
			if (TensionLevel >= 3) SkillFactor += 2; // "50" = +4 [+20%]
			if (TensionLevel >= 4) SkillFactor += 2; // "100" = +6 [+30%]
			if (TensionLevel >= 5) SkillFactor += 3; // "250" = +9 [+45%]
			if (TensionLevel >= 6) SkillFactor += 4; // "500" = +13 [+65%]
			if (TensionLevel >= 7) SkillFactor += 5; // "500" = +18 [+90%]
			delaycount = (delaycount * SkillFactor) / 20;
			if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 9 - Get Tension RegenTimer Inc]: %d\c-, Multiplier: %d / 20", delaycount, SkillFactor);
			
			// Focusing will slightly accelerate HP regeneration on Strife Mode
			SkillFactor = 0;
			if (IsFocusOn > 0 && StrifeStaminaLevel > 0)
			{
				if (FocusTimer >= 105 && StrifeStaminaLevel >= 1) SkillFactor += (StrifeStaminaLevel * 1) / 5;
				if (FocusTimer >= 210 && StrifeStaminaLevel >= 1) SkillFactor += (StrifeStaminaLevel * 1) / 5;
				if (FocusTimer >= 315 && StrifeStaminaLevel >= 2) SkillFactor += (StrifeStaminaLevel * 2) / 5;
				if (FocusTimer >= 420 && StrifeStaminaLevel >= 2) SkillFactor += (StrifeStaminaLevel * 2) / 5;
				if (FocusTimer >= 525 && StrifeStaminaLevel >= 3) SkillFactor += (StrifeStaminaLevel * 3) / 5;
				if (FocusTimer >= 630 && StrifeStaminaLevel >= 3) SkillFactor += (StrifeStaminaLevel * 3) / 5;
				if (FocusTimer >= 735 && StrifeStaminaLevel >= 4) SkillFactor += (StrifeStaminaLevel * 4) / 5;
				if (FocusTimer >= 840 && StrifeStaminaLevel >= 4) SkillFactor += (StrifeStaminaLevel * 4) / 5;
				if (FocusTimer >= 945 && StrifeStaminaLevel >= 5) SkillFactor += (StrifeStaminaLevel * 5) / 5;
				if (FocusTimer >= 1050 && StrifeStaminaLevel >= 5) SkillFactor += (StrifeStaminaLevel * 5) / 5;
				if (FocusTimer >= 1155 && StrifeStaminaLevel >= 6) SkillFactor += (StrifeStaminaLevel * 6) / 5;
				if (FocusTimer >= 1260 && StrifeStaminaLevel >= 6) SkillFactor += (StrifeStaminaLevel * 6) / 5;
				if (FocusTimer >= 1365 && StrifeStaminaLevel >= 7) SkillFactor += (StrifeStaminaLevel * 7) / 5;
				if (FocusTimer >= 1470 && StrifeStaminaLevel >= 7) SkillFactor += (StrifeStaminaLevel * 7) / 5;
				if (FocusTimer >= 1575 && StrifeStaminaLevel >= 8) SkillFactor += (StrifeStaminaLevel * 8) / 5;
				if (FocusTimer >= 1680 && StrifeStaminaLevel >= 8) SkillFactor += (StrifeStaminaLevel * 8) / 5;
				if (FocusTimer >= 1785 && StrifeStaminaLevel >= 9) SkillFactor += (StrifeStaminaLevel * 9) / 5;
				if (FocusTimer >= 1890 && StrifeStaminaLevel >= 9) SkillFactor += (StrifeStaminaLevel * 9) / 5;
				if (FocusTimer >= 1995 && StrifeStaminaLevel >= 10) SkillFactor += (StrifeStaminaLevel * 10) / 5;
				if (FocusTimer >= 2100 && StrifeStaminaLevel >= 10) SkillFactor += (StrifeStaminaLevel * 10) / 5;
			}
			delaycount += SkillFactor;
			if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 10 - Get Focus/StrifeStam RegenTimer Inc]: %d\c-, Added: %d, FocusTimer: %d", delaycount, SkillFactor, FocusTimer);
			
			// Check Musou Power Trip Mode
			SkillFactor = delaycount;
			if (dvds_musou_powertripmode == 1) delaycount = (delaycount * 5) / 2; // 250%
			if (dvds_musou_powertripmode == 2) delaycount = delaycount * 5; // 500%
			if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 11 - Get Power Trip Inc]: %d\c-, Previous: %d", delaycount, SkillFactor);

			// Check Movement Inputs
			SkillFactor = delaycount;
			StaminaInputFactor = 100;
			if (PlayerCurrentHealth < RegenMaxHealth)
			{
				FreezePlayer = 0;
				if (MenuModeToggle > 0) FreezePlayer += 1;
				if (SleepTimer > 0) FreezePlayer += 1;
				if (FreezePlayer == 0)
				{
					if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) StaminaInputFactor = StaminaInputFactor * 40 / 100;
					if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) StaminaInputFactor = StaminaInputFactor * 50 / 100;
					if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) StaminaInputFactor = StaminaInputFactor * 60 / 100;
					if (buttons & BT_JUMP) StaminaInputFactor = StaminaInputFactor * 40 / 100;
					if (buttons & BT_CROUCH) StaminaInputFactor = StaminaInputFactor * 180 / 100;
				}
				delaycount = (delaycount * StaminaInputFactor) / 100;
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 12 - Regen Intervals (\cyInput: %d\cn)]: Interval: %d\c-, Previous: %d, InputFactor: %d / 100, Frozen?: %d", buttons, delaycount, SkillFactor, StaminaInputFactor, FreezePlayer);
				
				// Checks Armor Items and other types for regen speed.
				SkillFactor = delaycount;
				int ArmorFactor = 100;
				if (CharacterClass == 2)
				{
					if (Owner.CountInv("PearlyCorset") > 0) ArmorFactor += 20;
					if (Owner.CountInv("EvenstarNecklace") > 0) ArmorFactor += 10;
					if (Owner.CountInv("AnubisCufflinks") > 0) ArmorFactor += 15;
					if (Owner.CountInv("BalrogRing") > 0) ArmorFactor += 25;
					// total of 70 = 170% speed with all four items
				}
				delaycount = (delaycount * ArmorFactor) / 100;
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 13 - Regen Intervals (Armor)]: Interval: %d\c-, Previous: %d, ArmorFactor: %d / 100", delaycount, SkillFactor, ArmorFactor);
				
				// Divine Avatar = 200% Total Regeneration Speed
				SkillFactor = delaycount;
				if (DivineAvatarTimer > 0) delaycount *= 2;
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 14 - Regen Intervals (Divine Avatar)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// GoE = 500% Total Regeneration Speed
				SkillFactor = delaycount;
				if (GoETimer > 0) delaycount *= 5;
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 14b - Regen Intervals (GoE)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				SkillFactor = delaycount;
				if (DQAcceleratleTimer > 0) delaycount *= 1.2; // Acceleratle = 120% regen speed
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 15a - Regen Intervals (Acceleratle)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);

				SkillFactor = delaycount;
				if (DQDeceleratleTimer > 0) delaycount *= 0.8; // Deceleratle = 80% regen speed
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 15b - Regen Intervals (Deceleratle)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// Poison = random 0.25/0.375.0.5/0.625/0.75x regen speed
				SkillFactor = delaycount;
				if (PoisonedTimer > 0) delaycount = (delaycount * random(2,6)) / 8;
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 16 - Regen Intervals (Poison)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// Fatigue = 0.2x regen speed
				SkillFactor = delaycount;
				if (FatigueTimer > 0) delaycount *= 0.2;
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 17 - Regen Intervals (Fatigue)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// Sleep = x5 regen speed
				SkillFactor = delaycount;
				PerkFactor = 10000;
				if (SleepTimer > 0)
				{
					delaycount *= 5;
					PerkFactor = ((RegenHPFastPerkLevel * 2000) + (RegenHPFastEXPerkLevel * 5000)) + 10000;
					delaycount = delaycount * PerkFactor / 10000; // "RegenHPFast" and "RegenHPFast EX" perks.
				}
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 18 - Regen Intervals (Sleep)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 10000", delaycount, SkillFactor, PerkFactor);
				
				// Flora's Regeneration Speed is reduced by 5/8s [62.5%] when holding the Ruinous Shield [curse effect]
				SkillFactor = delaycount;
				if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0) delaycount *= 0.375;
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 19 - Regen Intervals (Ruinous Shield)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// RegenHPFast perks
				SkillFactor = delaycount;
				PerkFactor = 10;
				if (RegenHPFastPerkLevel > 0)
				{
					PerkFactor = ((RegenHPFastPerkLevel * 2) + (RegenHPFastEXPerkLevel * 5)) + 10;
					delaycount = delaycount * PerkFactor / 10; // "RegenHPFast" and "RegenHPFast EX" perks.
				}
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 20 - Regen Intervals (Regen HP Fast)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 10", delaycount, SkillFactor, PerkFactor);
				
				// "Cleared of Mind" Perks
				SkillFactor = delaycount;
				PerkFactor = 80;
				if (ClearedOfMindParkLevel > 0)
				{
					perkfactor = ((ClearedOfMindParkLevel * 2) + (ClearedOfMindEXParkLevel * 5)) + 80;
					delaycount = delaycount * perkfactor / 80;
				}
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 21 - Regen Intervals (Cleared of Mind)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 80", delaycount, SkillFactor, PerkFactor);
				
				// If Defending via Fists
				SkillFactor = delaycount;
				PerkFactor = 20;
				if (Owner.CountInv("FistPlayerBlockItem") > 0) PerkFactor = random(28,32);
				delaycount = (delaycount * PerkFactor) / 20;
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 22 - Regen Intervals (Fist - Defend)]: Interval: %d\c-, Previous: %d, Factor: %d / 20", delaycount, SkillFactor, PerkFactor);
				
				// Checks Health Regen Rate Menu Option
				SkillFactor = delaycount;
				delaycount = delaycount * dvds_healthregenmultiplier / 100;
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 23 - Regen Intervals (Menu Option)]: Interval: %d\c-, Previous: %d, Multiplier: %d / 100", delaycount, SkillFactor, dvds_healthregenmultiplier);
				
				// Low Cap to 1 Tics
				SkillFactor = delaycount;
				if (delaycount < 1) delaycount = 1;
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 24 - Regen Intervals (LOWCap)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				if (UsingInGameMenu != 0) delaycount = 0; // If using In-Game Menus
				if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious"
				{
					HPRegenTimer += delaycount;
				}
			}
			else 
			{
				// Reset the Timer
				HPRegenTimer = 0 - random(-20,20); // HPDelayInterval + random(-20,20);
			}
			if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step 25 - Regen Intervals (Timers)]: HPRegenTimer %d / %d", HPRegenTimer, HPDelayInterval);

			if (HPRegenTimer >= HPDelayInterval)
			{
				// Base of 1 HP regen
				HPRegenAmount = 1;
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step R1 - Regen Amount (Base)]: %d", HPRegenAmount);

				// Every 50 Levels = +1 HP Regen
				SkillFactor = HPRegenAmount;
				HPRegenAmount += (PlayerLevel / 50);
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step R2 - Regen Amount (PlayerLevel)]: %d\c-, Previous: %d", HPRegenAmount, SkillFactor);

				// Every 15 Pts of Strength = +1 HP Regen
				SkillFactor = HPRegenAmount;
				HPRegenAmount += (PlayerSTR / 15);
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step R3 - Regen Amount (PlayerSTR)]: %d\c-, Previous: %d", HPRegenAmount, SkillFactor);

				// Makes having the Dove Ribbon allow HP Regen up to 200% maximum
				if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
				if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step R4 - Check Max Health Cap (Dove?)]: %d\c-, Current Health: %d", RegenMaxHealth, PlayerCurrentHealth);

				// Set Health [uptick]
				if (PlayerCurrentHealth > 0)
				{
					PlayerCurrentHealth += HPRegenAmount;
					if (PlayerCurrentHealth > RegenMaxHealth) PlayerCurrentHealth = RegenMaxHealth;
					owner.health = PlayerCurrentHealth;
					CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
					CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);
					if (debugregenhealth && PlayerCurrentHealth < RegenMaxHealth) Console.Printf("    \caHP Regen [Step R5 - Increment HP]: %d, Current Health: %d / %d", HPRegenAmount, PlayerCurrentHealth, PlayerMaxHP);
				}

				// Reset the Timer
				HPRegenTimer = 0 - random(-20,20); // HPDelayInterval + random(-20,20);
			}
		}
		//****************
		//**Health Degen**
		//****************
		if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
		if (playeractor && dvds_healthdegenmode == 1)
		{
			// Base Character Interval Max
			if (CharacterClass == 0) HPDelayInterval2 = 41; // Deggaris Degenerates the Slowest [1.17 seconds]
			if (CharacterClass == 1) HPDelayInterval2 = 35; // Illucia has an even speed of Degeneration [1 second]
			if (CharacterClass == 2) HPDelayInterval2 = 29; // Flora Degenerates the second fastest [0.83 seconds]
			if (CharacterClass == 8) HPDelayInterval2 = 25; // Ailish Degenerates the fastest
			if (CharacterClass == 9) HPDelayInterval2 = 52; // Petra Degenerates even slower than Deggaris
			if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 1 - Base Interval Delay]: %d\c-", HPDelayInterval2);
			
			// Level Check [Interval Delay]
			previousdelaycount = HPDelayInterval2;
			if (TrueGameSkill <= SKILL_VERY_EASY) HPDelayInterval2 += 3;
			if (TrueGameSkill == SKILL_EASY) HPDelayInterval2 += 1;
			if (TrueGameSkill == SKILL_NORMAL) HPDelayInterval2 += 0;
			if (TrueGameSkill == SKILL_HARD) HPDelayInterval2 -= 1;
			if (TrueGameSkill == SKILL_VERY_HARD) HPDelayInterval2 -= 3;
			if (TrueGameSkill == SKILL_EXTREME) HPDelayInterval2 -= 4;
			if (TrueGameSkill == SKILL_HORRIBLE) HPDelayInterval2 -= 6;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) HPDelayInterval2 -= 7;
			if (TrueGameSkill >= SKILL_OMEGA) HPDelayInterval2 -= 8;
			if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 2 - Interval Delay (Difficulty)]: %d\c-, Previous: %d", HPDelayInterval2, previousdelaycount);
			
			// Level
			previousdelaycount = HPDelayInterval2;
			SkillFactor = (PlayerLevel / 14); // up to +14
			HPDelayInterval2 += SkillFactor; 
			if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 3 - Interval Delay (PlayerLevel)]: %d\c-, Previous: %d", HPDelayInterval2, previousdelaycount);

			// Final Interval Calc
			previousdelaycount = HPDelayInterval2;
			HPDelayInterval2 *= 20;
			if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 4 - Interval Delay (Final Calc)]: %d\c-, Previous: %d", HPDelayInterval2, previousdelaycount);

			// Dove Ribbon Health Limit Check
			PlayerCurrentHealth = owner.health;
			if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
			if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 5 - Check Max Health Cap (Dove?)]: %d\c-, Current Health: %d", RegenMaxHealth, PlayerCurrentHealth);

			// Base Delay Count
			SkillFactor = 0;
			delaycount = 20;
			if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 6 - Get Base RegenTimer Increment]: %d\c-", delaycount);
			
			// Character Delay Count
			SkillFactor = 0;
			if (CharacterClass == 0) SkillFactor = (PlayerDEF / 16); // 16pts of Defense will increase degen wait by 1 tic each [Deggaris]
			if (CharacterClass == 1) SkillFactor = (PlayerDEF / 20); // 20pts of Defense will increase degen wait by 1 tic each [Illucia]
			if (CharacterClass == 2) SkillFactor = (PlayerDEF / 24); // 24pts of Defense will increase degen wait by 1 tic each [Flora]
			if (CharacterClass == 8) SkillFactor = (PlayerDEF / 24); // 24pts of Defense will increase degen wait by 1 tic each [Ailish]
			if (CharacterClass == 9) SkillFactor = (PlayerDEF / 12); // 12pts of Defense will increase degen wait by 1 tic each [Petra]
			delaycount -= SkillFactor;
			if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 7 - Get Character RegenTimer Increment]: %d\c-, Added: %d", delaycount, SkillFactor);
			
			// Stamina Upgrades [Strife]
			SkillFactor = (StrifeStaminaLevel * 3) / 4;
			delaycount += SkillFactor;
			if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 8 - Get Strife Stamina RegenTimer Inc]: %d\c-, Added: %d", delaycount, SkillFactor);

			// Accelerates HP Regen when Tension is Boosted
			SkillFactor = 20;
			if (TensionLevel >= 1) SkillFactor -= 0; // "5" = -0 [-0%]
			if (TensionLevel >= 2) SkillFactor -= 1; // "20" = -1 [-5%]
			if (TensionLevel >= 3) SkillFactor -= 1; // "50" = -2 [-10%]
			if (TensionLevel >= 4) SkillFactor -= 1; // "100" = -3 [-15%]
			if (TensionLevel >= 5) SkillFactor -= 1; // "250" = -4 [-20%]
			if (TensionLevel >= 6) SkillFactor -= 2; // "500" = -6 [-30%]
			if (TensionLevel >= 7) SkillFactor -= 3; // "500" = -9 [-45%]
			delaycount = (delaycount * SkillFactor) / 20;
			if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 9 - Get Tension RegenTimer Inc]: %d\c-, Multiplier: %d / 20", delaycount, SkillFactor);
			
			// Check Musou Power Trip Mode
			SkillFactor = delaycount;
			if (dvds_musou_powertripmode == 1) delaycount = (delaycount * 2) / 5; // 40%
			if (dvds_musou_powertripmode == 2) delaycount = delaycount / 5; // 20%
			if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 10 - Get Power Trip Inc]: %d\c-, Previous: %d", delaycount, SkillFactor);

			// Check Movement Inputs
			SkillFactor = delaycount;
			StaminaInputFactor = 100;
			if (PlayerCurrentHealth > RegenMaxHealth)
			{
				FreezePlayer = 0;
				if (MenuModeToggle > 0) FreezePlayer += 1;
				if (SleepTimer > 0) FreezePlayer += 1;
				if (FreezePlayer == 0)
				{
					if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) StaminaInputFactor = StaminaInputFactor * 100 / 40;
					if (buttons & BT_ATTACK || buttons & BT_ALTATTACK) StaminaInputFactor = StaminaInputFactor * 100 / 50;
					if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) StaminaInputFactor = StaminaInputFactor * 100 / 60;
					if (buttons & BT_JUMP) StaminaInputFactor = StaminaInputFactor * 100 / 40;
					if (buttons & BT_CROUCH) StaminaInputFactor = StaminaInputFactor * 100 / 180;
				}
				delaycount = (delaycount * StaminaInputFactor) / 100;
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 11 - Degen Intervals (\cyInput: %d\ca)]: Interval: %d\c-, Previous: %d, InputFactor: %d / 100, Frozen?: %d", buttons, delaycount, SkillFactor, StaminaInputFactor, FreezePlayer);
				
				// Checks Armor Items and other types for regen speed.
				SkillFactor = delaycount;
				int ArmorFactor = 200;
				if (CharacterClass == 2)
				{
					if (Owner.CountInv("PearlyCorset") > 0) ArmorFactor -= 20;
					if (Owner.CountInv("EvenstarNecklace") > 0) ArmorFactor -= 10;
					if (Owner.CountInv("AnubisCufflinks") > 0) ArmorFactor -= 15;
					if (Owner.CountInv("BalrogRing") > 0) ArmorFactor -= 25;
					// total of 70 = 170% speed with all four items
				}
				delaycount = (delaycount * ArmorFactor) / 200;
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 12 - Degen Intervals (Armor)]: Interval: %d\c-, Previous: %d, ArmorFactor: %d / 200", delaycount, SkillFactor, ArmorFactor);
				
				// Divine Avatar = 62.5% Total Degeneration Speed
				SkillFactor = delaycount;
				if (DivineAvatarTimer > 0) delaycount *= 0.625;
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Regen [Step 13 - Degen Intervals (Divine Avatar)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// GoE = 25% Total Degeneration Speed
				SkillFactor = delaycount;
				if (GoETimer > 0) delaycount *= 0.25;
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Regen [Step 13b - Degen Intervals (GoE)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				SkillFactor = delaycount;
				if (DQAcceleratleTimer > 0) delaycount *= 1.2; // Acceleratle = 120% degen speed
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Regen [Step 14a - Degen Intervals (Acceleratle)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);

				SkillFactor = delaycount;
				if (DQDeceleratleTimer > 0) delaycount *= 0.8; // Deceleratle = 80% degen speed
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 14b - Degen Intervals (Deceleratle)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// Poison = random 4.0/2.666~/2/1.6/1.333~x degen speed
				SkillFactor = delaycount;
				if (PoisonedTimer > 0) delaycount = (delaycount * 8) / random(2,6);
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 15 - Degen Intervals (Poison)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// Fatigue = 0.2x regen speed
				SkillFactor = delaycount;
				if (FatigueTimer > 0) delaycount *= 5;
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 16 - Degen Intervals (Fatigue)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// Sleep = x0.2 degen speed
				SkillFactor = delaycount;
				PerkFactor = 10000;
				if (SleepTimer > 0)
				{
					delaycount /= 5;
					PerkFactor = 10000 - ((RegenHPFastPerkLevel * 2000) + (RegenHPFastEXPerkLevel * 5000));
					delaycount = delaycount * PerkFactor / 10000; // "RegenHPFast" and "RegenHPFast EX" perks.
				}
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 17 - Degen Intervals (Sleep)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 10000", delaycount, SkillFactor, PerkFactor);
				
				// Flora's Degeneration Speed is multiplied by 2.667 when holding the Ruinous Shield [curse effect]
				SkillFactor = delaycount;
				if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0) delaycount = delaycount * 8 / 3;
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 18 - Degen Intervals (Ruinous Shield)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);
				
				// RegenHPFast perks
				SkillFactor = delaycount;
				PerkFactor = 10;
				if (RegenHPFastPerkLevel > 0)
				{
					PerkFactor = 10 - ((RegenHPFastPerkLevel * 2) + (RegenHPFastEXPerkLevel * 5));
					delaycount = delaycount * PerkFactor / 10; // "RegenHPFast" and "RegenHPFast EX" perks.
				}
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Regen [Step 19 - Degen Intervals (Regen HP Fast)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 10", delaycount, SkillFactor, PerkFactor);
				
				// "Cleared of Mind" Perks
				SkillFactor = delaycount;
				PerkFactor = 80;
				if (ClearedOfMindParkLevel > 0)
				{
					perkfactor = 80 - ((ClearedOfMindParkLevel * 2) + (ClearedOfMindEXParkLevel * 5));
					delaycount = delaycount * perkfactor / 80;
				}
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 20 - Degen Intervals (Cleared of Mind)]: Interval: %d\c-, Previous: %d, PerkFactor: %d / 80", delaycount, SkillFactor, PerkFactor);
				
				// If Defending via Fists
				SkillFactor = delaycount;
				PerkFactor = 20;
				if (Owner.CountInv("FistPlayerBlockItem") > 0) PerkFactor = random(28,32);
				delaycount = (delaycount * 20) / PerkFactor;
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 21 - Degen Intervals (Fist - Defend)]: Interval: %d\c-, Previous: %d, Factor: 20 / %d", delaycount, SkillFactor, PerkFactor);
				
				// Checks Health Regen Rate Menu Option
				SkillFactor = delaycount;
				delaycount = delaycount * dvds_healthdegenmultiplier / 100;
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 22 - Degen Intervals (Menu Option)]: Interval: %d\c-, Previous: %d, Multiplier: %d / 100", delaycount, SkillFactor, dvds_healthdegenmultiplier);
				
				// Low Cap to 1 Tics
				SkillFactor = delaycount;
				if (delaycount < 1) delaycount = 1;
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 23 - Degen Intervals (LOWCap)]: Interval: %d\c-, Previous: %d", delaycount, SkillFactor);

				if (UsingInGameMenu != 0) delaycount = 0; // If using In-Game Menus
				if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious"
				{
					HPDegenTimer += delaycount;
				}
			}
			else 
			{
				// Reset the Timer
				HPDegenTimer = 0 - random(-20,20); // HPDelayInterval2 + random(-20,20);
			}
			if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step 24 - Degen Intervals (Timers)]: HPDegenTimer %d / %d", HPDegenTimer, HPDelayInterval2);

			if (HPDegenTimer >= HPDelayInterval2)
			{
				// Base of 1 HP Degen
				HPDegenAmount = 1;
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Regen [Step D1 - Degen Amount (Base)]: %d", HPDegenAmount);

				// Makes having the Dove Ribbon allow HP Regen up to 200% maximum
				if (CharacterClass == 2 && Owner.CountInv("DoveRibbon") > 0) RegenMaxHealth = MaxHealthLimit; else RegenMaxHealth = PlayerMaxHP;
				if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step D2 - Check Max Health Cap (Dove?)]: %d\c-, Current Health: %d", RegenMaxHealth, PlayerCurrentHealth);

				// Set Health [uptick]
				if (PlayerCurrentHealth > 0)
				{
					PlayerCurrentHealth -= HPDegenAmount;
					if (PlayerCurrentHealth < RegenMaxHealth) PlayerCurrentHealth = RegenMaxHealth;
					owner.health = PlayerCurrentHealth;
					CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
					CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);
					if (debugregenhealth && PlayerCurrentHealth > RegenMaxHealth) Console.Printf("    \caHP Degen [Step D3 - Decrement HP]: %d, Current Health: %d / %d", HPDegenAmount, PlayerCurrentHealth, PlayerMaxHP);
				}

				// Reset the Timer
				HPDegenTimer = 0 - random(-20,20); // HPDelayInterval2 + random(-20,20);
			}
		}
		
		
		
		
		
		//****************
		//*POISON AILMENT*
		//****************
		int PoisonIncrement;
		int PoisonHealth;
		int PoisonHealthThreshold;
		int PoisonDmg;
		int PoisonFlashColor;
		if (playeractor)
		{
			// Base Max Increment
			PoisonMaxInterval = 12;
			PoisonMaxInterval += (PlayerDEF / 8);
			PoisonMaxInterval += (PlayerSTR / 16);
			PoisonMaxInterval *= 20;
			if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 1 - Max Interval Base]: %d\c-, DEF: %d, STR: %d", PoisonMaxInterval, PlayerDEF, PlayerSTR);

			// Difficulty Level
			previousdelaycount = PoisonMaxInterval;
			if (TrueGameSkill <= SKILL_VERY_EASY) PoisonMaxInterval = PoisonMaxInterval * 22 / 20;
			if (TrueGameSkill == SKILL_EASY) PoisonMaxInterval = PoisonMaxInterval * 21 / 20;
			if (TrueGameSkill == SKILL_NORMAL) PoisonMaxInterval = PoisonMaxInterval * 20 / 20;
			if (TrueGameSkill == SKILL_HARD) PoisonMaxInterval = PoisonMaxInterval * 19 / 20;
			if (TrueGameSkill == SKILL_VERY_HARD) PoisonMaxInterval = PoisonMaxInterval * 18 / 20;
			if (TrueGameSkill == SKILL_EXTREME) PoisonMaxInterval = PoisonMaxInterval * 17 / 20;
			if (TrueGameSkill == SKILL_HORRIBLE) PoisonMaxInterval = PoisonMaxInterval * 16 / 20;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) PoisonMaxInterval = PoisonMaxInterval * 15 / 20;
			if (TrueGameSkill >= SKILL_OMEGA) PoisonMaxInterval = PoisonMaxInterval * 14 / 20;
			if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 2 - Max Interval (Difficulty)]: %d\c-, Previous: %d", PoisonMaxInterval, previousdelaycount);

			// Check for Poison [-Invuln]
			if (PoisonedTimer > 0 && InvulnerabilityTimer == 0) // Being invulnerable will prevent poison damage from occuring.
			{
				// Base Increment
				PoisonIncrement = 20;
				if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 3 - Count Interval Base]: %d\c-", PoisonIncrement);
		
				// Input Alterations
				previousdelaycount = PoisonIncrement;
				SkillFactor = 100;
				if (MenuModeToggle > 0) FreezePlayer += 1;
				if (SleepTimer > 0) FreezePlayer += 1;
				if (FreezePlayer == 0)
				{
					if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) SkillFactor = SkillFactor * 125 / 100;
					if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) SkillFactor = SkillFactor * random(112,113) / 100;
					if (buttons & BT_JUMP) SkillFactor = SkillFactor * 125 / 100;
					if (buttons & BT_CROUCH) SkillFactor = SkillFactor * 75 / 100;
					PoisonIncrement = PoisonIncrement * SkillFactor / 100;
				}
				if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 4 - Count Interval (\cyInput: %d\cu)]: %d\c-, Previous: %d, InputFactor: %d / 100, Frozen?: %d", buttons, PoisonIncrement, previousdelaycount, SkillFactor, FreezePlayer);
		
				// Check Characters & Armor
				previousdelaycount = PoisonIncrement;
				if (CharacterClass == 2)
				{
					SkillFactor = 1000;
					if (Owner.CountInv("PearlyCorset") > 0) SkillFactor -= 83;
					if (Owner.CountInv("DoveRibbon") > 0) SkillFactor -= 334;
					if (Owner.CountInv("DivineShield") > 0) SkillFactor -= 83;
					PoisonIncrement = PoisonIncrement * SkillFactor / 1000;
					if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 4 - Count Interval (Armor, Flora)]: %d\c-, Previous: %d, InputFactor: %d / 1000", PoisonIncrement, previousdelaycount, SkillFactor);
				}
				else
				if (CharacterClass == 0 || CharacterClass == 1)
				{
					SkillFactor = 100;
					if (Owner.CountInv("DSGreenArmorClass") > 0) SkillFactor -= 2; // (-2% for Green Armor)
					if (Owner.CountInv("DSBlueArmorClass") > 0) SkillFactor -= 4; // (-4% for Blue Armor)
					if (Owner.CountInv("DSStoneArmorClass1") > 0) SkillFactor -= 5; // (-5% for Stone Armor 1)
					if (Owner.CountInv("DSDiamondArmorClass1") > 0) SkillFactor -= 7; // (-7% for Diamond Armor 1)
					if (Owner.CountInv("DSStoneArmorClass2") > 0) SkillFactor -= 6; // (-6% for Stone Armor 2)
					if (Owner.CountInv("DSDiamondArmorClass2") > 0) SkillFactor -= 8; // (-8% for Diamond Armor 2)
					PoisonIncrement = PoisonIncrement * SkillFactor / 100;
					if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 4 - Count Interval (Armor, Marines)]: %d\c-, Previous: %d, InputFactor: %d / 100", PoisonIncrement, previousdelaycount, SkillFactor);
				}
				
				// Buffs
				previousdelaycount = PoisonIncrement;
				if (DQAcceleratleTimer > 0) PoisonIncrement = PoisonIncrement * 6 / 5; // Acceleratle = 120% Speed
				if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 5a - Count Interval (Acceleratle)]: %d\c-, Previous: %d", PoisonIncrement, previousdelaycount);

				previousdelaycount = PoisonIncrement;
				if (DQDeceleratleTimer > 0) PoisonIncrement = PoisonIncrement * 4 / 5; // Deceleratle = 80% Speed
				if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 5b - Count Interval (Deceleratle)]: %d\c-, Previous: %d", PoisonIncrement, previousdelaycount);

				previousdelaycount = PoisonIncrement;
				if (FatigueTimer > 0) PoisonIncrement = PoisonIncrement * 9 / 5; // Fatigue = 180% Speed
				if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 6 - Count Interval (Fatigue)]: %d\c-, Previous: %d", PoisonIncrement, previousdelaycount);
				
				previousdelaycount = PoisonIncrement;
				if (SleepTimer > 0) PoisonIncrement = PoisonIncrement * 1 / 5; // Sleep = 20% Speed
				if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 7 - Count Interval (Sleep)]: %d\c-, Previous: %d", PoisonIncrement, previousdelaycount);

				PoisonTimer += PoisonIncrement;
				if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 8 - Timer]: %d / %d\c-, Increment: %d", PoisonTimer, PoisonMaxInterval, PoisonIncrement);

				// Poison Damage
				if (PoisonTimer >= PoisonMaxInterval)
				{
					PoisonTimer = 0;

					PoisonHealth = PlayerCurrentHealth;
					PoisonHealthThreshold = PlayerMaxHP / 50;
					if (PoisonHealthThreshold < 2) PoisonHealthThreshold = 2;
					if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 9 - Get Poison LowCap]: %d\c-, Health: %d", PoisonHealthThreshold, PoisonHealth);
					if (PoisonHealth > PoisonHealthThreshold)
					{
						PoisonDmg = PlayerMaxHP / 200;
						if (PoisonDmg < 1) PoisonDmg = 1;
						if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 10 - Base Poison Dmg]: %d\c-", PoisonDmg);

						previousdelaycount = PoisonDmg;
						if (random(1,8) == 8)
						{
							if (random(1,8) == 8) PoisonDmg *= 3; else PoisonDmg *= 2;
						}
						if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 11 - Random 2/3x Multi]: %d\c-, Previous: %d", PoisonDmg, previousdelaycount);
						
						// Flash Screen and Deal damage
						int PoisonFlash = random(1,5);
						string PoisonFlashClr = "00 DF 00";
						if (PoisonFlash == 1) PoisonFlashClr = "00 BF 00";
						if (PoisonFlash == 2) PoisonFlashClr = "00 CF 00";
						if (PoisonFlash == 3) PoisonFlashClr = "00 DF 00";
						if (PoisonFlash == 4) PoisonFlashClr = "00 EF 00";
						if (PoisonFlash == 5) PoisonFlashClr = "00 FF 00";
						owner.A_SetBlend(PoisonFlashClr,0.125,17);
						PoisonHealth -= PoisonDmg;
						if (PoisonHealth < PoisonHealthThreshold) PoisonHealth = PoisonHealthThreshold;
						owner.health = PoisonHealth; PlayerCurrentHealth = owner.health;
						if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 12 - Deal Damage]: Health %d\c-, Damage Dealt: %d", PoisonHealth, PoisonDmg);
						
						// Pain Sounds
						PoisonHits++;
						if (debugpoisoninfo) Console.Printf("    \cuPoison Damage [Step 13 - Hit Count], Hits: %d", PoisonHits);
						if (PoisonHits >= 3)
						{
							PoisonHits = 0;
							if (random(1,16) == 16)
							{
								if (debugpoisoninfo) Console.Printf("    \cyPoison Damage [Step 14 - Play Voice]", PoisonHits);
								owner.A_StopSound(CHAN_VOICE);
								if (CharacterClass == 9)
								{
									if (HealthRatio >= 667) owner.A_PlaySound("PetraPainSet1",CHAN_VOICE,1.0,0,ATTN_NORM); 
									if (HealthRatio >= 334 && HealthRatio <= 666) owner.A_PlaySound("PetraPainSet2",CHAN_VOICE,1.0,0,ATTN_NORM);
									if (HealthRatio <= 333 && PoisonHealth > 0) owner.A_PlaySound("PetraPainSet3",CHAN_VOICE,1.0,0,ATTN_NORM);
								}
								else
								if (CharacterClass == 8)
								{
									if (HealthRatio >= 667) owner.A_PlaySound("AilishPainSet1",CHAN_VOICE,1.0,0,ATTN_NORM); 
									if (HealthRatio >= 334 && HealthRatio <= 666) owner.A_PlaySound("AilishPainSet2",CHAN_VOICE,1.0,0,ATTN_NORM);
									if (HealthRatio <= 333 && PoisonHealth > 0) owner.A_PlaySound("AilishPainSet3",CHAN_VOICE,1.0,0,ATTN_NORM);
								}
								else
								if (CharacterClass == 2)
								{
									if (HealthRatio >= 667) owner.A_PlaySound("FloraPainSet1",CHAN_VOICE,1.0,0,ATTN_NORM); 
									if (HealthRatio >= 334 && HealthRatio <= 666) owner.A_PlaySound("FloraPainSet2",CHAN_VOICE,1.0,0,ATTN_NORM);
									if (HealthRatio <= 333 && PoisonHealth > 0) owner.A_PlaySound("FloraPainSet3",CHAN_VOICE,1.0,0,ATTN_NORM);
								}
								else
								if (CharacterClass == 1)
								{
									if (PoisonHealth > 0) owner.A_PlaySound("illucia/pain",CHAN_VOICE,1.0,0,ATTN_NORM);
								}
								else
								if (CharacterClass == 0)
								{
									if (PoisonHealth > 0) owner.A_PlaySound("deggaris/pain",CHAN_VOICE,1.0,0,ATTN_NORM);
								}
							}
						}
						
					}
				}
			}
			else
			{
				PoisonDmg = 0;
				PoisonTimer = 0;
				PoisonHits = 0;
			}
		}
		
		
		
		
		
		//*********************
		//**Magic Regen/Degen**
		//*********************
		int SkillLevelManaDelay, ManaReDelay;
		int RegenedMana, regenedmanabasereq;
		int MaxRegenableMana, EquippedRegenCap;
		int MaxManaLimit;
		if (playeractor)
		{
			// Base Delay Count
			delaycount = 20;
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 1 - Base Count]: %d\c-", delaycount);

			// Stamina Upgrades [Strife]
			previousdelaycount = delaycount;
			SkillFactor = (StrifeStaminaLevel * 2) / 3;
			delaycount += SkillFactor;
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 2 - Strife - Stamina Upgrade]: %d\c-, Previous: %d", delaycount, previousdelaycount);

			// Accelerates MP Regen when Tension is Boosted
			previousdelaycount = delaycount;
			if (TensionLevel >= 1) delaycount += 1; // "5" = +1 [+5%]
			if (TensionLevel >= 2) delaycount += 1; // "20" = +2 [+10%]
			if (TensionLevel >= 3) delaycount += 2; // "50" = +4 [+20%]
			if (TensionLevel >= 4) delaycount += 2; // "100" = +6 [+30%]
			if (TensionLevel >= 5) delaycount += 3; // "250" = +9 [+45%]
			if (TensionLevel >= 6) delaycount += 4; // "500" = +13 [+65%]
			if (TensionLevel >= 7) delaycount += 5; // "1000" = +18 [+90%]
			if (TensionLevel >= 5 && CallACS("MiscVarCheckDECORATE",184) == 0) delaycount = delaycount * random(40,50) / 40; // +~25%
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 3 - Tension]: %d\c-, Previous: %d", delaycount, previousdelaycount);

			// PowerTrip Mode
			previousdelaycount = delaycount;
			if (dvds_musou_powertripmode == 1) delaycount = (delaycount * 5) / 2; // 250%
			if (dvds_musou_powertripmode == 2) delaycount = delaycount * 5; // 500%
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 4 - Musou/Power Trip Mode]: %d\c-, Previous: %d", delaycount, previousdelaycount);
			
			previousdelaycount = delaycount;
			if (DQAcceleratleTimer > 0) delaycount = delaycount * 6 / 5; // Acceleratle = 1.2x regen speed
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 5a - Acceleratle]: %d\c-, Previous: %d", delaycount, previousdelaycount);

			previousdelaycount = delaycount;
			if (DQDeceleratleTimer > 0) delaycount = delaycount * 4 / 5; // Deceleratle = 0.8x regen speed
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 5b - Deceleratle]: %d\c-, Previous: %d", delaycount, previousdelaycount);

			previousdelaycount = delaycount;
			if (FatigueTimer > 0) delaycount = delaycount * 1 / 5; // Fatigue = 0.2x regen speed
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 6 - Fatigue]: %d\c-, Previous: %d", delaycount, previousdelaycount);

			previousdelaycount = delaycount;
			if (GoETimer > 0) delaycount *= 5; // GoE 5x regen speed
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 7 - GoE]: %d\c-, Previous: %d", delaycount, previousdelaycount);

			previousdelaycount = delaycount;
			if (SleepTimer > 0)
			{
				delaycount *= 5; // Sleep = 5x regen speed
				PerkFactor = ((RegenMPFastPerkLevel * 2000) + (RegenMPFastEXPerkLevel * 5000)) + 10000;
				delaycount = delaycount * PerkFactor / 10000; // "RegenMPFast" and "RegenMPFast EX" perks.
			}
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 8 - Sleep]: %d\c-, Previous: %d", delaycount, previousdelaycount);

			// Ruinous Shield - greatly reduces MP regeneration speed
			previousdelaycount = delaycount;
			if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0) delaycount = delaycount * 3 / 8; // 37.5%
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 9 - Ruinous Shield]: %d\c-, Previous: %d", delaycount, previousdelaycount);
		
			// RegenMPFast perks
			previousdelaycount = delaycount;
			perkfactor = 10;
			if (RegenMPFastPerkLevel > 0)
			{
				PerkFactor = 10 + ((RegenMPFastPerkLevel * 2) + (RegenMPFastEXPerkLevel * 5));
				delaycount = delaycount * PerkFactor / 10; // "RegenMPFast" and "RegenMPFast EX" perks.
			}
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 10 - Regen MP Fast]: %d\c-, Previous: %d, Factor: %d / 10", delaycount, previousdelaycount, PerkFactor);
		
			// "Cleared of Mind" Perks
			previousdelaycount = delaycount;
			perkfactor = 80;
			if (ClearedOfMindParkLevel > 0)
			{
				perkfactor = 80 + ((ClearedOfMindParkLevel * 2) + (ClearedOfMindEXParkLevel * 5));
				delaycount = delaycount * perkfactor / 80;
			}
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 11 - Cleared of Mind]: %d\c-, Previous: %d, Factor: %d / 80", delaycount, previousdelaycount, PerkFactor);
			
			// Checks Mana Regen Rate Menu Option
			previousdelaycount = delaycount;
			delaycount = delaycount * dvds_manaregenratemultiplier / 100;
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 12 - RegenMultiplier]: %d\c-, Previous: %d, Multiplier: %d%", delaycount, previousdelaycount, dvds_manaregenratemultiplier);
			
			// Focusing
			previousdelaycount = delaycount;
			if (IsFocusOn > 0)
			{
				// Slowly increases the speed of regen as focus lasts longer
				if (FocusTimer >= 140) delaycount += 1; // [4 seconds]
				if (FocusTimer >= 245) delaycount += 1; // [7 seconds]
				if (FocusTimer >= 350) delaycount += 2; // [10 seconds]
				if (FocusTimer >= 490) delaycount += 2; // [14 seconds]
				if (FocusTimer >= 630) delaycount += 3; // [18 seconds]
				if (FocusTimer >= 770) delaycount += 3; // [22 seconds]
				if (FocusTimer >= 980) delaycount += 4; // [28 seconds]
				if (FocusTimer >= 1190) delaycount += 4; // [34 seconds]
				if (FocusTimer >= 1470) delaycount += 5; // [42 seconds]
				if (FocusTimer >= 1750) delaycount += 5; // [50 seconds]
				if (FocusTimer >= 2100) delaycount += 6; // [60 seconds]
				if (FocusTimer >= 2450) delaycount += 6; // [70 seconds]
				if (FocusTimer >= 2870) delaycount += 7; // [82 seconds]
				if (FocusTimer >= 3290) delaycount += 7; // [94 seconds]
				if (FocusTimer >= 3780) delaycount += 8; // [108 seconds]
				if (FocusTimer >= 4270) delaycount += 8; // [122 seconds]
				if (FocusTimer >= 2100) delaycount = (delaycount * 3) / 2; // [60 seconds]
				if (FocusTimer >= 4200) delaycount = (delaycount * 3) / 2; // [60 seconds]
		
				if (StrifeStaminaLevel > 0)
				{
					if (FocusTimer >= 350) delaycount += (StrifeStaminaLevel * 1) / 4;
					if (FocusTimer >= 700 && StrifeStaminaLevel >= 2) delaycount += (StrifeStaminaLevel * 1) / 4;
					if (FocusTimer >= 1050 && StrifeStaminaLevel >= 4) delaycount += (StrifeStaminaLevel * 1) / 3;
					if (FocusTimer >= 1400 && StrifeStaminaLevel >= 6) delaycount += (StrifeStaminaLevel * 1) / 3;
					if (FocusTimer >= 1750 && StrifeStaminaLevel >= 8) delaycount += (StrifeStaminaLevel * 1) / 2;
					if (FocusTimer >= 2100 && StrifeStaminaLevel >= 10) delaycount += (StrifeStaminaLevel * 1) / 2;
				}
		
				if (random(1,25) == 1) delaycount *= 8; else delaycount *= 4;
		
				FocusHumTimer = FocusTimer % 25;
				if (FocusTimer >= 140) FocusHumTimer = FocusTimer % 24;
				if (FocusTimer >= 245) FocusHumTimer = FocusTimer % 23;
				if (FocusTimer >= 315) FocusHumTimer = FocusTimer % 22;
				if (FocusTimer >= 350) FocusHumTimer = FocusTimer % 21;
				if (FocusTimer >= 490) FocusHumTimer = FocusTimer % 19;
				if (FocusTimer >= 630) FocusHumTimer = FocusTimer % 17;
				if (FocusTimer >= 910) FocusHumTimer = FocusTimer % 15;
				if (FocusTimer >= 2100) FocusHumTimer = FocusTimer % 12;

				if (FocusHumTimer == 1) owner.A_PlaySound("focushum",7,1.125);
			}
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 13 - Focusing]: %d\c-, Previous: %d, FocusHumTimer: %d, FocusTimer: %d", delaycount, previousdelaycount, FocusHumTimer, FocusTimer);
		
			// Weapons
			previousdelaycount = delaycount;
			If (weapon is "SapphireWandNew")
			{
				if (WandMasteryPerkLevel == 1) delaycount = delaycount * 21 / 20;
				if (WandMasteryPerkLevel == 2) delaycount = delaycount * 23 / 20;
				if (WandMasteryPerkLevel == 3) delaycount = delaycount * 26 / 20;
				if (WandMasteryPerkLevel == 4) delaycount = delaycount * 30 / 20;
				if (WandMasteryPerkLevel == 5) delaycount = delaycount * 35 / 20;
			}
			If (weapon is "DualSapphireWandsNew")
			{
				if (WandMasteryPerkLevel == 1) delaycount = delaycount * 22 / 20;
				if (WandMasteryPerkLevel == 2) delaycount = delaycount * 26 / 20;
				if (WandMasteryPerkLevel == 3) delaycount = delaycount * 32 / 20;
				if (WandMasteryPerkLevel == 4) delaycount = delaycount * 40 / 20;
				if (WandMasteryPerkLevel == 5) delaycount = delaycount * 50 / 20;
			}
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 14 - Weapon Checking]: %d\c-, Previous: %d", delaycount, previousdelaycount);

			// Final Checks
			if (delaycount < 1) delaycount = 1;

			if (UsingInGameMenu != 0) delaycount = 0; // If using In-Game Menus
			if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0 && PlayerCurrentMP < PlayerMaxMP) 
			{
				// If Player is "Conscious" and Mana is below Max
				 MPRegenTimer += delaycount;
			}
			if (debugregenmana) Console.Printf("    \cnMP Regen [Step 15 - Timer Check]: %d / %d\c-, delaycount: %d", MPRegenTimer, MPDelayInterval, delaycount);
			
			RegenedMana = 0;
			if (MPRegenTimer >= MPDelayInterval)
			{
				if (PlayerCurrentMP < PlayerMaxMP && PlayerCurrentHealth > 0)
				{
					// A combined total of 12-20 points of Sorcery/Theraphesuis are needed for an extra point of MP regen.
					if (TrueGameSkill <= SKILL_VERY_EASY)
					{
						RegenedMana = 3;
						regenedmanabasereq = 12;
					}
					if (TrueGameSkill == SKILL_EASY) 
					{
						RegenedMana = random(2,3);
						regenedmanabasereq = 14;
					}
					if (TrueGameSkill == SKILL_NORMAL)
					{
						RegenedMana = 2;
						regenedmanabasereq = 16;
					}
					if (TrueGameSkill == SKILL_HARD) 
					{
						RegenedMana = random(1,2);
						regenedmanabasereq = 18;
					}
					if (TrueGameSkill == SKILL_VERY_HARD) 
					{
						RegenedMana = 1;
						regenedmanabasereq = 20;
					}
					if (TrueGameSkill == SKILL_EXTREME) 
					{
						RegenedMana = 1;
						regenedmanabasereq = 22;
					}
					if (TrueGameSkill == SKILL_HORRIBLE) 
					{
						RegenedMana = 1;
						regenedmanabasereq = 24;
					}
					if (TrueGameSkill == SKILL_IMPOSSIBLE) 
					{
						RegenedMana = 1;
						regenedmanabasereq = 26;
					}
					if (TrueGameSkill == 8) 
					{
						RegenedMana = 1;
						regenedmanabasereq = 28;
					}
					RegenedMana += ((PlayerSOR + PlayerTHE) / regenedmanabasereq);
				}
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x1 - Base Regen Amount]: %d\c-, Required (SOR+THE) Pts: %d", RegenedMana, regenedmanabasereq);

				previousdelaycount = RegenedMana;
				if (DivineAvatarTimer > 0) // Divine Avatar
				{
					SkillFactor = PlayerLevel / 10;
					RegenedMana += SkillFactor;
					if (random(0,100) < 26)
					{
						RegenedMana = RegenedMana * 5 / 4;
					}
					else
					{
						if (random(0,100) < 51)
						{
							RegenedMana = RegenedMana * 9 / 8;
						}
					}
				}
				else
				{
					SkillFactor = PlayerLevel / 25;
					RegenedMana += SkillFactor;
					if (random(0,100) < 26)
					{
						RegenedMana = RegenedMana * 17 / 16;
					}
					else
					{
						if (random(0,100) < 51)
						{
							RegenedMana = RegenedMana * 33 / 32;
						}
					}
				}
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x2 - Divine Avatar Check]: %d\c-, Previous: %d, Added: %d", RegenedMana, previousdelaycount, SkillFactor);
	
				// Character-Based regen factors
				previousdelaycount = RegenedMana;
				if (CharacterClass == 0) RegenedMana = RegenedMana * random(15,17) / 16; // Deggaris (93.75% - 106.25%)
				if (CharacterClass == 1) RegenedMana = RegenedMana * random(19,21) / 16; // Illucia (118.75% - 131.25%)
				if (CharacterClass == 2) RegenedMana = RegenedMana * random(23,25) / 16; // Flora (143.75% - 156.25%)
				if (CharacterClass == 8) RegenedMana = RegenedMana * random(23,25) / 16; // Ailish (143.75% - 156.25%)
				if (CharacterClass == 9) RegenedMana = RegenedMana * random(17,19) / 16; // Petra (106.25% - 118.75%)
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x3 - Character Check]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
	
				// Sauron's Helmet
				previousdelaycount = RegenedMana;
				if (CharacterClass == 0 && Owner.CountInv("SauronHelmet") > 0) RegenedMana = RegenedMana * 11 / 8; // Deggaris w/ Helmet (137.5%)
				if (CharacterClass == 1 && Owner.CountInv("SauronHelmet") > 0) RegenedMana = RegenedMana * 10 / 8; // Illucia w/ Helmet (125%)
				if (CharacterClass == 2 && Owner.CountInv("SauronHelmet") > 0) RegenedMana = RegenedMana * 9 / 8; // Flora w/ Helmet (112.5%)
				if (CharacterClass == 8 && Owner.CountInv("SauronHelmet") > 0) RegenedMana = RegenedMana * 9 / 8; // Flora w/ Helmet (112.5%)
				if (CharacterClass == 9 && Owner.CountInv("SauronHelmet") > 0) RegenedMana = RegenedMana * 12 / 8; // Petra w/ Helmet (150%)
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x4a - Sauron's Helmet]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);

				// Sauron's Gauntlets
				previousdelaycount = RegenedMana;
				if (Owner.CountInv("SauronGauntletsItem") > 0)
				{
					if (CharacterClass == 0) RegenedMana = RegenedMana * 5 / 4; // Deggaris w/ Gauntlets (125%)
					if (CharacterClass == 1) RegenedMana = RegenedMana * 5 / 4; // Illucia w/ Gauntlets (125%)
					if (CharacterClass == 2) RegenedMana = RegenedMana * 5 / 4; // Flora w/ Gauntlets (125%)
					if (CharacterClass == 8) RegenedMana = RegenedMana * 5 / 4; // Ailish w/ Gauntlets (125%)
					if (CharacterClass == 9) RegenedMana = RegenedMana * 5 / 4; // Petra w/ Gauntlets (125%)
				}
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x4b - Sauron's Gauntlets]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);

				// The One Ring
				previousdelaycount = RegenedMana;
				if (CharacterClass == 0 && Owner.CountInv("TheOneRing") > 0) RegenedMana = RegenedMana * 5 / 8; // Deggaris w/ Ring (62.5%)
				if (CharacterClass == 1 && Owner.CountInv("TheOneRing") > 0) RegenedMana = RegenedMana * 6 / 8; // Illucia w/ Ring (75%)
				if (CharacterClass == 2 && Owner.CountInv("TheOneRing") > 0) RegenedMana = RegenedMana * 7 / 8; // Flora w/ Ring (87.5%)
				if (CharacterClass == 8 && Owner.CountInv("TheOneRing") > 0) RegenedMana = RegenedMana * 6 / 8; // Ailish w/ Ring (87.5%)
				if (CharacterClass == 9 && Owner.CountInv("TheOneRing") > 0) RegenedMana = RegenedMana * 5 / 8; // Petra w/ Ring (62.5%)
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x4c - The One Ring]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);

				previousdelaycount = RegenedMana;
				if (DQAcceleratleTimer > 0) RegenedMana = RegenedMana * 6 / 5; // Acceleratle = +20% Regen
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x5a - Acceleratle]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
				previousdelaycount = RegenedMana;
				if (DQDeceleratleTimer > 0) RegenedMana = RegenedMana * 4 / 5; // Deceleratle = -20% Regen
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x5b - Deceleratle]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);

				// Poison = +8.334% Regen
				previousdelaycount = RegenedMana;
				if (PoisonedTimer > 0 && InvulnerabilityTimer == 0) RegenedMana = RegenedMana * 13 / 12;
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x6 - Poison]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);

				// Checks Mana Regen Rate Menu Option
				previousdelaycount = RegenedMana;
				RegenedMana = RegenedMana * dvds_manaregenmultiplier / 100;
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x7 - RegenMultiplier]: %d\c-, Previous: %d, Multiplier: %d%", RegenedMana, previousdelaycount, dvds_manaregenmultiplier);
					
				// Weapons
				previousdelaycount = RegenedMana;
				If (weapon is "SapphireWandNew")
				{
					if (WandMasteryPerkLevel == 1) RegenedMana = RegenedMana * 41 / 40;
					if (WandMasteryPerkLevel == 2) RegenedMana = RegenedMana * 43 / 40;
					if (WandMasteryPerkLevel == 3) RegenedMana = RegenedMana * 45 / 40;
					if (WandMasteryPerkLevel == 4) RegenedMana = RegenedMana * 48 / 40;
					if (WandMasteryPerkLevel == 5) RegenedMana = RegenedMana * 51 / 40;
				}
				If (weapon is "DualSapphireWandsNew")
				{
					if (WandMasteryPerkLevel == 1) RegenedMana = RegenedMana * 42 / 40;
					if (WandMasteryPerkLevel == 2) RegenedMana = RegenedMana * 46 / 40;
					if (WandMasteryPerkLevel == 3) RegenedMana = RegenedMana * 50 / 40;
					if (WandMasteryPerkLevel == 4) RegenedMana = RegenedMana * 56 / 40;
					if (WandMasteryPerkLevel == 5) RegenedMana = RegenedMana * 62 / 40;
				}
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x8 - Weapon Checking]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
	
				previousdelaycount = RegenedMana;
				if (RegenedMana < 1) RegenedMana = 1;
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x9 - LOWCap 1]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
	
				// New Addition = Caps Maximum Mana Regeneration to a certain amount based on Difficulty and armor-type items.
				MaxRegenableMana = PlayerMaxMP * 50 / 100;
				if (TrueGameSkill <= SKILL_VERY_EASY) MaxRegenableMana = PlayerMaxMP * 61 / 100; 	// (61% of Max)
				if (TrueGameSkill == SKILL_EASY) MaxRegenableMana = PlayerMaxMP * 55 / 100; 				// (55% of Max)
				if (TrueGameSkill == SKILL_NORMAL) MaxRegenableMana = PlayerMaxMP * 50 / 100; 			// (50% of Max)
				if (TrueGameSkill == SKILL_HARD) MaxRegenableMana = PlayerMaxMP * 45 / 100; 				// (45% of Max)
				if (TrueGameSkill == SKILL_VERY_HARD) MaxRegenableMana = PlayerMaxMP * 39 / 100; 	// (39% of Max)
				if (TrueGameSkill == SKILL_EXTREME) MaxRegenableMana = PlayerMaxMP * 36 / 100; 		// (36% of Max)
				if (TrueGameSkill == SKILL_HORRIBLE) MaxRegenableMana = PlayerMaxMP * 33 / 100; 		// (33% of Max)
				if (TrueGameSkill == SKILL_IMPOSSIBLE) MaxRegenableMana = PlayerMaxMP * 30 / 100; 	// (30% of Max)
				if (TrueGameSkill >= SKILL_OMEGA) MaxRegenableMana = PlayerMaxMP * 27 / 100; 			// (27% of Max)
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x10 - Get Max Regen]: %d\c-, MaxRegen: %d", RegenedMana, MaxRegenableMana);
	
				EquippedRegenCap = 100; // in percent
				// All-Character Specfic Items
				if (Owner.CountInv("SauronHelmet") > 0) EquippedRegenCap -= 25;  // (-25% extension if Sauron's Helmet is equipped)
				if (Owner.CountInv("SauronGauntlets") > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
				if (Owner.CountInv("SauronGauntletsIllucia") > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
				if (Owner.CountInv("SauronGauntletsFlora") > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
				nm = "SauronGauntletsAilish"; APPackCheck = nm; 
				if (Owner.CountInv(APPackCheck) > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
				nm = "SauronGauntletsPetra"; APPackCheck2 = nm; 
				if (Owner.CountInv(APPackCheck2) > 0) EquippedRegenCap -= 10;  // (-10% extension if Sauron's Gauntlets are equipped)
				if (Owner.CountInv("TheOneRing") > 0) EquippedRegenCap += 50;  // (+50% extension if The One Ring is equipped)
				// Marine Specfic Items (between -4% and -16%, since only one can be equipped at once
				if (Owner.CountInv("DSGreenArmorClass") > 0) EquippedRegenCap -= 4; // (-4% for Green Armor)
				if (Owner.CountInv("DSBlueArmorClass") > 0) EquippedRegenCap -= 8; // (-8% for Blue Armor)
				if (Owner.CountInv("DSStoneArmorClass1") > 0) EquippedRegenCap -= 10; // (-10% for Stone Armor 1)
				if (Owner.CountInv("DSDiamondArmorClass1") > 0) EquippedRegenCap -= 14; // (-14% for Diamond Armor 1)
				if (Owner.CountInv("DSStoneArmorClass2") > 0) EquippedRegenCap -= 12; // (-12% for Stone Armor 2)
				if (Owner.CountInv("DSDiamondArmorClass2") > 0) EquippedRegenCap -= 16; // (-16% for Diamond Armor 2)
				// Flora Specfic Items (up to +150%)
				if (Owner.CountInv("EvenstarNecklace") > 0) EquippedRegenCap += 25;  // (+25% extension if Evenstar Necklace is equipped)
				if (Owner.CountInv("AnubisCufflinks") > 0) EquippedRegenCap += 62;  // (+62% extension if Anubis Cufflinks are equipped)
				if (Owner.CountInv("KissaBra") > 0) EquippedRegenCap += 38; // (+38% extension if Kissa's Armor Brassiere is equipped)
				if (Owner.CountInv("BalrogRing") > 0) EquippedRegenCap += 25; // (+25% extension if Balrog's Ring is equipped)
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x11 - Get Equip Regen Cap]: %d\c-, EquipRegenCap: %d", RegenedMana, EquippedRegenCap);
	
				if (EquippedRegenCap < 20) EquippedRegenCap = 20;
				if (EquippedRegenCap > 640) EquippedRegenCap = 640;
				MaxRegenableMana = MaxRegenableMana * EquippedRegenCap / 100;
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x12 - Misc]: %d\c-, EquipRegenCap: %d, MaxRegenableMana: %d", RegenedMana, EquippedRegenCap, MaxRegenableMana);

				// Caps Mana Regeneration to a certain % of the maximum based on difficulty level
				previousdelaycount = RegenedMana;
				if (RegenedMana > MaxRegenableMana) RegenedMana = MaxRegenableMana;
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x13 - HighCap 1]: %d\c-, Previous: %d, MaxRegenableMana: %d%", RegenedMana, previousdelaycount, MaxRegenableMana);
	
				// Dove's Ribbon [Increases MP Regeneration]
				previousdelaycount = RegenedMana;
				if (CharacterClass == 2)
				{
					if (Owner.CountInv("DoveRibbon") > 0)
					{
						RegenedMana += random(2,4); // Only Flora can use the Dove's Ribbon (100% Chance of Extra 2-4 Mana)
						if (random(1,4) == 1) RegenedMana += random(1,2); // Only Flora can use the Dove's Ribbon (25% Chance of extra 1-2 Mana)
						if (random(1,16) == 1) RegenedMana += random(1,2); // Only Flora can use the Dove's Ribbon (6.25% Chance of extra 1-2 Mana)
						if (random(1,64) == 1) RegenedMana += random(1,2); // Only Flora can use the Dove's Ribbon (1.5625% Chance of extra 1-2 Mana)
					}
				}
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x14 - Dove's Ribbon]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
	
				SkillFactor = 36;
				// Focus = 12.5% more mana per interval
				if (IsFocusOn > 0)
				{
					if (CharacterClass == 2)
					{
						if (Owner.CountInv("EvenstarNecklace") > 0) SkillFactor += 2;
						if (Owner.CountInv("BalrogRing") > 0) SkillFactor += 2;
						if (Owner.CountInv("FalconKnifeEarrings") > 0) SkillFactor += 2;
					}
					else
					{
						if (Owner.CountInv("DSGreenArmorClass") > 0) SkillFactor += 1;
						if (Owner.CountInv("DSBlueArmorClass") > 0) SkillFactor += 2;
						if (Owner.CountInv("DSStoneArmorClass1") > 0) SkillFactor += 3;
						if (Owner.CountInv("DSDiamondArmorClass1") > 0) SkillFactor += 4;
						if (Owner.CountInv("DSStoneArmorClass2") > 0) SkillFactor += 5;
						if (Owner.CountInv("DSDiamondArmorClass2") > 0) SkillFactor += 6;
					}
					RegenedMana = RegenedMana * SkillFactor / 20;
				}
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x15 - Focusing]: %d\c-, Previous: %d, Factor: %d / 20", RegenedMana, previousdelaycount, SkillFactor);
	
				previousdelaycount = RegenedMana;
				if (RegenedMana < 1) RegenedMana = 1;
				if (debugregenmana) Console.Printf("    \cnMP Regen [Step x16 - LOWCap 2]: %d\c-, Previous: %d", RegenedMana, previousdelaycount);
	
				// The actual Regeneration Part
				PlayerCurrentMP += RegenedMana;
				if (PlayerCurrentMP > PlayerMaxMP) PlayerCurrentMP = PlayerMaxMP;

				MaxManaLimit = PlayerMaxMP * 2;
	
				if (PlayerCurrentMP > MaxManaLimit) PlayerCurrentMP = MaxManaLimit;
				CallACS("OtherVarSetDECORATE",2,PlayerCurrentMP); // Sets MaxMana in ACS
				CallACS("MiscVarSetDECORATE",243,PlayerCurrentMP); // Sets "LastManaValue" in ACS
				CallACS("MiscVarSetDECORATE",238,PlayerCurrentMP); // Sets "NewManaValue" in ACS

				// Reset Regen Delay
				if (TrueGameSkill <= SKILL_VERY_EASY) SkillLevelManaDelay = 600; // 30 tics
				if (TrueGameSkill == SKILL_EASY) SkillLevelManaDelay = 660; // 33 tics
				if (TrueGameSkill == SKILL_NORMAL) SkillLevelManaDelay = 740; // 37 tics
				if (TrueGameSkill == SKILL_HARD) SkillLevelManaDelay = 840; // 42 tics
				if (TrueGameSkill == SKILL_VERY_HARD) SkillLevelManaDelay = 960; // 48 tics
				if (TrueGameSkill == SKILL_EXTREME) SkillLevelManaDelay = 1020; // 51 tics
				if (TrueGameSkill == SKILL_HORRIBLE) SkillLevelManaDelay = 1080; // 54 tics
				if (TrueGameSkill == SKILL_IMPOSSIBLE) SkillLevelManaDelay = 1140; // 57 tics
				if (TrueGameSkill >= SKILL_OMEGA) SkillLevelManaDelay = 1260; // 63 tics

				if (CharacterClass == 0) SkillLevelManaDelay += (20 * random(-3,5)); 
				if (CharacterClass == 1) SkillLevelManaDelay += (20 * random(-4,4));
				if (CharacterClass == 2) SkillLevelManaDelay += (20 * random(-5,3));
				if (CharacterClass == 8) SkillLevelManaDelay += (20 * random(-5,3));
				if (CharacterClass == 9) SkillLevelManaDelay += (20 * random(-4,4));

				if (CharacterClass == 0) ManaReDelay = PlayerLevel / 30; // Deggaris (up to 3/6)
				if (CharacterClass == 1) ManaReDelay = PlayerLevel / 25; // Illucia (up to 4/8)
				if (CharacterClass == 2) ManaReDelay = PlayerLevel / 20; // Flora (up to 5/10) 
				if (CharacterClass == 8) ManaReDelay = PlayerLevel / 21; // Ailish 
				if (CharacterClass == 9) ManaReDelay = PlayerLevel / 25; // Petra (up to 4/8)
				MPDelayInterval = SkillLevelManaDelay - ManaReDelay;

				// A combined total of 15 points of Sorcery/Theraphesuis are needed for a tic-point of faster regen time.
				ManaReDelay = (PlayerSOR + PlayerTHE) / 300;
				MPDelayInterval -= ManaReDelay;

				if (TrueGameSkill <= SKILL_VERY_EASY) if (MPDelayInterval < 20) MPDelayInterval = 20;
				if (TrueGameSkill == SKILL_EASY) if (MPDelayInterval < 40) MPDelayInterval = 40;
				if (TrueGameSkill == SKILL_NORMAL) if (MPDelayInterval < 80) MPDelayInterval = 80;
				if (TrueGameSkill == SKILL_HARD) if (MPDelayInterval < 140) MPDelayInterval = 140;
				if (TrueGameSkill == SKILL_VERY_HARD) if (MPDelayInterval < 220) MPDelayInterval = 220;
				if (TrueGameSkill == SKILL_EXTREME) if (MPDelayInterval < 240) MPDelayInterval = 240;
				if (TrueGameSkill == SKILL_HORRIBLE) if (MPDelayInterval < 260) MPDelayInterval = 260;
				if (TrueGameSkill == SKILL_IMPOSSIBLE) if (MPDelayInterval < 280) MPDelayInterval = 280;
				if (TrueGameSkill >= SKILL_OMEGA) if (MPDelayInterval < 300) MPDelayInterval = 300;

				MPRegenTimer = 0;
			}
		}
		
		
		
		
		
		//******************************
		//**Arcana Gauge Regen (Petra)**
		//******************************
		int ArcanaRegenDelaySkill, ArcanaRegenAmount;
		if (playeractor)
		{
			int ArcanaPoints = CallACS("MiscVarCheckDECORATE",5001);
			if (CharacterClass == 9)
			{
				if (TrueGameSkill <= SKILL_VERY_EASY) { ArcanaRegenDelaySkill = 8; }
				if (TrueGameSkill == SKILL_EASY) { ArcanaRegenDelaySkill = 16; }
				if (TrueGameSkill == SKILL_NORMAL) { ArcanaRegenDelaySkill = 24; }
				if (TrueGameSkill == SKILL_HARD) { ArcanaRegenDelaySkill = 32; }
				if (TrueGameSkill == SKILL_VERY_HARD) { ArcanaRegenDelaySkill = 40; }
				if (TrueGameSkill == SKILL_EXTREME) { ArcanaRegenDelaySkill = 44; }
				if (TrueGameSkill == SKILL_HORRIBLE) { ArcanaRegenDelaySkill = 48; }
				if (TrueGameSkill == SKILL_IMPOSSIBLE) { ArcanaRegenDelaySkill = 52; }
				if (TrueGameSkill >= SKILL_OMEGA) { ArcanaRegenDelaySkill = 56; }
			}
			
			if (ArcanaPoints < 900) 
			{
				ArcanaRegenDelay += 1;
				if (ArcanaRegenDelay == ArcanaRegenDelaySkill)
				{
					ArcanaPoints += 1;
					ArcanaRegenDelay -= ArcanaRegenDelaySkill;
					if (ArcanaPoints == 100 || ArcanaPoints == 200 || ArcanaPoints == 300 || ArcanaPoints == 400 || ArcanaPoints == 500 || ArcanaPoints == 600 || ArcanaPoints == 700 || ArcanaPoints == 800 || ArcanaPoints == 900 )
					{
						owner.A_PlaySound("ArcanaGaugeLevelup",CHAN_7);
					}
				}
			}
			else ArcanaRegenDelay = 0;
			CallACS("MiscVarSetDECORATE",5001,ArcanaPoints);
			//Console.Printf("Arcana Regen: %d / %d, Points: %d", ArcanaRegenDelay, ArcanaRegenDelaySkill, ArcanaPoints);
		}
		
		
		
		
		//****************
		//**Stamina Calc**
		//****************
		int MaximumStamina = 10000;
		int PreviousStaminaMax = MaximumStamina;
		if (playeractor)
		{
			if (CharacterClass == 2)
			{
				if (Owner.CountInv("WaterFlyingDress") > 0) MaximumStamina += 1000; // +10.00%
				if (Owner.CountInv("FalconKnifeEarrings") > 0) MaximumStamina += 1750; // +17.50%
				if (Owner.CountInv("DivineShield") > 0) MaximumStamina += 500; // +5.00%
				if (Owner.CountInv("BalrogRing") > 0) MaximumStamina += 1250; // +12.50%
				// Total = 45.00%
			}
			else
			{
				// Armor
				if (Owner.CountInv("DSGreenArmorClass") > 0) MaximumStamina += 125; // +1.25%
				if (Owner.CountInv("DSBlueArmorClass") > 0) MaximumStamina += 250; // +2.5%
				if (Owner.CountInv("DSStoneArmorClass1") > 0) MaximumStamina += 500; // +5%
				if (Owner.CountInv("DSDiamondArmorClass1") > 0) MaximumStamina += 1000; // +10%
				if (Owner.CountInv("DSStoneArmorClass2") > 0) MaximumStamina += 1250; // +12.5%
				if (Owner.CountInv("DSDiamondArmorClass2") > 0) MaximumStamina += 2500; // +25%
				// Other
				// To Be Added [maybe]
			}
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 1 - Armor Check]: %d, Previously: %d", MaximumStamina, PreviousStaminaMax);

			// Stats
			int staminastatfactor = 0;
			SkillFactor = 0;
			// Agility
			if (CharacterClass == 0) SkillFactor = PlayerAGL * 6;
			if (CharacterClass == 1) SkillFactor = PlayerAGL * 8;
			if (CharacterClass == 2) SkillFactor = PlayerAGL * 10;
			if (CharacterClass == 8) SkillFactor = PlayerAGL * 10;
			if (CharacterClass == 9) SkillFactor = PlayerAGL * 8;
			staminastatfactor += SkillFactor;
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 2a - Stam - Stat Gain (AGL)]: %d, AGLAdd: %d", staminastatfactor, SkillFactor);

			// Defense
			if (CharacterClass == 0) SkillFactor = PlayerDEF * 10;
			if (CharacterClass == 1) SkillFactor = PlayerDEF * 8;
			if (CharacterClass == 2) SkillFactor = PlayerDEF * 6;
			if (CharacterClass == 8) SkillFactor = PlayerDEF * 5;
			if (CharacterClass == 9) SkillFactor = PlayerDEF * 10;
			staminastatfactor += SkillFactor;
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 2b - Stam - Stat Gain (DEF)]: %d, DEFAdd: %d", staminastatfactor, SkillFactor);

			// Deftness
			if (CharacterClass == 0) SkillFactor = PlayerDFT * 8;
			if (CharacterClass == 1) SkillFactor = PlayerDFT * 8;
			if (CharacterClass == 2) SkillFactor = PlayerDFT * 8;
			if (CharacterClass == 8) SkillFactor = PlayerDFT * 8;
			if (CharacterClass == 9) SkillFactor = PlayerDFT * 8;
			staminastatfactor += SkillFactor;
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 2c - Stam - Stat Gain (DFT)]: %d, DFTAdd: %d", staminastatfactor, SkillFactor);
			
			// Sorcery
			if (CharacterClass == 0) SkillFactor = PlayerSOR * 6;
			if (CharacterClass == 1) SkillFactor = PlayerSOR * 8;
			if (CharacterClass == 2) SkillFactor = PlayerSOR * 10;
			if (CharacterClass == 8) SkillFactor = PlayerSOR * 9;
			if (CharacterClass == 9) SkillFactor = PlayerSOR * 7;
			staminastatfactor += SkillFactor;
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 2d - Stam - Stat Gain (SOR)]: %d, SORAdd: %d", staminastatfactor, SkillFactor);
			
			// Strength
			if (CharacterClass == 0) SkillFactor = PlayerSTR * 10;
			if (CharacterClass == 1) SkillFactor = PlayerSTR * 8;
			if (CharacterClass == 2) SkillFactor = PlayerSTR * 6;
			if (CharacterClass == 8) SkillFactor = PlayerSTR * 4;
			if (CharacterClass == 9) SkillFactor = PlayerSTR * 6;
			staminastatfactor += SkillFactor;
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 2e - Stam - Stat Gain (STR)]: %d, STRAdd: %d", staminastatfactor, SkillFactor);
			
			// Therapeusis
			if (CharacterClass == 0) SkillFactor = PlayerTHE * 8;
			if (CharacterClass == 1) SkillFactor = PlayerTHE * 8;
			if (CharacterClass == 2) SkillFactor = PlayerTHE * 8;
			if (CharacterClass == 8) SkillFactor = PlayerTHE * 8;
			if (CharacterClass == 9) SkillFactor = PlayerTHE * 8;
			staminastatfactor += SkillFactor;
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 2f - Stam - Stat Gain (THE)]: %d, THEAdd: %d", staminastatfactor, SkillFactor);

			SkillFactor = 0;
			PreviousStaminaMax = MaximumStamina;
			// Final Calc
			if (TrueGameSkill <= SKILL_VERY_EASY) SkillFactor = 10000;
			if (TrueGameSkill == SKILL_EASY) SkillFactor = 11250;
			if (TrueGameSkill == SKILL_NORMAL) SkillFactor = 12500;
			if (TrueGameSkill == SKILL_HARD) SkillFactor = 15000;
			if (TrueGameSkill == SKILL_VERY_HARD) SkillFactor = 20000;
			if (TrueGameSkill == SKILL_EXTREME) SkillFactor = 21250;
			if (TrueGameSkill == SKILL_HORRIBLE) SkillFactor = 22500;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) SkillFactor = 23750;
			if (TrueGameSkill >= SKILL_OMEGA) SkillFactor = 25000;
			staminastatfactor += SkillFactor;
			MaximumStamina = MaximumStamina * staminastatfactor / SkillFactor;
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 2X - Stam - Stat Gain]: %d, Previously: %d", MaximumStamina, PreviousStaminaMax);

			PreviousStaminaMax = MaximumStamina;
			SkillFactor = ((StamUpPerkLevel * 500) + (StamUpEXPerkLevel * 1250)) + 10000;
			MaximumStamina = MaximumStamina * SkillFactor / 10000; // "StamUp" and "StamUp EX" perks.
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 3 - Stam Up Perk]: %d, Previously: %d", MaximumStamina, PreviousStaminaMax);
			
			PreviousStaminaMax = MaximumStamina;
			SkillFactor = 10000 + (StrifeStaminaLevel * 1250);
			MaximumStamina = MaximumStamina * SkillFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded"
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum [Step 4 - STRIFE - Stamina]: %d, Previously: %d", MaximumStamina, PreviousStaminaMax);
			
			int MegaMaxStamina = MaximumStamina * 5;
			if (debugstaminaregen) Console.Printf("    \cfStamina Maximum: %d (5x: %d)", MaximumStamina, MegaMaxStamina);
			CallACS("MiscVarSetDECORATE",22,MaximumStamina);
			CallACS("MiscVarSetDECORATE",164,MegaMaxStamina);
		}
		
		
		
		
		
		//***********************
		//**Stamina Regen/Degen**
		//***********************
		int staminaregenbase, staminaregenfinal;
		PlayerCurrentStamina = CallACS("StatCheck",12);
		if (playeractor)
		{
			if (PlayerCurrentStamina < MaximumStamina)
			{
				staminaregenfinal = 0;
				// Base
				if (CharacterClass == 0) staminaregenbase = 15; // Deggaris (0.15%/tic = 5.25%/sec)
				if (CharacterClass == 1) staminaregenbase = 13; // Illucia (0.13%/tic = 4.55%/sec)
				if (CharacterClass == 2) staminaregenbase = 9; // Flora (0.09%/tic = 3.15%/sec)
				if (CharacterClass == 8) staminaregenbase = 8; // Ailish (0.08%/tic = 3.15%/sec)
				if (CharacterClass == 9) staminaregenbase = 15; // Petra (0.15%/tic = 5.25%/sec)
				staminaregenfinal += staminaregenbase;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 1: Character Base]: %d\c-, Increase: %d", staminaregenfinal, staminaregenbase);
				
				if (CharacterClass == 0) staminaregenbase = (PlayerLevel / 14); // +7-15
				if (CharacterClass == 1) staminaregenbase = (PlayerLevel / 14); // +7-15
				if (CharacterClass == 2) staminaregenbase = (PlayerLevel / 10); // +10-20
				if (CharacterClass == 8) staminaregenbase = (PlayerLevel / 10); // +10-20
				if (CharacterClass == 9) staminaregenbase = (PlayerLevel / 14); // +7-15
				staminaregenfinal += staminaregenbase;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 2: Level Addition]: %d\c-, Increase: %d", staminaregenfinal, staminaregenbase);
				
				// Stamina Bonuses [Strife]
				staminaregenbase = ((StrifeStaminaLevel * 1) / 8);
				staminaregenfinal += staminaregenbase;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 3: Strife - Stamina Bonuses]: %d\c-, Increase: %d", staminaregenfinal, staminaregenbase);

				// Check Input for Bonus/Penalties
				staminaregenbase = staminaregenfinal;
				int StamMoveMultiplier = 100;
				FreezePlayer = 0;
				if (MenuModeToggle > 0) FreezePlayer += 1; // Menus are on
				if (SleepTimer > 0) FreezePlayer += 1; // Sleeping
				if (FreezePlayer == 0)
				{
					if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) StamMoveMultiplier = StamMoveMultiplier * 76 / 100;
					if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) StamMoveMultiplier = StamMoveMultiplier * 84 / 100;
					if (buttons & BT_JUMP) StamMoveMultiplier = StamMoveMultiplier * 76 / 100;
					if (buttons & BT_CROUCH) StamMoveMultiplier = StamMoveMultiplier * 120 / 100;
		
					staminaregenfinal = staminaregenfinal * StamMoveMultiplier / 100;
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 4: Input Checking]: (%d)\c-, Multiplier: %d%, NewValue: %d, PreviousValue: %d", buttons, StamMoveMultiplier, staminaregenfinal, staminaregenbase);
				
				// Check Armor for Bonus/Penalties
				staminaregenbase = 1000;
				// Marine Specfic Armors
				if (Owner.CountInv("DSGreenArmorClass") > 0)		staminaregenbase += 12; 
				if (Owner.CountInv("DSBlueArmorClass") > 0)			staminaregenbase += 25; 
				if (Owner.CountInv("DSStoneArmorClass1") > 0)		staminaregenbase += 50; 
				if (Owner.CountInv("DSDiamondArmorClass1") > 0)	staminaregenbase += 100;  
				if (Owner.CountInv("DSStoneArmorClass2") > 0)		staminaregenbase += 75;  
				if (Owner.CountInv("DSDiamondArmorClass2") > 0)	staminaregenbase += 150; 
				// Sauron Stuff
				if (Owner.CountInv("SauronHelmet") > 0)					staminaregenbase -= 100; 
				if (Owner.CountInv("SauronGauntletsItem") > 0)	staminaregenbase -= 100; 
				// Flora's Stuff
				if (Owner.CountInv("RuinousShield") > 0)				staminaregenbase -= 625;
				if (Owner.CountInv("SafeTeaShoes") > 0)					staminaregenbase += 100;  
				if (Owner.CountInv("AnubisCufflinks") > 0)			staminaregenbase += 25;  
				if (Owner.CountInv("KissaBra") > 0)							staminaregenbase += 75;  
				if (Owner.CountInv("DivineShield") > 0)					staminaregenbase += 125;  
				if (Owner.CountInv("DoveRibbon") > 0)						staminaregenbase += 50;  
				if (staminaregenbase < 125) staminaregenbase = 125;
				staminaregenfinal = staminaregenfinal * staminaregenbase / 1000;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 5: Armor Checking]: %d\c-, Multiplier: %d / 1000", staminaregenfinal, staminaregenbase);
				
				int basestatdivisor = 8;
				// Initia1 Stat Check = 8pts of Strength = +1% Stamina Regen Speed
				// Secondary Stat Check = 8pts of [?] = +1% Stamina Regen Speed
				staminaregenbase = PlayerSTR;
				if (CharacterClass == 0) staminaregenbase += PlayerSTR; // Deggaris's Secondary Stat is also strength, making it work doubly for him overall. :P
				if (CharacterClass == 1) staminaregenbase += PlayerDEF; // Illucia's Secondary Stat is Defense. :P
				if (CharacterClass == 2) staminaregenbase += PlayerAGL; // Flora's Secondary Stat is Agility. :P
				if (CharacterClass == 8) staminaregenbase += PlayerAGL; // Ailish's Secondary Stat is Agility. :P
				if (CharacterClass == 9) staminaregenbase += PlayerDEF; // Petra's Secondary Stat is Defense. :P
				staminaregenbase /= basestatdivisor;
				staminaregenbase += 100;
				staminaregenfinal = staminaregenfinal * staminaregenbase / 100;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 6: Stat Checking]: %d\c-, Multiplier: %d / 100, BaseDivisor: %d", staminaregenfinal, staminaregenbase, basestatdivisor);
				
				// Tension
				staminaregenbase = staminaregenfinal;
				if (TensionLevel == 1) staminaregenfinal = staminaregenfinal * 1025 / 1000;
				if (TensionLevel == 2) staminaregenfinal = staminaregenfinal * 105 / 100;
				if (TensionLevel == 3) staminaregenfinal = staminaregenfinal * 110 / 100;
				if (TensionLevel == 4) staminaregenfinal = staminaregenfinal * 125 / 100;
				if (TensionLevel == 5) staminaregenfinal = staminaregenfinal * 150 / 100;
				if (TensionLevel == 6) staminaregenfinal = staminaregenfinal * 250 / 100;
				if (TensionLevel == 7) staminaregenfinal = staminaregenfinal * 500 / 100;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 7: Tension (%d)]: %d\c-, Previous: %d", TensionLevel, staminaregenfinal, staminaregenbase);
				
				// Divine Avatar = +100% Regen
				staminaregenbase = staminaregenfinal;
				if (DivineAvatarTimer > 0) staminaregenfinal *= 2;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 8: Divine Avatar]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// GoE = +250% Regen
				staminaregenbase = staminaregenfinal;
				if (GoeTimer > 0) staminaregenfinal *= 3.5;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 8b: GoE]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
		
				// Speed Buffs
				staminaregenbase = staminaregenfinal;
				if (DQAcceleratleTimer > 0) staminaregenfinal = staminaregenfinal * 6 / 5; // Acceleratle
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 9a: Acceleratle]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				staminaregenbase = staminaregenfinal;
				if (DQDeceleratleTimer > 0) staminaregenfinal = staminaregenfinal * 4 / 5; // Deceleratle
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 9b: Deceleratle]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Poison = -25% Regen
				staminaregenbase = staminaregenfinal;
				if (PoisonedTimer > 0 && InvulnerabilityTimer == 0) staminaregenfinal = staminaregenfinal * 3 / 4;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 10: Poison]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Fatigue = -80% Regen
				staminaregenbase = staminaregenfinal;
				if (FatigueTimer > 0) staminaregenfinal /= 5;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 11: Fatigue]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
			
				// Sleeping = +400% Regen
				staminaregenbase = staminaregenfinal;
				if (SleepTimer > 0)
				{
					staminaregenfinal *= 5;
					PerkFactor = ((RegenStamFastPerkLevel * 2000) + (RegenStamFastEXPerkLevel * 5000)) + 10000;
					staminaregenfinal = staminaregenfinal * PerkFactor / 10000; // "RegenStamFast" and "RegenStamFast EX" perks.
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 12: Sleep]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Berserk = +25% Regen
				staminaregenbase = staminaregenfinal;
				if (BerserkTimer > 0) staminaregenfinal = staminaregenfinal * 5 / 4;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 13: Berserk]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Checks Stamina Regen Rate Menu Option
				staminaregenbase = staminaregenfinal;
				staminaregenfinal = staminaregenfinal * dvds_staminaregenmultiplier / 100;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 14: StamRegen Menu Option]: %d\c-, Previous: %d, Factor: %d / 100", staminaregenfinal, staminaregenbase, dvds_staminaregenmultiplier);
				
				// Checks the final value based on how high the Max Stamina Pts Cap has been increased by various items
				staminaregenbase = staminaregenfinal;
				staminaregenfinal = (staminaregenfinal * MaximumStamina) / 10000;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 15: StamCapVal]: %d\c-, Previous: %d, Factor: %d / 10000", staminaregenfinal, staminaregenbase, MaximumStamina);
				
				// RegenStamFast perks
				staminaregenbase = staminaregenfinal;
				PerkFactor = 10;
				if (RegenStamFastPerkLevel > 0)
				{
					PerkFactor = 10 + ((RegenStamFastPerkLevel * 2) + (RegenStamFastEXPerkLevel * 5));
					staminaregenfinal = staminaregenfinal * PerkFactor / 10; // "RegenStamFast" and "RegenStamFast EX" perks.
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 16: RegenFast Perk]: %d\c-, Previous: %d, Factor: %d / 10", staminaregenfinal, staminaregenbase, PerkFactor);
				
				// Check for Weapons
				staminaregenbase = staminaregenfinal;
				nm = "SauronGauntletsAilish"; APPackCheck = nm;
				nn = "SauronGauntletsPetra"; APPackCheck2 = nn;
				If(weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || 
					 weapon is APPackCheck || weapon is APPackCheck2)
				{
					staminaregenfinal = staminaregenfinal * 3 / 4;
				}
				If(weapon is "EvilWarriorShield")
				{
					staminaregenfinal = staminaregenfinal * 7 / 8;
				}
				If (weapon is "Chainsaw2" || weapon is "DoubleBladedChainsaw")
				{
					staminaregenfinal = staminaregenfinal * 9 / 10;
				}
				nm = "FistAilish"; APPackCheck = nm;
				nn = "FistPetra"; APPackCheck2 = nn;
				If (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora" ||
						weapon is APPackCheck || weapon is APPackCheck2)
				{
					staminaregenfinal = staminaregenfinal * 21 / 20;
					if (Owner.CountInv("FistPlayerBlockItem") > 0) staminaregenfinal = staminaregenfinal * random(28,32) / 20;
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 17: Weapons]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// "Cleared of Mind" Perks
				staminaregenbase = staminaregenfinal;
				PerkFactor = 80;
				if (ClearedOfMindParkLevel > 0)
				{
					perkfactor = (80 + (ClearedOfMindParkLevel * 2) + (ClearedOfMindEXParkLevel * 5));
					staminaregenfinal = staminaregenfinal * perkfactor / 80;
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 18: Cleared of Mind Perk]: %d\c-, Previous: %d, Factor: %d / 80", staminaregenfinal, staminaregenbase, PerkFactor);
			
				// Check Musou Power Trip Mode
				staminaregenbase = staminaregenfinal;
				if (dvds_musou_powertripmode == 1) staminaregenfinal = staminaregenfinal * 5 / 2; // 250%
				if (dvds_musou_powertripmode == 2) staminaregenfinal = staminaregenfinal * 5; // 500%
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 19: Musou/Power Trip Mode]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Low Caps Regen to 1 tic minimum
				staminaregenbase = staminaregenfinal;
				if (staminaregenfinal < 1) staminaregenfinal = 1;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 20: LowCap/FINAL]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);

				if (UsingInGameMenu != 0) staminaregenfinal = 0; // If using In-Game Menus
				if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious"
				{
					PlayerCurrentStamina += staminaregenfinal;
					if (PlayerCurrentStamina > MaximumStamina) PlayerCurrentStamina = MaximumStamina;
					CallACS("MiscVarSetDECORATE",21,PlayerCurrentStamina);
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration: %d / %d\c-, Gain: %d", PlayerCurrentStamina, MaximumStamina, staminaregenfinal);
			}
			else if (PlayerCurrentStamina == MaximumStamina) 
			{
				staminaregenfinal = 0;
				if (debugstaminaregen) Console.Printf("    \cjStamina Neutral: %d / %d", PlayerCurrentStamina, MaximumStamina);
			}
			else
			{
				// Base
				staminaregenfinal = 0;
				staminaregenbase = 0;
				if (CharacterClass == 0) staminaregenbase = -4; // Deggaris (-0.04%/tic = -1.40%/sec)
				if (CharacterClass == 1) staminaregenbase = -6; // Illucia (-0.06%/tic = -2.10%/sec)
				if (CharacterClass == 2) staminaregenbase = -7; // Flora (-0.07%/tic = -2.45%/sec)
				if (CharacterClass == 8) staminaregenbase = -8; // Ailish (-0.08%/tic = -2.45%/sec)
				if (CharacterClass == 9) staminaregenbase = -4; // Petra (-0.04%/tic = -1.40%/sec)
				staminaregenfinal += staminaregenbase;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 1: Character Base]: %d\c-, Decrease: %d", staminaregenfinal, staminaregenbase);

				// Level
				staminaregenbase = 0;
				if (CharacterClass == 0) staminaregenbase = (PlayerLevel / 56); // +1-3
				if (CharacterClass == 1) staminaregenbase = (PlayerLevel / 56); // +1-3
				if (CharacterClass == 2) staminaregenbase = (PlayerLevel / 40); // +2-5
				if (CharacterClass == 8) staminaregenbase = (PlayerLevel / 30); // +2-5
				if (CharacterClass == 9) staminaregenbase = (PlayerLevel / 56); // +1-3
				staminaregenfinal += staminaregenbase;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 2: Level Subtraction]: %d\c-, Increase: %d", staminaregenfinal, staminaregenbase);
				
				staminaregenbase = 0;
				// Stamina Bonuses [Strife]
				staminaregenbase = ((StrifeStaminaLevel * 1) / 8);
				staminaregenfinal += staminaregenbase;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 3: Strife - Stamina Bonuses]: %d\c-, Increase: %d", staminaregenfinal, staminaregenbase);
				
				// Check Input for Bonus/Penalties
				staminaregenbase = staminaregenfinal;
				int StamMoveMultiplier = 100;
				FreezePlayer = 0;
				if (MenuModeToggle > 0) FreezePlayer += 1; // Menus are on
				if (SleepTimer > 0) FreezePlayer += 1; // Sleeping
				if (FreezePlayer == 0)
				{
					if (buttons & BT_FORWARD || buttons & BT_BACK || buttons & BT_MOVELEFT || buttons & BT_MOVERIGHT) StamMoveMultiplier = StamMoveMultiplier * 100 / 76;
					if (buttons & BT_MOVEUP || buttons & BT_MOVEDOWN) StamMoveMultiplier = StamMoveMultiplier * 100 / 84;
					if (buttons & BT_JUMP) StamMoveMultiplier = StamMoveMultiplier * 100 / 76;
					if (buttons & BT_CROUCH) StamMoveMultiplier = StamMoveMultiplier * 100 / 120;
		
					staminaregenfinal = staminaregenfinal * StamMoveMultiplier / 100;
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 4: Input Checking]: (%d)\c-, Multiplier: %d%, NewValue: %d, PreviousValue: %d", buttons, StamMoveMultiplier, staminaregenfinal, staminaregenbase);
				
				// Check Armor for Bonus/Penalties
				staminaregenbase = 1000;
				// Marine Specfic Armors
				if (Owner.CountInv("DSGreenArmorClass") > 0)		staminaregenbase -= 6; 
				if (Owner.CountInv("DSBlueArmorClass") > 0)			staminaregenbase -= 12; 
				if (Owner.CountInv("DSStoneArmorClass1") > 0)		staminaregenbase -= 25; 
				if (Owner.CountInv("DSDiamondArmorClass1") > 0)	staminaregenbase -= 50;  
				if (Owner.CountInv("DSStoneArmorClass2") > 0)		staminaregenbase -= 37;  
				if (Owner.CountInv("DSDiamondArmorClass2") > 0)	staminaregenbase -= 75; 
				// Sauron Stuff
				if (Owner.CountInv("SauronHelmet") > 0)					staminaregenbase += 50; 
				if (Owner.CountInv("SauronGauntletsItem") > 0)	staminaregenbase += 50; 
				// Flora's Stuff
				if (Owner.CountInv("RuinousShield") > 0)				staminaregenbase += random(312,313);
				if (Owner.CountInv("SafeTeaShoes") > 0)					staminaregenbase -= 50;  
				if (Owner.CountInv("AnubisCufflinks") > 0)			staminaregenbase -= 13;  
				if (Owner.CountInv("KissaBra") > 0)							staminaregenbase -= 37;  
				if (Owner.CountInv("DivineShield") > 0)					staminaregenbase -= 63;  
				if (Owner.CountInv("DoveRibbon") > 0)						staminaregenbase -= 25;  
				if (staminaregenbase < 1) staminaregenbase = 1;
				if (staminaregenbase > 2500) staminaregenbase = 2500;
				staminaregenfinal = staminaregenfinal * staminaregenbase / 1000;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 5: Armor Checking]: %d\c-, Multiplier: %d / 1000", staminaregenfinal, staminaregenbase);
				
				int basestatdivisor = 16;
				// 16pts of Strength = -1% Stamina Degen Speed
				// Secondary Stat Check = 16pts of [?] = -1% Stamina Degen Speed
				staminaregenbase = PlayerSTR;
				if (CharacterClass == 0) staminaregenbase += PlayerSTR; // Deggaris's Secondary Stat is also strength, making it work doubly for him overall. :P
				if (CharacterClass == 1) staminaregenbase += PlayerDEF; // Illucia's Secondary Stat is Defense. :P
				if (CharacterClass == 2) staminaregenbase += PlayerAGL; // Flora's Secondary Stat is Agility. :P
				if (CharacterClass == 8) staminaregenbase += PlayerAGL; // Ailish's Secondary Stat is Agility. :P
				if (CharacterClass == 9) staminaregenbase += PlayerDEF; // Petra's Secondary Stat is Defense. :P
				staminaregenbase *= -1;
				staminaregenbase /= basestatdivisor;
				staminaregenbase += 100;
				staminaregenfinal = staminaregenfinal * staminaregenbase / 100;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 6: Stat Checking]: %d\c-, Multiplier: %d / 100, BaseDivisor: %d", staminaregenfinal, staminaregenbase, basestatdivisor);
				
				// Tension
				staminaregenbase = staminaregenfinal;
				if (TensionLevel == 1) staminaregenfinal = staminaregenfinal * 990 / 1000;
				if (TensionLevel == 2) staminaregenfinal = staminaregenfinal * 975 / 1000;
				if (TensionLevel == 3) staminaregenfinal = staminaregenfinal * 950 / 1000;
				if (TensionLevel == 4) staminaregenfinal = staminaregenfinal * 900 / 1000;
				if (TensionLevel == 5) staminaregenfinal = staminaregenfinal * 750 / 1000;
				if (TensionLevel == 6) staminaregenfinal = staminaregenfinal * 500 / 1000;
				if (TensionLevel == 7) staminaregenfinal = staminaregenfinal * 200 / 1000;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 7: Tension (%d)]: %d\c-, Previous: %d", TensionLevel, staminaregenfinal, staminaregenbase);
				
				// Divine Avatar = -50% Degen
				staminaregenbase = staminaregenfinal;
				if (DivineAvatarTimer > 0) staminaregenfinal *= 0.5;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 8: Divine Avatar]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// GoE = -80% Degen
				staminaregenbase = staminaregenfinal;
				if (GoETimer > 0) staminaregenfinal *= 0.2;
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 8: Divine Avatar]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Speed Buffs
				staminaregenbase = staminaregenfinal;
				if (DQAcceleratleTimer > 0) staminaregenfinal = staminaregenfinal * 6 / 5; // Acceleratle
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 9a: Acceleratle]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				staminaregenbase = staminaregenfinal;
				if (DQDeceleratleTimer > 0) staminaregenfinal = staminaregenfinal * 4 / 5; // Deceleratle
				if (debugstaminaregen) Console.Printf("    \cdStamina Regeneration [Step 9b: Deceleratle]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);

				// Poison = +20% Degen
				staminaregenbase = staminaregenfinal;
				if (PoisonedTimer > 0 && InvulnerabilityTimer == 0) staminaregenfinal = staminaregenfinal * 6 / 5;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 10: Poison]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Fatigue = +400% Degen
				staminaregenbase = staminaregenfinal;
				if (FatigueTimer > 0) staminaregenfinal = staminaregenfinal * 5;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 11: Fatigue]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Sleep = -80% Degen
				staminaregenbase = staminaregenfinal;
				if (SleepTimer > 0)
				{
					staminaregenfinal /= 5;
					PerkFactor = 10000 - ((RegenStamFastPerkLevel * 2000) + (RegenStamFastEXPerkLevel * 5000));
					staminaregenfinal = staminaregenfinal * PerkFactor / 10000; // "RegenStamFast" and "RegenStamFast EX" perks.
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 12: Sleep]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Berserk = -20% Degen
				staminaregenbase = staminaregenfinal;
				if (BerserkTimer > 0) staminaregenfinal = staminaregenfinal * 4 / 5;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 13: Berserk]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Checks Stamina Regen Rate Menu Option
				staminaregenbase = staminaregenfinal;
				staminaregenfinal = staminaregenfinal * 100 / dvds_staminaregenmultiplier;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 14: StamRegen Menu Option]: %d\c-, Previous: %d, Factor: 100 / %d", staminaregenfinal, staminaregenbase, dvds_staminaregenmultiplier);
				
				// Checks the final value based on how high the Max Stamina Pts Cap has been increased by various items
				staminaregenbase = staminaregenfinal;
				staminaregenfinal = (staminaregenfinal * MaximumStamina) / 10000;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 15: StamCapVal]: %d\c-, Previous: %d, Factor: %d / 10000", staminaregenfinal, staminaregenbase, MaximumStamina);
				
				// RegenStamFast perks
				if (RegenStamFastPerkLevel > 0)
				{
					PerkFactor = 10 - ((RegenStamFastPerkLevel * 2) + (RegenStamFastEXPerkLevel * 5));
					staminaregenfinal = staminaregenfinal * PerkFactor / 10; // "RegenStamFast" and "RegenStamFast EX" perks.
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 16: RegenFast Perk]: %d\c-, Previous: %d, Factor: %d / 10", staminaregenfinal, staminaregenbase, PerkFactor);
				
				// Check for Weapons
				staminaregenbase = staminaregenfinal;
				nm = "SauronGauntletsAilish"; APPackCheck = nm;
				nn = "SauronGauntletsPetra"; APPackCheck2 = nn;
				If(weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora" || 
					 weapon is APPackCheck || weapon is APPackCheck2)
				{
					staminaregenfinal = staminaregenfinal * 4 / 3;
				}
				If(weapon is "EvilWarriorShield")
				{
					staminaregenfinal = staminaregenfinal * 8 / 7;
				}
				If (weapon is "Chainsaw2" || weapon is "DoubleBladedChainsaw")
				{
					staminaregenfinal = staminaregenfinal * 10 / 9;
				}
				nm = "FistAilish"; APPackCheck = nm;
				nn = "FistPetra"; APPackCheck2 = nn;
				If (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora" ||
						weapon is APPackCheck || weapon is APPackCheck2)
				{
					staminaregenfinal = staminaregenfinal * 20 / 21;
					if (Owner.CountInv("FistPlayerBlockItem") > 0) staminaregenfinal = staminaregenfinal * random(28,32) / 20;
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 17: Weapons]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// "Cleared of Mind" Perks
				staminaregenbase = staminaregenfinal;
				PerkFactor = 80;
				if (ClearedOfMindParkLevel > 0)
				{
					perkfactor = 80 - ((ClearedOfMindParkLevel * 2) + (ClearedOfMindEXParkLevel * 5));
					staminaregenfinal = staminaregenfinal * perkfactor / 80;
				}
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 18: Cleared of Mind Perk]: %d\c-, Previous: %d, Factor: %d / 80", staminaregenfinal, staminaregenbase, PerkFactor);
				
				// Check Musou Power Trip Mode
				staminaregenbase = staminaregenfinal;
				if (dvds_musou_powertripmode == 1) staminaregenfinal = (staminaregenfinal * 2) / 5; // 40%
				if (dvds_musou_powertripmode == 2) staminaregenfinal = staminaregenfinal / 5; // 20%
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 19: Musou/Power Trip Mode]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);
				
				// Low Caps Regen to 1 tic minimum
				staminaregenbase = staminaregenfinal;
				if (staminaregenfinal > -1) staminaregenfinal = -1;
				if (debugstaminaregen) Console.Printf("    \cdStamina Degeneration [Step 20: LowCap/FINAL]: %d\c-, Previous: %d", staminaregenfinal, staminaregenbase);

				if (UsingInGameMenu != 0) staminaregenfinal = 0; // If using In-Game Menus
				if (CallACS("DVDSSpecialArrayCheckDECORATE",0) == 0) // If Player is "Conscious"
				{
					PlayerCurrentStamina += staminaregenfinal;
					if (PlayerCurrentStamina < MaximumStamina) PlayerCurrentStamina = MaximumStamina;
					CallACS("MiscVarSetDECORATE",21,PlayerCurrentStamina);
				}
				if (debugstaminaregen) Console.Printf("    \cgStamina Degeneration: %d / %d\c-, Loss: %d", PlayerCurrentStamina, MaximumStamina, staminaregenfinal);
			}
			
		}
		
		
		
		
		
		//*********************
		//*Check Aerial Damage*
		//*********************
		if (playeractor && weapon is "SceptreOfEmpyrea")
		{
			landdmgbonus = 0;
			if (FlightTimer < 1) // && buttons & BT_JUMP) // [not Flight]
			{
				if (PlayerVelZ < -128.0)
				{
					landdmgbonus = 4;
					if (debugatkinfo == 1) Console.Printf("    \ceLanding Damage [Lvl 4 - 13.9453125x Melee Dmg]: ZVel: %8f", PlayerVelZ);
					
				}
				else
				if (PlayerVelZ < -32.0)
				{
					landdmgbonus = 3;
					if (debugatkinfo == 1) Console.Printf("    \ceLanding Damage [Lvl 3 - 6.5625x Melee Dmg]: ZVel: %8f", PlayerVelZ);
				}
				else
				if (PlayerVelZ < -8.0)
				{
					landdmgbonus = 2;
					if (debugatkinfo == 1) Console.Printf("    \ceLanding Damage [Lvl 2 - 3.5x Melee Dmg]: ZVel: %8f", PlayerVelZ);
				}
				else
				if (PlayerVelZ < -0.0625)
				{
					landdmgbonus = 1;
					if (debugatkinfo == 1) Console.Printf("    \ceLanding Damage [Lvl 1 - 2x Melee Dmg]: ZVel: %8f", PlayerVelZ);
				}
			}

			double SceptreJumpDmgMulti;
			SceptreJumpDmgMulti = PlayerVelZ / -0.1;
			SceptreJumpDmgMulti += 100;
			if (SceptreJumpDmgMulti < 100) SceptreJumpDmgMulti = 100;
			if (debugatkinfo == 1) Console.Printf("    \ceSceptre Landing Dmg Multiplier: ZVel: %8f%", SceptreJumpDmgMulti);
		}
		
		
		
		
		
		//*********************************************************************
		//***Determines Inventory Amounts Based on Strength Seeds and Level***
		//*********************************************************************
		int debuginventorylimits = dvdsdebug_inventorylimits;
		if (playeractor && ClassCheck > 0)
		{
			int dropamt;
			string itemname;
			// Gets the Number of Collected Backpacks which is the backbone of the system.
			int BackPacksCollected = CallACS("MiscVarCheckDECORATE",80);
			int backpackdivisor = TrueGameSkill + 6;
			int backpackmultiplier = backpackdivisor + BackPacksCollected;
			double itemlimitmultiplier = 1.00;
			int baseholdamount;
			double leveladd;
			double stradd;
			double hexenmodemulti = 5.0;
			double perkmultiplier = 1.0 + ((StamUpPerkLevel * 0.05) + (StamUpExPerkLevel * 0.125));
			let currentitemtype = owner.FindInventory("MedicinalHerb");

			if (dvds_imposeinventorylimits)
			{
				// 5 Medicinal Herbs
				currentitemtype = owner.FindInventory("MedicinalHerb");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 5;
					leveladd = (PlayerLevel * 0.3125);
					stradd = (PlayerSTR * 0.625);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
				}

				// 4 Strong Medicinal Herbs
				currentitemtype = owner.FindInventory("StrongMedicine");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 4;
					leveladd = (PlayerLevel * 0.25);
					stradd = (PlayerSTR * 0.5);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
				}

				// 3 Special Medicinal Herbs
				currentitemtype = owner.FindInventory("SpecialMedicine");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 3;
					leveladd = (PlayerLevel * 0.1875);
					stradd = (PlayerSTR * 0.375);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier); 
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
				}

				// 5 Magic Waters
				currentitemtype = owner.FindInventory("MagicWater");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 5;
					leveladd = (PlayerLevel * 0.3125);
					stradd = (PlayerSTR * 0.625);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier); 
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
				}

				// 4 Sage Elixirs
				currentitemtype = owner.FindInventory("SageElixir");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 4;
					leveladd = (PlayerLevel * 0.25);
					stradd = (PlayerSTR * 0.5);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier); 
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
				}

				// 3 Elfin Elixirs
				currentitemtype = owner.FindInventory("ElfinElixir");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 3;
					leveladd = (PlayerLevel * 0.1875);
					stradd = (PlayerSTR * 0.375);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier); 
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
				}

				// 1 Yggdrasil Dew [16, 8]
				currentitemtype = owner.FindInventory("YggdrasilDew");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 1;
					leveladd = (PlayerLevel * 0.0625);
					stradd = (PlayerSTR * 0.125);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier); 
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
				}

				// 1 Miracle Potion [16, 8]
				currentitemtype = owner.FindInventory("MiraclePotion");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 1;
					leveladd = (PlayerLevel * 0.0625);
					stradd = (PlayerSTR * 0.125);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier); 
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
				}

				// 4 Rockbomb Shards [8, 4]
				currentitemtype = owner.FindInventory("RockBombShard");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 4;
					leveladd = (PlayerLevel * 0.125);
					stradd = (PlayerSTR * 0.25);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier); 
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
				}

				// 1 Paxa Punch [16, 8]
				currentitemtype = owner.FindInventory("PaxaPunch");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 1;
					leveladd = (PlayerLevel * 0.0625);
					stradd = (PlayerSTR * 0.125);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier); 
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
				}

				// 1 Mercury Bandana [16, 8]
				currentitemtype = owner.FindInventory("MercuryBandana");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 1;
					leveladd = (PlayerLevel * 0.0625);
					stradd = (PlayerSTR * 0.125);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier); 
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
				}

				// 1 Monster Munchies [8, 4]
				currentitemtype = owner.FindInventory("MonsterMunchies");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 1;
					leveladd = (PlayerLevel * 0.125);
					stradd = (PlayerSTR * 0.25);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier); 
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
				}

				// 2 Lesser Vimstones [8, 4]
				currentitemtype = owner.FindInventory("LesserVimstone");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 2;
					leveladd = (PlayerLevel * 0.125);
					stradd = (PlayerSTR * 0.25);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier); 
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
				}

				// 1 Greater Vimstones [16, 8]
				currentitemtype = owner.FindInventory("GreaterVimstone");
				if (currentitemtype)
				{
					itemname = currentitemtype.GetClassName();
					baseholdamount = 1;
					leveladd = (PlayerLevel * 0.0625);
					stradd = (PlayerSTR * 0.125);
					if (ClassicDoomType == 3) { leveladd *= hexenmodemulti; stradd *= hexenmodemulti; }
					currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier); 
					if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
					if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
				}


				if (ClassicDoomType == 2) // Heretic
				{
					// 5 Quartz Flasks
					pm = "ArtiHealthNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 5;
						leveladd = (PlayerLevel * 0.3125);
						stradd = (PlayerSTR * 0.625);
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 1 Mystic Urn [16, 8]
					pm = "ArtiSuperHealthNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}


					// 2 Chaos Devices [8, 4]
					pm = "ArtiTeleportNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 2;
						leveladd = (PlayerLevel * 0.125);
						stradd = (PlayerSTR * 0.25);
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 1 Morph Ovum [16, 8]
					pm = "ArtiEggNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 1 Shadow Sphere [16, 8]
					pm = "ArtiInvisibilityNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 1 Ring of Invulnerability [16, 8]
					pm = "ArtiInvulnerabilityNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}
				}
				if (ClassicDoomType == 3) // Hexen
				{
					// 5 Quartz Flasks
					pm = "ArtiHealthNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 5;
						leveladd = (PlayerLevel * 0.3125);
						stradd = (PlayerSTR * 0.625);
						leveladd *= hexenmodemulti; stradd *= hexenmodemulti;
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 3 Mystic Ambit Incant
					pm = "ArtiHealingRadiusNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 3;
						leveladd = (PlayerLevel * 0.1875);
						stradd = (PlayerSTR * 0.375);
						leveladd *= hexenmodemulti; stradd *= hexenmodemulti;
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 1 Mystic Urn [16, 8]
					pm = "ArtiSuperHealthNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						leveladd *= hexenmodemulti; stradd *= hexenmodemulti;
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 1 Krater of Might [16, 8]
					pm = "ArtiBoostManaNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						leveladd *= hexenmodemulti; stradd *= hexenmodemulti;
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 2 Chaos Devices [8, 4]
					pm = "ArtiTeleportNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 2;
						leveladd = (PlayerLevel * 0.125);
						stradd = (PlayerSTR * 0.25);
						leveladd *= hexenmodemulti; stradd *= hexenmodemulti;
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 2 Banishment Devices
					pm = "ArtiTeleportOtherNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 2;
						leveladd = (PlayerLevel * 0.125);
						stradd = (PlayerSTR * 0.25);
						leveladd *= hexenmodemulti; stradd *= hexenmodemulti;
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 1 Dark Servant [16, 8]
					pm = "ArtiDarkServantNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						leveladd *= hexenmodemulti; stradd *= hexenmodemulti;
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 1 Porkulator [16, 8]
					pm = "ArtiPorkNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						leveladd *= hexenmodemulti; stradd *= hexenmodemulti;
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 1 Icon of The Defender [16, 8]
					pm = "ArtiInvulnerability2New"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						leveladd *= hexenmodemulti; stradd *= hexenmodemulti;
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}
				}
				if (ClassicDoomType == 4) // Strife
				{
					// 10 Med Patches
					pm = "MedPatchNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 8;
						leveladd = (PlayerLevel * 0.625);
						stradd = (PlayerSTR * 1.25);
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 6 Medicial Kits [3.2 1.6]
					pm = "MedicalKitNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 6;
						leveladd = (PlayerLevel * 0.375);
						stradd = (PlayerSTR * 0.75);
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 2 Surgery Kits [8, 4]
					pm = "SurgeryKitNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 2;
						leveladd = (PlayerLevel * 0.125);
						stradd = (PlayerSTR * 0.25);
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 2 Scanners [8, 4]
					pm = "ScannerNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 2;
						leveladd = (PlayerLevel * 0.125);
						stradd = (PlayerSTR * 0.25);
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 2 Targetters [8, 4]
					pm = "TargeterNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 2;
						leveladd = (PlayerLevel * 0.125);
						stradd = (PlayerSTR * 0.25);
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 3 Environmental Suits [5.333, 2.667]
					pm = "EnvironmentalSuitNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 3;
						leveladd = (PlayerLevel * 0.1875);
						stradd = (PlayerSTR * 0.375);
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 1 Shadow Armor [16, 8]
					pm = "ShadowArmorNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 1;
						leveladd = (PlayerLevel * 0.0625);
						stradd = (PlayerSTR * 0.125);
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 2 Teleporter Beacons [8, 4]
					pm = "TeleporterBeaconNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 2;
						leveladd = (PlayerLevel * 0.125);
						stradd = (PlayerSTR * 0.25);
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}

					// 8 Degnin Ore [2, 1]
					pm = "DegninOreNew"; iDTech1Check = pm;
					currentitemtype = owner.FindInventory(iDTech1Check);
					if (currentitemtype)
					{
						itemname = currentitemtype.GetClassName();
						baseholdamount = 8;
						leveladd = (PlayerLevel * 0.5);
						stradd = (PlayerSTR * 1.0);
						currentitemtype.MaxAmount = ((((((baseholdamount + leveladd + stradd) * backpackmultiplier) / backpackdivisor) * itemlimitmultiplier)) * perkmultiplier);
						if (currentitemtype.Amount > currentitemtype.MaxAmount) { dropamt = currentitemtype.MaxAmount - currentitemtype.Amount; owner.A_DropInventory(itemname,dropamt); }
						if (debuginventorylimits) Console.Printf("%s: %d / %d, Backpacks: %d (%d), BaseAmt: %d, LevelAdd: %8f, StrAdd: %8f, ItemMulti: %8f, PerkMulti: %8f", itemname, currentitemtype.Amount, currentitemtype.MaxAmount, BackPacksCollected, backpackdivisor, baseholdamount, leveladd, stradd, itemlimitmultiplier, perkmultiplier);
					}
				}
			}
			else
			{
				if (owner) 
				{
					if (owner.FindInventory("MedicinalHerb")) owner.FindInventory("MedicinalHerb").MaxAmount = 9999;
					if (owner.FindInventory("StrongMedicine")) owner.FindInventory("StrongMedicine").MaxAmount = 9999;
					if (owner.FindInventory("SpecialMedicine")) owner.FindInventory("SpecialMedicine").MaxAmount = 9999;
					if (owner.FindInventory("MagicWater")) owner.FindInventory("MagicWater").MaxAmount = 9999;
					if (owner.FindInventory("SageElixir")) owner.FindInventory("SageElixir").MaxAmount = 9999;
					if (owner.FindInventory("ElfinElixir")) owner.FindInventory("ElfinElixir").MaxAmount = 9999;
					if (owner.FindInventory("MiraclePotion")) owner.FindInventory("MiraclePotion").MaxAmount = 9999;
					if (owner.FindInventory("YggdrasilDew")) owner.FindInventory("YggdrasilDew").MaxAmount = 9999;
					if (owner.FindInventory("RockbombShard")) owner.FindInventory("RockbombShard").MaxAmount = 9999;
					if (owner.FindInventory("PaxaPunch")) owner.FindInventory("PaxaPunch").MaxAmount = 9999;
					if (owner.FindInventory("MercuryBandana")) owner.FindInventory("MercuryBandana").MaxAmount = 9999;
					if (owner.FindInventory("MonsterMunchies")) owner.FindInventory("MonsterMunchies").MaxAmount = 9999;
					if (owner.FindInventory("LesserVimstone")) owner.FindInventory("LesserVimstone").MaxAmount = 9999;
					if (owner.FindInventory("GreaterVimstone")) owner.FindInventory("GreaterVimstone").MaxAmount = 9999;
					if (ClassicDoomType == 2) // Heretic
					{
						pm = "ArtiHealthNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "ArtiSuperHealthNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "ArtiTeleportNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "ArtiEggNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "ArtiInvisibilityNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "ArtiInvulnerabilityNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
					}
					if (ClassicDoomType == 3) // Hexen
					{
						pm = "ArtiHealthNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "ArtiHealingRadiusNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "ArtiSuperHealthNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "ArtiBoostManaNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "ArtiTeleportNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "ArtiTeleportOtherNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "ArtiDarkServantNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "ArtiPorkNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "ArtiInvulnerability2New"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
					}
					if (ClassicDoomType == 4) // Strife
					{
						pm = "MedPatchNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "MedicalKitNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "SurgeryKitNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "ScannerNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "TargeterNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "EnvironmentalSuitNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "ShadowArmorNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "TeleporterBeaconNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
						pm = "DegninOreNew"; iDTech1Check = pm; if (owner.FindInventory(iDTech1Check)) owner.FindInventory(iDTech1Check).MaxAmount = 9999;
					}
				}
			}
			
		}
		
		
		
		
		
		//***********************************************************************
		//***Determines Maximum Ammo Amounts Based on Strength Seeds and Level***
		//***********************************************************************
		if (playeractor)
		{
			// Default Ammo Types
			int DiarisArrowMax, DiarisArrowUltimateMax;
			// Doom Ammo Types
			int ClipMax, ClipUltimateMax;
			int ShellMax, ShellUltimateMax;
			int RocketMax, RocketUltimateMax;
			int CellMax, CellUltimateMax;
			// Heretic Ammo Types
			int GoldWandAmmoMax, GoldWandAmmoUltimateMax;
			int CrossbowAmmoMax, CrossbowAmmoUltimateMax;
			int BlasterAmmoMax, BlasterAmmoUltimateMax;
			int PhoenixRodAmmoMax, PhoenixRodAmmoUltimateMax;
			int SkullRodAmmoMax, SkullRodAmmoUltimateMax;
			int MaceAmmoMax, MaceAmmoUltimateMax;
			// Hexen Ammo Types
			// Strife Ammo Types
			int ElectricBoltsMax, ElectricBoltsUltimateMax;
			int PoisonBoltsMax, PoisonBoltsUltimateMax;
			int ClipOfBulletsMax, ClipOfBulletsUltimateMax;
			int MiniMissilesMax, MiniMissilesUltimateMax;
			int EnergyPodMax, EnergyPodUltimateMax;
			int HEGrenadeRoundsMax, HEGrenadeRoundsUltimateMax;
			int PHGrenadeRoundsMax, PHGrenadeRoundsUltimateMax;
			// Misc Non-idTech1 ammo types
			int RifleAmmoMax, RifleAmmoUltimateMax; // KDIZD
			int PopcornPieceMax, PopcornPieceUltimateMax; // HTC2 [400]
			int GoreBalloonsMax, GoreBalloonsUltimateMax; // HTC2 [50]
			int CGrenadeAmmoMax, CGrenadeAmmoUltimateMax; // HTC2 [100]
			int ClownSoulsMax, ClownSoulsUltimateMax; // HTC2 [400]
			int CZBallMax, CZBallUltimateMax; // HTC2 [25]
			
			int BackPacksCollected = CallACS("MiscVarCheckDECORATE",80);

			// Get Ammo Values
			if (CharacterClass == 0) // Deggaris
			{
				// Default Ammo Types
				DiarisArrowUltimateMax = 0;
				DiarisArrowMax = 0;
				// Doom Types
				ClipUltimateMax = 500 + (PlayerSTR * 5) + (PlayerLevel * 10);
				ClipMax = 250 + (BackPacksCollected * 100); 
				ShellUltimateMax = 140 + (PlayerSTR * 2) + (PlayerLevel * 4);
				ShellMax = 70 + (BackPacksCollected * 25);
				RocketUltimateMax = 120 + (PlayerSTR * 1) + (PlayerLevel * 2);
				RocketMax = 60 + (BackPacksCollected * 25);
				CellUltimateMax = 750 + (PlayerSTR * 20) + (PlayerLevel * 40);
				CellMax = 375 + (BackPacksCollected * 150);
				// Misc Non-idTech1 ammo types
				RifleAmmoUltimateMax = 75 + (PlayerSTR * 5 / 2) + (PlayerLevel * 5);
				RifleAmmoMax = 37 + (BackPacksCollected * 2);
				PopcornPieceUltimateMax = 400;
				PopcornPieceMax = 400;
				GoreBalloonsUltimateMax = 50;
				GoreBalloonsMax = 50;
				CGrenadeAmmoUltimateMax = 100;
				CGrenadeAmmoMax = 100;
				ClownSoulsUltimateMax = 400;
				ClownSoulsMax = 400;
				CZBallUltimateMax = 25;
				CZBallMax = 25;
			}
			if (CharacterClass == 1) // Illucia
			{
				// Default Ammo Types
				DiarisArrowUltimateMax = 0;
				DiarisArrowMax = 0;
				// Doom Types
				ClipUltimateMax = 300 + (PlayerSTR * 15 / 4) + (PlayerLevel * 15 / 2);
				ClipMax = 175 + (BackPacksCollected * 100); 
				ShellUltimateMax = 90 + (PlayerSTR * 3 / 2) + (PlayerLevel * 3);
				ShellMax = 45 + (BackPacksCollected * 25);
				RocketUltimateMax = 70 + (PlayerSTR * 3 / 4) + (PlayerLevel * 3 / 2);
				RocketMax = 35 + (BackPacksCollected * 25);
				CellUltimateMax = 500 + (PlayerSTR * 15) + (PlayerLevel * 30);
				CellMax = 250 + (BackPacksCollected * 150);
				// Misc Non-idTech1 ammo types
				RifleAmmoUltimateMax = 60 + (PlayerSTR * 2) + (PlayerLevel * 4);
				RifleAmmoMax = 30 + (BackPacksCollected * 2);
				PopcornPieceUltimateMax = 400;
				PopcornPieceMax = 400;
				GoreBalloonsUltimateMax = 50;
				GoreBalloonsMax = 50;
				CGrenadeAmmoUltimateMax = 100;
				CGrenadeAmmoMax = 100;
				ClownSoulsUltimateMax = 400;
				ClownSoulsMax = 400;
				CZBallUltimateMax = 25;
				CZBallMax = 25;
			}
			if (CharacterClass == 2) // Flora
			{
				// Default Ammo Types
				DiarisArrowUltimateMax = 30 + (PlayerSTR * 3) + (PlayerLevel * 6);
				DiarisArrowMax = 15 + (BackPacksCollected * 15);
				// Doom Types
				if (owner.CountInv("FloraLearnedPistols") > 0) 
				{ 
					ClipUltimateMax = 200 + ((PlayerSTR * 5) / 2) + (PlayerLevel * 5);
					ClipMax = 100 + (BackPacksCollected * 100); 
				} 
				else 
				{ 
					ClipUltimateMax = 0;
					ClipMax = 0; 
				}
				ShellUltimateMax = 0;
				ShellMax = 0;
				RocketUltimateMax = 0;
				RocketMax = 0;
				CellUltimateMax = 0;
				CellMax = 0;
				// Heretic Types
				GoldWandAmmoUltimateMax = 200 + (PlayerSTR * 5) + (PlayerLevel * 10);
				GoldWandAmmoMax = 100 + (BackPacksCollected * 40);
				CrossbowAmmoUltimateMax = 100 + (PlayerSTR * 2) + (PlayerLevel * 4);
				CrossbowAmmoMax = 50 + (BackPacksCollected * 20);
				BlasterAmmoUltimateMax = 400 + (PlayerSTR * 5) + (PlayerLevel * 10);
				BlasterAmmoMax = 200 + (BackPacksCollected * 50);
				PhoenixRodAmmoUltimateMax = 40 + (PlayerSTR * 1) + (PlayerLevel * 2);
				PhoenixRodAmmoMax = 20 + (BackPacksCollected * 5);
				SkullRodAmmoUltimateMax = 400 + (PlayerSTR * 10) + (PlayerLevel * 20);
				SkullRodAmmoMax = 200 + (BackPacksCollected * 50);
				MaceAmmoUltimateMax = 300 + (PlayerSTR * 10) + (PlayerLevel * 20);
				MaceAmmoMax = 150 + (BackPacksCollected * 38);
				// Strife Types
				ElectricBoltsUltimateMax = 100 + (PlayerSTR * 10) + (PlayerLevel * 20);
				ElectricBoltsMax = 50 + (BackPacksCollected * 16);
				PoisonBoltsUltimateMax = 50 + (PlayerSTR * 5) + (PlayerLevel * 10);
				PoisonBoltsMax = 25 + (BackPacksCollected * 8);
				ClipOfBulletsUltimateMax = 0;
				ClipOfBulletsMax = 0;
				MiniMissilesUltimateMax = 0;
				MiniMissilesMax = 0;
				EnergyPodUltimateMax = 0;
				EnergyPodMax = 0;
				HEGrenadeRoundsUltimateMax = 0;
				HEGrenadeRoundsMax = 0;
				PHGrenadeRoundsUltimateMax = 0;
				PHGrenadeRoundsMax = 0;
				// Misc Non-idTech1 ammo types
				RifleAmmoUltimateMax = 0;
				RifleAmmoMax = 0;
				PopcornPieceUltimateMax = 400;
				PopcornPieceMax = 400;
				GoreBalloonsUltimateMax = 50;
				GoreBalloonsMax = 50;
				CGrenadeAmmoUltimateMax = 100;
				CGrenadeAmmoMax = 100;
				ClownSoulsUltimateMax = 400;
				ClownSoulsMax = 400;
				CZBallUltimateMax = 25;
				CZBallMax = 25;
			}
			if (CharacterClass == 8) // Ailish
			{
			}
			if (CharacterClass == 9) // Petra
			{
			}
			int debugbackpack = 0;
			if (debugbackpack)
			{
				Console.Printf("Diaris: %d / %d, Clip: %d / %d, Shell: %d / %d, Rocket: %d / %d, Cell: %d / %d, Rifle: %d / %d,
				\ci GoldWand: %d / %d, Crossbow: %d / %d, DragonClaw: %d / %d, PhoenixRod: %d / %d, Hellstaff: %d / %d, FireMace: %d / %d,
				\cp ElecArrows: %d / %d, PoisonArrows: %d / %d, StrifeRifle: %d / %d, MiniMissiles: %d / %d, EnergyPod: %d / %d, HEGrenades: %d / %d, PHGrenades: %d / %d", 
												DiarisArrowMax, DiarisArrowUltimateMax, 
												ClipMax, ClipUltimateMax, 
												ShellMax, ShellUltimateMax,
												RocketMax, RocketUltimateMax,
												CellMax, CellUltimateMax,
												RifleAmmoMax, RifleAmmoUltimateMax,
												GoldWandAmmoMax, GoldWandAmmoUltimateMax,
												CrossbowAmmoMax, CrossbowAmmoUltimateMax,
												BlasterAmmoMax, BlasterAmmoUltimateMax,
												PhoenixRodAmmoMax, PhoenixRodAmmoUltimateMax,
												SkullRodAmmoMax, SkullRodAmmoUltimateMax,
												MaceAmmoMax, MaceAmmoUltimateMax,
												ElectricBoltsMax, ElectricBoltsUltimateMax,
												PoisonBoltsMax, PoisonBoltsUltimateMax,
												ClipOfBulletsMax, ClipOfBulletsUltimateMax,
												MiniMissilesMax, MiniMissilesUltimateMax,
												EnergyPodMax, EnergyPodUltimateMax,
												HEGrenadeRoundsMax, HEGrenadeRoundsUltimateMax,
												PHGrenadeRoundsUltimateMax, PHGrenadeRoundsUltimateMax);
			}

			// Hexen has no backpack item so in Hexen so max ammo is solely determined on Strength stat and Level.
			if (ClassicDoomType == 3)
			{
				DiarisArrowMax = DiarisArrowUltimateMax;
				ClipMax = ClipUltimateMax;
				ShellMax = ShellUltimateMax;
				RocketMax = RocketUltimateMax;
				CellMax = CellUltimateMax;
				GoldWandAmmoMax = GoldWandAmmoUltimateMax;
				CrossbowAmmoMax = CrossbowAmmoUltimateMax;
				BlasterAmmoMax = BlasterAmmoUltimateMax;
				PhoenixRodAmmoMax = PhoenixRodAmmoUltimateMax;
				SkullRodAmmoMax = SkullRodAmmoUltimateMax;
				MaceAmmoMax = MaceAmmoUltimateMax;
				ElectricBoltsMax = ElectricBoltsUltimateMax;
				PoisonBoltsMax = PoisonBoltsUltimateMax;
				ClipOfBulletsMax = ClipOfBulletsUltimateMax;
				MiniMissilesMax = MiniMissilesUltimateMax;
				EnergyPodMax = EnergyPodUltimateMax;
				HEGrenadeRoundsMax = HEGrenadeRoundsUltimateMax;
				PHGrenadeRoundsMax = PHGrenadeRoundsUltimateMax;
				RifleAmmoMax = RifleAmmoUltimateMax; // KDIZD
				PopcornPieceMax = PopcornPieceUltimateMax; // HTC2
				GoreBalloonsMax = GoreBalloonsUltimateMax; // HTC2
				CGrenadeAmmoMax = CGrenadeAmmoUltimateMax; // HTC2
				ClownSoulsMax = ClownSoulsUltimateMax; // HTC2
				CZBallMax = CZBallUltimateMax; // HTC2
			}
			
			// Cap Maximum Ammo Limits
			if (DiarisArrowMax > DiarisArrowUltimateMax) DiarisArrowMax = DiarisArrowUltimateMax;
			if (ClipMax > ClipUltimateMax) ClipMax = ClipUltimateMax;
			if (ShellMax > ShellUltimateMax) ShellMax = ShellUltimateMax;
			if (RocketMax > RocketUltimateMax) RocketMax = RocketUltimateMax;
			if (CellMax > CellUltimateMax) CellMax = CellUltimateMax;
			if (GoldWandAmmoMax > GoldWandAmmoUltimateMax) GoldWandAmmoMax = GoldWandAmmoUltimateMax;
			if (CrossbowAmmoMax > CrossbowAmmoUltimateMax) CrossbowAmmoMax = CrossbowAmmoUltimateMax;
			if (BlasterAmmoMax > BlasterAmmoUltimateMax) BlasterAmmoMax = BlasterAmmoUltimateMax;
			if (PhoenixRodAmmoMax > PhoenixRodAmmoUltimateMax) PhoenixRodAmmoMax = PhoenixRodAmmoUltimateMax;
			if (SkullRodAmmoMax > SkullRodAmmoUltimateMax) SkullRodAmmoMax = SkullRodAmmoUltimateMax;
			if (MaceAmmoMax > MaceAmmoUltimateMax) MaceAmmoMax = MaceAmmoUltimateMax;
			if (ElectricBoltsMax > ElectricBoltsUltimateMax) ElectricBoltsMax = ElectricBoltsUltimateMax;
			if (PoisonBoltsMax > PoisonBoltsUltimateMax) PoisonBoltsMax = PoisonBoltsUltimateMax;
			if (ClipOfBulletsMax > ClipOfBulletsUltimateMax) ClipOfBulletsMax = ClipOfBulletsUltimateMax;
			if (MiniMissilesMax > MiniMissilesUltimateMax) MiniMissilesMax = MiniMissilesUltimateMax;
			if (EnergyPodMax > EnergyPodUltimateMax) EnergyPodMax = EnergyPodUltimateMax;
			if (HEGrenadeRoundsMax > HEGrenadeRoundsUltimateMax) HEGrenadeRoundsMax = HEGrenadeRoundsUltimateMax;
			if (PHGrenadeRoundsMax > PHGrenadeRoundsUltimateMax) PHGrenadeRoundsMax = PHGrenadeRoundsUltimateMax;
			if (RifleAmmoMax > RifleAmmoUltimateMax) RifleAmmoMax = RifleAmmoUltimateMax;
			if (PopcornPieceMax > PopcornPieceUltimateMax) PopcornPieceMax = PopcornPieceUltimateMax; // HTC2
			if (GoreBalloonsMax > GoreBalloonsUltimateMax) GoreBalloonsMax = GoreBalloonsUltimateMax; // HTC2
			if (CGrenadeAmmoMax > CGrenadeAmmoUltimateMax) CGrenadeAmmoMax = CGrenadeAmmoUltimateMax; // HTC2
			if (ClownSoulsMax > ClownSoulsUltimateMax) ClownSoulsMax = ClownSoulsUltimateMax; // HTC2
			if (CZBallMax > CZBallUltimateMax) CZBallMax = CZBallUltimateMax; // HTC2

			// Set Maximum Ammo Values
			let currentammotype = owner.FindInventory("DiarisArrow"); 
			if (currentammotype) 
			{
				currentammotype.MaxAmount = DiarisArrowMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
			}
			if (ClassicDoomType == 0 || ClassicDoomType == 1) // Doom 2 and Doom 1
			{
				currentammotype = owner.FindInventory("Clip");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = ClipMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}

				currentammotype = owner.FindInventory("Shell");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = ShellMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}

				currentammotype = owner.FindInventory("RocketAmmo");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = RocketMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}

				currentammotype = owner.FindInventory("Cell");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = CellMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}
			}
			if (ClassicDoomType == 2) // Heretic
			{
				currentammotype = owner.FindInventory("GoldWandAmmo");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = GoldWandAmmoMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}

				currentammotype = owner.FindInventory("CrossbowAmmo");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = CrossbowAmmoMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}

				currentammotype = owner.FindInventory("BlasterAmmo");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = BlasterAmmoMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}

				currentammotype = owner.FindInventory("PhoenixRodAmmo");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = PhoenixRodAmmoMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}

				currentammotype = owner.FindInventory("SkullRodAmmo");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = SkullRodAmmoMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}

				currentammotype = owner.FindInventory("MaceAmmo");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = MaceAmmoMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}
			}
			if (ClassicDoomType == 4) // Strife
			{
				currentammotype = owner.FindInventory("ElectricBolts");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = ElectricBoltsMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}

				currentammotype = owner.FindInventory("PoisonBolts");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = PoisonBoltsMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}

				currentammotype = owner.FindInventory("ClipOfBullets");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = ClipOfBulletsMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}

				currentammotype = owner.FindInventory("MiniMissiles");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = MiniMissilesMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}

				currentammotype = owner.FindInventory("EnergyPod");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = EnergyPodMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}

				currentammotype = owner.FindInventory("HEGrenadeRounds");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = HEGrenadeRoundsMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}

				currentammotype = owner.FindInventory("PhosphorusGrenadeRounds");
				if (currentammotype) 
				{
					currentammotype.MaxAmount = PHGrenadeRoundsMax;
					if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
				}
			}
			// None Main Game Ammo Types
			nm = "RifleAmmo"; APPackCheck = nm; currentammotype = owner.FindInventory(APPackCheck);
			if (currentammotype) 
			{
				currentammotype.MaxAmount = RifleAmmoMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
			}

			nm = "PopcornPiece"; APPackCheck = nm; currentammotype = owner.FindInventory(APPackCheck);
			if (currentammotype) 
			{
				currentammotype.MaxAmount = PopcornPieceMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
			}

			nm = "GoreBalloons"; APPackCheck = nm; currentammotype = owner.FindInventory(APPackCheck);
			if (currentammotype) 
			{
				currentammotype.MaxAmount = GoreBalloonsMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
			}

			nm = "CGrenadeAmmo"; APPackCheck = nm; currentammotype = owner.FindInventory(APPackCheck);
			if (currentammotype) 
			{
				currentammotype.MaxAmount = CGrenadeAmmoMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
			}

			nm = "ClownSouls"; APPackCheck = nm; currentammotype = owner.FindInventory(APPackCheck);
			if (currentammotype) 
			{
				currentammotype.MaxAmount = ClownSoulsMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
			}

			nm = "CZBall"; APPackCheck = nm; currentammotype = owner.FindInventory(APPackCheck);
			if (currentammotype) 
			{
				currentammotype.MaxAmount = CZBallMax;
				if (currentammotype.Amount > currentammotype.MaxAmount) currentammotype.Amount = currentammotype.MaxAmount;
			}

		}
		
		
		
		
		
		//**************************************
		//***Affects Powerup Timer Countdowns***
		//**************************************
		if (playeractor)
		{
			int BaseTimerIncrement;

			// Light/Infared
			if (CallACS("GetBuffTimer",0) > 0)
			{
				owner.A_GiveInventory("NightVisionSpell",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",0,3,1);
			}
			else
			{
				owner.A_TakeInventory("NightVisionSpell",0x7FFFFFFF);
			}
			
			// Invisibility
			if (CallACS("GetBuffTimer",1) > 0)
			{
				owner.A_GiveInventory("InvisiblitySpell",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",1,3,1);
			}
			else
			{
				owner.A_TakeInventory("InvisiblitySpell",0x7FFFFFFF);
			}
			
			// Flight
			if (CallACS("GetBuffTimer",2) > 0)
			{
				owner.A_GiveInventory("FlightSpell",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",2,3,1);
			}
			else
			{
				owner.A_TakeInventory("FlightSpell",0x7FFFFFFF);
			}
			
			// Stealth
			if (CallACS("GetBuffTimer",3) > 0)
			{
				owner.player.cheats |= CF_NOTARGET;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",3,3,1);
			}
			else
			{
				owner.player.cheats &= ~CF_NOTARGET;
			}
			
			// Invulnerability
			if (CallACS("GetBuffTimer",4) > 0)
			{
				owner.A_GiveInventory("InvulnerabilitySpell",1);
				owner.A_GiveInventory("IsInvulnerable",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",4,3,1);
			}
			else
			{
				owner.A_TakeInventory("InvulnerabilitySpell",0x7FFFFFFF);
				owner.A_TakeInventory("IsInvulnerable",0x7FFFFFFF);
			}
			
			// Time Stop
			if (CallACS("GetBuffTimer",5) > 0)
			{
				owner.A_GiveInventory("AetheriusTimeFreezer",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",5,3,1);
			}
			else
			{
				if (UsingInGameMenu == 0) owner.A_TakeInventory("AetheriusTimeFreezer",0x7FFFFFFF);
			}
			
			// Fear Aura Effects
			if (CallACS("GetBuffTimer",6) > 0)
			{
				owner.A_GiveInventory("PowerFrightener",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",6,3,1);
			}
			else
			{
				owner.A_TakeInventory("PowerFrightener",0x7FFFFFFF);
			}
			
			// Divine Avatar Effects
			if (CallACS("GetBuffTimer",7) > 0)
			{
				owner.A_GiveInventory("PowerDoubleFiringSpeed",1);
				owner.A_GiveInventory("DivineAvatarHighJump",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",7,3,1);
			}
			else
			{
				owner.A_TakeInventory("PowerDoubleFiringSpeed",0x7FFFFFFF);
				owner.A_TakeInventory("DivineAvatarHighJump",0x7FFFFFFF);
			}
			
			// Speader Aura Lv. 1 Effects
			if (CallACS("GetBuffTimer",9) > 0)
			{
				CallACS("GetBuffTimer",8,1,0);
				owner.A_TakeInventory("SpreaderAura1",0x7FFFFFFF);
			}
			else
			{
				if (CallACS("GetBuffTimer",8) > 0)
				{
					owner.A_GiveInventory("SpreaderAura1",1);
					if (UsingInGameMenu == 0) CallACS("GetBuffTimer",8,3,1);
				}
				else
				{
					owner.A_TakeInventory("SpreaderAura1",0x7FFFFFFF);
				}
			}
			
			// Speader Aura Lv. 2 Effects
			if (CallACS("GetBuffTimer",9) > 0)
			{
				owner.A_GiveInventory("SpreaderAura2",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",9,3,1);
			}
			else
			{
				owner.A_TakeInventory("SpreaderAura2",0x7FFFFFFF);
			}
			
			// Oomph Effects
			if (CallACS("GetBuffTimer",10) > 0) { if (UsingInGameMenu == 0) CallACS("GetBuffTimer",10,3,1); }
			
			// Buff Effects
			if (CallACS("GetBuffTimer",11) > 0) { if (UsingInGameMenu == 0) CallACS("GetBuffTimer",11,3,1); }
			
			// Acceleratle Effects
			if (CallACS("GetBuffTimer",12) > 0) { if (UsingInGameMenu == 0) CallACS("GetBuffTimer",12,3,1); }
			
			// Blunt Effects
			if (CallACS("GetBuffTimer",13) > 0)
			{
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random(1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random(1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",13,3,BaseTimerIncrement);
			}
			
			// Sap Effects
			if (CallACS("GetBuffTimer",14) > 0)
			{
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random(1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random(1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",14,3,BaseTimerIncrement);
			}
			
			// Deceleratle Effects
			if (CallACS("GetBuffTimer",15) > 0)
			{
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random(1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random(1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",15,3,BaseTimerIncrement);
			}
			
			// Poison Effects
			if (CallACS("GetBuffTimer",16) > 0)
			{
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random(1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random(1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",16,3,BaseTimerIncrement);
			}
			
			// Corrosion Effects
			if (CallACS("GetBuffTimer",17) > 0)
			{
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random(1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random(1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",17,3,BaseTimerIncrement);
			}
			
			// Fatigue Effects
			if (CallACS("GetBuffTimer",18) > 0)
			{
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random(1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random(1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",18,3,BaseTimerIncrement);
			}
			
			// Blind Effects
			if (CallACS("GetBuffTimer",19) > 0)
			{
				CallACS("MiscVarSetDECORATE",248,1,1);
				if (CallACS("MiscVarCheckDECORATE",248) == 1)
				{
					owner.A_PlaySound("misc/blinded",CHAN_5,1.0,0,ATTN_NORM);
					if (CharacterClass == 2) { owner.A_StopSound(CHAN_VOICE); owner.A_PlaySound("FloraGotBlinded",CHAN_VOICE,1.0,0,ATTN_NORM); }
				}
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random(1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random(1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",19,3,BaseTimerIncrement);
			}
			else
			{
				CallACS("MiscVarSetDECORATE",248,0,0);
			}
			
			// Sleep Effects
			if (CallACS("GetBuffTimer",20) > 0)
			{
				CallACS("MiscVarSetDECORATE",249,1,1);
				if (CallACS("MiscVarCheckDECORATE",249) == 1)
				{
					owner.A_PlaySound("DraQue/fallasleep",CHAN_5,1.0,0,ATTN_NORM);
					if (CharacterClass == 2) { owner.A_StopSound(CHAN_VOICE); owner.A_PlaySound("FloraFallAsleep",CHAN_VOICE,1.0,0,ATTN_NORM); }
				}
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random(1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random(1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",20,3,BaseTimerIncrement);
			}
			else
			{
				CallACS("MiscVarSetDECORATE",249,0,0);
			}
			
			
			// Silence Effects
			if (CallACS("GetBuffTimer",21) > 0)
			{
				CallACS("MiscVarSetDECORATE",270,1,1);
				if (CallACS("MiscVarCheckDECORATE",270) == 1)
				{
					owner.A_PlaySound("DraQue/sealed",CHAN_5,1.0,0,ATTN_NORM);
					// if (CharacterClass == 2) { owner.A_StopSound(CHAN_VOICE); owner.A_PlaySound("FloraSpSealed",CHAN_VOICE,1.0,0,ATTN_NORM); }
				}
				BaseTimerIncrement = 1; 
				if (owner.CountInv("EvenstarNecklace") > 0 && random(1,6) == 1) BaseTimerIncrement += 1;
				if (owner.CountInv("BalrogRing") > 0 && random(1,12) == 1) BaseTimerIncrement += 1;
				if (CallACS("GetBuffTimer",7) > 0) BaseTimerIncrement *= 2;
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",21,3,BaseTimerIncrement);
			}
			else
			{
				CallACS("MiscVarSetDECORATE",270,0,0);
			}
			
			// RadSphere Effects
			if (CallACS("GetBuffTimer",22) > 0)
			{
				if (ClassicDoomType == 4) owner.A_GiveInventory("PowerMask",1); else owner.A_GiveInventory("PowerIronFeet",1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",22,3,1);
			}
			else
			{
				if (ClassicDoomType == 4) owner.A_TakeInventory("PowerMask",0x7FFFFFFF); else owner.A_TakeInventory("PowerIronFeet",0x7FFFFFFF);
			}
			
			// Berserk Effects
			if (CallACS("GetBuffTimer",23) > 0)
			{
				owner.A_GiveInventory("PowerStrength", 1);
				if (UsingInGameMenu == 0) CallACS("GetBuffTimer",23,3,1);
			}
			else
			{
				owner.A_TakeInventory("PowerStrength",0x7FFFFFFF);
			}
			
			// Regen Effects
			if (CallACS("GetBuffTimer",24) > 0) { if (UsingInGameMenu == 0) CallACS("GetBuffTimer",24,3,1); }
			
			// Arcana Force Effects
			if (CallACS("GetBuffTimer",25) > 0) { if (UsingInGameMenu == 0) CallACS("GetBuffTimer",25,3,1); }
			
			// GoE?? Effects
			if (CallACS("GetBuffTimer",129) > 0) 
			{
				// (GoE is intended as a "permenant buff" once activated. To disable this and make it time elasped, uncomment the line below)
				// if (UsingInGameMenu == 0) CallACS("GetBuffTimer",129,3,1); 
			}
		}
		
		
		
		
		//****************************
		//** EXP Table Calculations **
		//****************************
		if (playeractor && ClassCheck == 0)
		{
			double ExpValue;
			int BaseEXPRequirement = dvds_baseexprequirement; // Default for Skill 4
			if (BaseEXPRequirement < 500) BaseEXPRequirement = 500;
			if (BaseEXPRequirement > 5600) BaseEXPRequirement = 5600;
			if (TrueGameSkill <= SKILL_VERY_EASY) BaseEXPRequirement *= 0.7;
			if (TrueGameSkill == SKILL_EASY) BaseEXPRequirement *= 0.8;
			if (TrueGameSkill == SKILL_NORMAL) BaseEXPRequirement *= 0.9;
			if (TrueGameSkill == SKILL_HARD) BaseEXPRequirement *= 1.0;
			if (TrueGameSkill == SKILL_VERY_HARD) BaseEXPRequirement *= 1.2;
			if (TrueGameSkill == SKILL_EXTREME) BaseEXPRequirement *= 1.3;
			if (TrueGameSkill == SKILL_HORRIBLE) BaseEXPRequirement *= 1.4;
			if (TrueGameSkill == SKILL_IMPOSSIBLE) BaseEXPRequirement *= 1.5;
			if (TrueGameSkill >= SKILL_OMEGA) BaseEXPRequirement *= 1.6;

			double BaseExtra = dvds_baseexpextra;
			if (BaseExtra < 0) BaseExtra = 0;
			if (BaseExtra > 100) BaseExtra = 100;
			double BaseAccel1 = dvds_baseexpaccel1;
			if (BaseAccel1 < 0) BaseAccel1 = 0;
			if (BaseAccel1 > 100) BaseAccel1 = 100;
			double BaseAccel2 = dvds_baseexpaccel2;
			if (BaseAccel2 < 0) BaseAccel2 = 0;
			if (BaseAccel2 > 25000) BaseAccel2 = 25000;
			double BaseMulti1 = dvds_expmulti1;
			if (BaseMulti1 < 1) BaseMulti1 = 1;
			if (BaseMulti1 > 1024) BaseMulti1 = 1024;
			double BaseMulti2 = dvds_expmulti2;
			if (BaseMulti2 < 1) BaseMulti2 = 1;
			if (BaseMulti2 > 10000) BaseMulti2 = 10000;
			double Accel2Div = dvds_accel2div;
			if (Accel2Div < 1) Accel2Div = 1;
			if (Accel2Div > 10000) Accel2Div = 10000;
			// Sets up the actual EXP requirement tables based from BaseEXPRequirement above.
			for (int CuLv = 0; CuLv < 201; CuLv++)
			{
				ExpValue = (BaseEXPRequirement * ((CuLv * BaseExtra) + 1));
				ExpValue *= ((CuLv * (BaseAccel1 * ((BaseMulti1 + CuLv) / BaseMulti1))) + BaseMulti2) / BaseMulti2;
				ExpValue += (BaseEXPRequirement * (CuLv * BaseAccel2) / Accel2Div);
				if (debuginit) Console.Printf("\czLevel \cy%d\c- \czEXP Requirement: \cy%d\c-", CuLv, ExpValue);
				CallACS("ExpTableSetDECORATE",CuLv,ExpValue);
			}
			CallACS("ExpTableSetDECORATE",201,2147483647);
		}
		
		
		
		
		
		//*******************
		//** LEVEL UP CODE **
		//*******************
		if (playeractor)
		{
			PlayerLevel = CallACS("StatCheck",0);
			int Experience = CallACS("OtherVarCheckDECORATE",12);
			int LevelCap = CallACS("OtherVarCheckDECORATE",13);
			double RandomizedStatChance, RandomizedStatChance2;
			int levelmodulo, levelbonustype;
			int PerkFactor;
			int leveluptimes = 0;
			int leveluptimesmax = LevelCap - PlayerLevel;
			int tempaeonpointincrease;
			
			for (leveluptimes = 0; leveluptimes < leveluptimesmax; leveluptimes++)
			{
				//Console.Printf("%d / %d", leveluptimes, leveluptimesmax);
				CallACS("MiscVarSetDECORATE",48,(CallACS("ExpTableCheckDECORATE",PlayerLevel)-Experience));
				if (Experience >= CallACS("ExpTableCheckDECORATE",PlayerLevel))
				{
					tempaeonpointincrease = 0;
					if (PlayerLevel < LevelCap)
					{
						CallACS("OtherVarSetDECORATE",14,1,1); // PlayerLevel += 1;
						PlayerLevel = CallACS("StatCheck",0);

						CallACS("MiscVarSetDECORATE",171,105); // Turns on the "Level Up!!" and "Stat Up" indicators for 3 seconds on the HUD upon level up.
						CallACS("MiscVarSetDECORATE",204,CallACS("MiscVarCheckDECORATE",25)); // total Aeon Points gained
						CallACS("MiscVarSetDECORATE",205,CallACS("MiscVarCheckDECORATE",31)); // total Agility Points gained
						CallACS("MiscVarSetDECORATE",206,CallACS("MiscVarCheckDECORATE",32)); // total Defense Points gained
						CallACS("MiscVarSetDECORATE",207,CallACS("MiscVarCheckDECORATE",33)); // total Deftness Points gained
						CallACS("MiscVarSetDECORATE",208,CallACS("MiscVarCheckDECORATE",34)); // total Sorcery Points gained
						CallACS("MiscVarSetDECORATE",209,CallACS("MiscVarCheckDECORATE",35)); // total Strength Points gained
						CallACS("MiscVarSetDECORATE",210,CallACS("MiscVarCheckDECORATE",36)); // total Therapeusis Points gained
						if (debuglvlup)
						{
							Console.Printf("1 - \cfAeon: %d\c-, \cnAgl: %d\c-, \cpDef: %d\c-, \cdDft: %d\c-, \ctSor: %d\c-, \cgStr: %d\c-, \ccThe: %d\c-", 
															CallACS("MiscVarCheckDECORATE",204), CallACS("MiscVarCheckDECORATE",205),
															CallACS("MiscVarCheckDECORATE",206), CallACS("MiscVarCheckDECORATE",207),
															CallACS("MiscVarCheckDECORATE",208), CallACS("MiscVarCheckDECORATE",209),
															CallACS("MiscVarCheckDECORATE",210));
						}

						levelmodulo = PlayerLevel % 20;
						if (levelmodulo == 0) levelbonustype = 0;
						else if (levelmodulo == 4) levelbonustype = 1;
						else if (levelmodulo == 8) levelbonustype = 1;
						else if (levelmodulo == 12) levelbonustype = 1;
						else if (levelmodulo == 16) levelbonustype = 1;
						else levelbonustype = 2;
						if (debuglvlup) Console.Printf("\cyLevel Check\c-: %d, \cxModulo\c-: %d, \czBonus Type\c-: %d", PlayerLevel, levelmodulo, levelbonustype);

						//*********************
						//*Aeon Point Increase*
						//*********************
						// MiscellaneousVars[25] = Aeon Points
						if (PlayerLevel != 0)
						{
							int baseaeonchance1 = 65;
							int baseaeonchance2 = 25;
							int baseaeonchance3 = 20;
							int baseaeonchance4 = 0;
							if (levelbonustype == 0) // Levels 20, 40, 60, 80, 100, 120, 140, 160, 180 & 200 [really big Aeon Point gains]
							{
								baseaeonchance1 = 65;
								baseaeonchance2 = 25;
								baseaeonchance3 = 20;
								if (PlayerLevel > 100)
								{
									if (random(1,100) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (random(1,100) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (random(1,100) <= baseaeonchance2) tempaeonpointincrease += 6; else tempaeonpointincrease += 4;
									if (random(1,100) <= baseaeonchance3) tempaeonpointincrease += random(2,4);
								}
								else
								{
									if (random(1,100) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (random(1,100) <= baseaeonchance2) tempaeonpointincrease += 5; else tempaeonpointincrease += 3;
									if (random(1,100) <= baseaeonchance3) tempaeonpointincrease += random(1,3);
								}
							}
							else
							if (levelbonustype == 1) // Levels [0/2/4/6/8/10/12/14/16/18]4, [0/2/4/6/8/10/12/14/16/18]8, [1/3/5/7/9/11/13/15/17/19]2, & [1/3/5/7/9/11/13/15/17/19]6
							{
								baseaeonchance1 = 65;
								baseaeonchance2 = 15;
								baseaeonchance3 = 10;
								if (PlayerLevel > 100)
								{
									if (random(1,100) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (random(1,100) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (random(1,100) <= baseaeonchance2) tempaeonpointincrease += 3; else tempaeonpointincrease += 2;
									if (random(1,100) <= baseaeonchance3) tempaeonpointincrease += random(1,2);
								}
								else
								{
									if (random(1,100) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (random(1,100) <= baseaeonchance2) tempaeonpointincrease += 2; else tempaeonpointincrease += 1;
									if (random(1,100) <= baseaeonchance3) tempaeonpointincrease += random(0,1);
								}
							}
							else
							if (levelbonustype == 2) // Any other level that's not a multiple of 4 or 20 [minor Aeon Point gains]
							{
								baseaeonchance1 = 65;
								baseaeonchance2 = 60;
								baseaeonchance3 = 15;
								if (PlayerLevel > 100)
								{
									if (random(1,100) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (random(1,100) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (random(1,100) <= baseaeonchance2) // 60% chance of +2/3 Aeon Points per level
									{
										if (random(1,100) <= baseaeonchance3) tempaeonpointincrease += 3; else tempaeonpointincrease += 2;
									}
								}
								else
								{
									baseaeonchance2 /= 2;
									if (random(1,100) <= baseaeonchance1) tempaeonpointincrease += 1;
									if (random(1,100) <= baseaeonchance2) // 30% chance of +1/2 Aeon Points per level
									{
										if (random(1,100) <= baseaeonchance3) tempaeonpointincrease += 2; else tempaeonpointincrease += 1;
									}
								}
							}
						}
						
						int extrachance = 25;
						// Extra AeonPts for "Perk Mode"
						if (dvdsperks_active)
						{
							if (random(1,100) <= 96) 
							{
								tempaeonpointincrease += 1; 
								extrachance = 25; 
							}
							else
							{
								tempaeonpointincrease += 2;
								extrachance = 50; 
							}
							if (PlayerLevel >= 25 && random(1,100) <= extrachance) tempaeonpointincrease += 1;
							if (PlayerLevel >= 50 && random(1,100) <= extrachance) tempaeonpointincrease += 1;
							if (PlayerLevel >= 75 && random(1,100) <= extrachance) tempaeonpointincrease += 1;
							if (PlayerLevel >= 100 && random(1,100) <= extrachance) tempaeonpointincrease += 1;
							if (PlayerLevel >= 125 && random(1,100) <= extrachance) tempaeonpointincrease += 1;
							if (PlayerLevel >= 150 && random(1,100) <= extrachance) tempaeonpointincrease += 1;
							if (PlayerLevel >= 175 && random(1,100) <= extrachance) tempaeonpointincrease += 1;
							if (PlayerLevel >= 200 && random(1,100) <= extrachance) tempaeonpointincrease += 1;
						}
						if (CallACS("MiscVarCheckDECORATE",11001) == 1) tempaeonpointincrease = tempaeonpointincrease * 5 / 4;  // "Higher Learning" Grand Mastery Perk
						if (CallACS("MiscVarCheckDECORATE",11001) == 2) tempaeonpointincrease = tempaeonpointincrease * 3 / 2;  // "Higher Learning" Grand Mastery Perk [Level 2]
			
						if (CallACS("DVDSSpecialArrayCheckDECORATE",3) > 0) tempaeonpointincrease += random(1,2); // If playing "Unloved"
						if (CallACS("DVDSSpecialArrayCheckDECORATE",4) > 0) tempaeonpointincrease += random(1,3); // If playing "TCOTD:A"
						if (CallACS("DVDSSpecialArrayCheckDECORATE",5) > 0) tempaeonpointincrease += random(2,3); // If playing "Circus2"
						tempaeonpointincrease *= CallACS("MiscVarCheckDECORATE",86);
						CallACS("MiscVarSetDECORATE",25,tempaeonpointincrease,1); // MiscellaneousVars[25] += tempaeonpointincrease;
						
						// Increase Stats
						// 16:25 (1-100) [64] + 20:25 (101-200) [80] = [Max of 144 (or -75%)]
						RandomizedStatChance = 1.00000000; // 192;
						if (levelbonustype == 0) // Levels 20, 40, 60, 80, 100, 120, 140, 160, 180 & 200
						{
							RandomizedStatChance -= (0.1 * random(4,8)); // 112 to 152
							RandomizedStatChance -= (CallACS("MiscVarCheckDECORATE",33) * 0.001041667);
						}
						else
						if (levelbonustype == 1) // Levels [0/2/4/6/8/10/12/14/16/18]4, [0/2/4/6/8/10/12/14/16/18]8, [1/3/5/7/9/11/13/15/17/19]2, & [1/3/5/7/9/11/13/15/17/19]6
						{
							RandomizedStatChance -= (0.020833334 * random(4,8)); // 160 to 176
							RandomizedStatChance -= (CallACS("MiscVarCheckDECORATE",33) * 0.000744048);
						}
						else
						if (levelbonustype == 2) // Any other level that's not a multiple of 4 or 20
						{
							RandomizedStatChance -= (CallACS("MiscVarCheckDECORATE",33) * 0.000651042);
						}

						double RNDSCSubtractor1 = 0;
						double RNDSCSubtractor2 = 0;
						RNDSCSubtractor1 = (PlayerLevel * 0.32);
						if (RNDSCSubtractor1 < 0.00000) RNDSCSubtractor1 = 0.00000; 
						if (RNDSCSubtractor1 > 0.33334) RNDSCSubtractor1 = 0.33334;
						if (PlayerLevel > 100)
						{
							RNDSCSubtractor2 = ((PlayerLevel - 100) * 0.4);
							if (RNDSCSubtractor2 < 0.00000) RNDSCSubtractor2 = 0.00000; 
							if (RNDSCSubtractor2 > 0.33334) RNDSCSubtractor2 = 0.33334;
						}
						if (debuglvlup) Console.Printf("\cyRNDSCSubtractor1\c-: %8f, \cxRNDSCSubtractor2\c-: %8f", RNDSCSubtractor1, RNDSCSubtractor2);
			
						double RNDSCSubtractor = 0;
						RNDSCSubtractor += RNDSCSubtractor1; // Adds [level 1-100] range value
						RNDSCSubtractor += RNDSCSubtractor2; // Adds [level 101-200] range value
						RandomizedStatChance -= RNDSCSubtractor;
						if (owner.CountInv("TheOneRing") > 0) RandomizedStatChance *= 0.75;
						if (RandomizedStatChance < 0.005208334) RandomizedStatChance = 0.005208334;
						if (debuglvlup) Console.Printf("\cyRNDSCSubtractor\c-: %8f, \cxRandomizedStatChance\c-: %8f", RNDSCSubtractor, RandomizedStatChance);
			
						RandomizedStatChance2 = 1.00000000;
						if (PlayerLevel >= 25) RandomizedStatChance2 -= 0.041666667; // 23
						if (PlayerLevel >= 50) RandomizedStatChance2 -= 0.041666667; // 22
						if (PlayerLevel >= 75) RandomizedStatChance2 -= 0.041666667; // 21
						if (PlayerLevel >= 100) RandomizedStatChance2 -= 0.041666667; // 20
						if (PlayerLevel >= 125) RandomizedStatChance2 -= 0.083333334; // 18
						if (PlayerLevel >= 150) RandomizedStatChance2 -= 0.083333334; // 16
						if (PlayerLevel >= 175) RandomizedStatChance2 -= 0.083333334; // 14
						if (debuglvlup) Console.Printf("\cyStat Chance 1\c-: %8f, \cxStat Chance 2\c-: %8f", RandomizedStatChance, RandomizedStatChance2);

						//********************************
						//*Random Levelups to Stat Values*
						//********************************
						int SeedIncreaseAmt;
						int LvlSkillMulti;
						double RollValue;
						if (CharacterClass == 0) // Deggaris (192pts) (0 left)
						{
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.125) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Agility [12.5%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.025) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Extra Agility [2.60%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.21875) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Defense [21.4%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.04375) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Extra Defense [4.16%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.15625) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Deftness [15.625%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.03125) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Extra Deftness [3.12%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.15625) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Sorcery [15.625%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.03125) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Extra Sorcery [3.12%] 
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.1875) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Strength [18.36%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.0375) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Extra Strength [3.64%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.15625) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Therapeusis [15.625%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.03125) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Extra Therapeusis [3.12%] 
						}
						if (CharacterClass == 1) // Illucia (192pts) (0 left)
						{
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.15625) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Agility [15.625%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.03125) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Extra Agility [3.12%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.15625) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Defense [15.625%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.03125) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Extra Defense [3.12%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.15625) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Deftness [15.625%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.03125) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Extra Deftness [3.12%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.1875) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Sorcery [18.36%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.0375) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Extra Sorcery [3.64%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.010416667) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Strength [12.5%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.002083333) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Extra Strength [2.60%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.21875) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Therapeusis [21.4%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.04375) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Extra Therapeusis [4.16%]
						}
						if (CharacterClass == 2) // Flora (192pts) (0 left)
						{
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.192708333) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Agility [19.27%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.038541667) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Extra Agility [3.64%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.083333333) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Defense [8.33%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.016666667) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Extra Defense [1.56%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.171875) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Deftness [17.2%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.034375) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Extra Deftness [3.64%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.234375) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Sorcery [23.4%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.046875) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Extra Sorcery [4.68%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.119791667) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Strength [11.9%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.023958333) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Extra Strength [2.6%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.197916667) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Therapeusis [19.79%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.039583333) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Extra Therapeusis [4.16%]
						}
		
						if (CharacterClass == 8) // Ailish (192pts) (0 left)
						{
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.1875) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Agility [18.75%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.0375) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Extra Agility [3.64%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.067708333) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Defense [6.77%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.013541667) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Extra Defense [1.04%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.1875) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Deftness [18.75%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.0375) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Extra Deftness [4.16%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.239583333) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Sorcery [23.95%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.047916667) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Extra Sorcery [4.68%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.104166667) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Strength [10.4%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.020833333) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Extra Strength [2.08%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.213541667) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Therapeusis [21.35%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.042708333) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Extra Therapeusis [4.16%]
						}
						if (CharacterClass == 9) // Petra (192pts) (0 left)
						{
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.15625) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Agility [15.625%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.03125) CallACS("MiscVarSetDECORATE",31,LvlSkillMulti,1); // Extra Agility [3.12%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.21875) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Defense [21.4%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.04375) CallACS("MiscVarSetDECORATE",32,LvlSkillMulti,1); // Extra Defense [4.16%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.171875) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Deftness [17.2%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.034375) CallACS("MiscVarSetDECORATE",33,LvlSkillMulti,1); // Extra Deftness [3.64%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.177083333) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Sorcery [18.36%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.035416667) CallACS("MiscVarSetDECORATE",34,LvlSkillMulti,1); // Extra Sorcery [3.64%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.119791667) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Strength [11.9%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.023958333) CallACS("MiscVarSetDECORATE",35,LvlSkillMulti,1); // Extra Strength [2.6%]
				
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.197916667) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Therapeusis [21.4%]
							RollValue = frandom(0.00000001,RandomizedStatChance2);
							if (RollValue <= 0.041666667) { LvlSkillMulti = 2; } else { LvlSkillMulti = 1; } LvlSkillMulti *= CallACS("MiscVarCheckDECORATE",146);
							RollValue = frandom(0.00000001,RandomizedStatChance);
							if (RollValue <= 0.039583333) CallACS("MiscVarSetDECORATE",36,LvlSkillMulti,1); // Extra Therapeusis [4.16%]
						}
					
						if (CallACS("MiscVarCheckDECORATE",31) > 512) CallACS("MiscVarSetDECORATE",31,512);
						if (CallACS("MiscVarCheckDECORATE",32) > 512) CallACS("MiscVarSetDECORATE",32,512);
						if (CallACS("MiscVarCheckDECORATE",33) > 512) CallACS("MiscVarSetDECORATE",33,512);
						if (CallACS("MiscVarCheckDECORATE",34) > 512) CallACS("MiscVarSetDECORATE",34,512);
						if (CallACS("MiscVarCheckDECORATE",35) > 512) CallACS("MiscVarSetDECORATE",35,512);
						if (CallACS("MiscVarCheckDECORATE",36) > 512) CallACS("MiscVarSetDECORATE",36,512);
			
						CallACS("MiscVarSetDECORATE",204,CallACS("MiscVarCheckDECORATE",25),2); // total Aeon Points gained
						CallACS("MiscVarSetDECORATE",205,CallACS("MiscVarCheckDECORATE",31),2); // total Agility Points gained
						CallACS("MiscVarSetDECORATE",206,CallACS("MiscVarCheckDECORATE",32),2); // total Defense Points gained
						CallACS("MiscVarSetDECORATE",207,CallACS("MiscVarCheckDECORATE",33),2); // total Deftness Points gained
						CallACS("MiscVarSetDECORATE",208,CallACS("MiscVarCheckDECORATE",34),2); // total Sorcery Points gained
						CallACS("MiscVarSetDECORATE",209,CallACS("MiscVarCheckDECORATE",35),2); // total Strength Points gained
						CallACS("MiscVarSetDECORATE",210,CallACS("MiscVarCheckDECORATE",36),2); // total Therapeusis Points gained
						if (debuglvlup)
						{
							Console.Printf("2 - \cfAeon: %d\c-, \cnAgl: %d\c-, \cpDef: %d\c-, \cdDft: %d\c-, \ctSor: %d\c-, \cgStr: %d\c-, \ccThe: %d\c-", 
															CallACS("MiscVarCheckDECORATE",204), CallACS("MiscVarCheckDECORATE",205),
															CallACS("MiscVarCheckDECORATE",206), CallACS("MiscVarCheckDECORATE",207),
															CallACS("MiscVarCheckDECORATE",208), CallACS("MiscVarCheckDECORATE",209),
															CallACS("MiscVarCheckDECORATE",210));
						}
						CallACS("MiscVarSetDECORATE",204,-1,3); // total Aeon Points gained
						CallACS("MiscVarSetDECORATE",205,-1,3);
						CallACS("MiscVarSetDECORATE",206,-1,3);
						CallACS("MiscVarSetDECORATE",207,-1,3);
						CallACS("MiscVarSetDECORATE",208,-1,3);
						CallACS("MiscVarSetDECORATE",209,-1,3);
						CallACS("MiscVarSetDECORATE",210,-1,3);
						
						if (debuglvlup)
						{
							Console.Printf("3 - \cfAeon: %d\c-, \cnAgl: %d\c-, \cpDef: %d\c-, \cdDft: %d\c-, \ctSor: %d\c-, \cgStr: %d\c-, \ccThe: %d\c-", 
															CallACS("MiscVarCheckDECORATE",204), CallACS("MiscVarCheckDECORATE",205),
															CallACS("MiscVarCheckDECORATE",206), CallACS("MiscVarCheckDECORATE",207),
															CallACS("MiscVarCheckDECORATE",208), CallACS("MiscVarCheckDECORATE",209),
															CallACS("MiscVarCheckDECORATE",210));
						}
						
						//***************
						//*Mana Increase*
						//***************
						int CurrentMana = CallACS("StatCheck",14);
						int MaxMana = CallACS("StatCheck",2);
						int LevelAddMaxMana = 0;
						int MPMaxGain;
						if (TrueGameSkill <= SKILL_VERY_EASY)
						{
							LevelAddMaxMana = Random(5,10);
							MPMaxGain = MaxMana / 96;
						}
						else if (TrueGameSkill == SKILL_EASY)
						{
							LevelAddMaxMana = Random(4,8);
							MPMaxGain = MaxMana / 120;
						}
						else if (TrueGameSkill == SKILL_NORMAL)
						{
							LevelAddMaxMana = Random(3,6);
							MPMaxGain = MaxMana / 144;
						}
						else if (TrueGameSkill == SKILL_HARD)
						{
							LevelAddMaxMana = Random(2,4);
							MPMaxGain = MaxMana / 168;
						}
						else if (TrueGameSkill == SKILL_VERY_HARD)
						{
							LevelAddMaxMana = Random(1,2);
							MPMaxGain = MaxMana / 192;
						}
						else if (TrueGameSkill == SKILL_EXTREME)
						{
							LevelAddMaxMana = Random(1,2);
							MPMaxGain = MaxMana / 204;
						}
						else if (TrueGameSkill == SKILL_HORRIBLE)
						{
							LevelAddMaxMana = Random(1,2);
							MPMaxGain = MaxMana / 216;
						}
						else if (TrueGameSkill == SKILL_IMPOSSIBLE)
						{
							LevelAddMaxMana = 1;
							MPMaxGain = MaxMana / 228;
						}
						else if (TrueGameSkill >= SKILL_OMEGA)
						{
							LevelAddMaxMana = 1;
							MPMaxGain = MaxMana / 240;
						}
			
						PerkFactor = ((MagiUpPerkLevel * 500) + (MagiUpEXPerkLevel * 1250)) + 10000;
						MPMaxGain = MPMaxGain * PerkFactor / 10000; // "MagiUp" and "MagiUp EX" perks.
			
						PerkFactor = (StrifeStaminaLevel * 1250) + 10000;
						MPMaxGain = MPMaxGain * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded"
			
						PerkFactor = ((MagiUpPerkLevel / 2) + (MagiUpEXPerkLevel));
						PerkFactor += (StrifeStaminaLevel * 3) / 8;
						if (MPMaxGain < PerkFactor) MPMaxGain = PerkFactor;
						LevelAddMaxMana += MPMaxGain;
			
						MPMaxGain = random(6,9); // +7-19 + Level base
						PerkFactor = ((MagiUpPerkLevel * 500) + (MagiUpEXPerkLevel * 1250)) + 10000;
						MPMaxGain = MPMaxGain * PerkFactor / 10000; // "MagiUp" and "MagiUp EX" perks.
			
						PerkFactor = (StrifeStaminaLevel * 1250) + 10000;
						MPMaxGain = MPMaxGain * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded"
			
						LevelAddMaxMana += MPMaxGain;
		
						int DftTheMulti;
						if (CharacterClass == 0) DftTheMulti = random(36,42); // Deggaris [MP Gain / Level] [75%-87.5%]
						if (CharacterClass == 1) DftTheMulti = random(54,60); // Illucia [MP Gain / Level] [112.5%-125%]
						if (CharacterClass == 2) DftTheMulti = random(66,84); // Flora [MP Gain / Level] [137.5%-175%]
						if (CharacterClass == 8) DftTheMulti = random(60,78); // Ailish [MP Gain / Level]
						if (CharacterClass == 9) DftTheMulti = random(49,55); // Petra [MP Gain / Level]
			
						DftTheMulti += ((CallACS("MiscVarCheckDECORATE",36) + CallACS("MiscVarCheckDECORATE",33)) / 48); // Add [(Therapesius+Deftness / 48)]
						LevelAddMaxMana = LevelAddMaxMana * DftTheMulti / 48;
			
						// Overall Modifier
						LevelAddMaxMana = LevelAddMaxMana * 75 / 100;
			
						if (LevelAddMaxMana < 1) LevelAddMaxMana = 1;
						if (LevelAddMaxMana == 1)
						{
							if (CharacterClass == 0 && random(1,100) <= 10) LevelAddMaxMana += 1;
							if (CharacterClass == 1 && random(1,100) <= 20) LevelAddMaxMana += 1;
							if (CharacterClass == 2 && random(1,100) <= 35) LevelAddMaxMana += 1;
							if (CharacterClass == 8 && random(1,100) <= 35) LevelAddMaxMana += 1;
							if (CharacterClass == 9 && random(1,100) <= 10) LevelAddMaxMana += 1;
						}
		
						LevelAddMaxMana *= CallACS("MiscVarCheckDECORATE",146);
						MaxMana += LevelAddMaxMana;
						CurrentMana += LevelAddMaxMana;
						CallACS("OtherVarSetDECORATE",1,MaxMana); // Sets MaxMana in ACS
						CallACS("OtherVarSetDECORATE",2,CurrentMana); // Sets CurrentMana in ACS
						CallACS("MiscVarSetDECORATE",243,CurrentMana); // Sets "LastManaValue" in ACS
						CallACS("MiscVarSetDECORATE",238,CurrentMana); // Sets "NewManaValue" in ACS
						
						
						//*************
						//*HP Increase*
						//*************
						int CurrentHealth = owner.health;
						int MaxHealthTrue = CallACS("StatCheck",1);
						int LevelAddMaxHP = 0;
						int HPMaxGain;
						int HPRandomizer1;
						if (TrueGameSkill <= SKILL_VERY_EASY)
						{
							LevelAddMaxHP = random(2,4);
							HPMaxGain = MaxHealthTrue / 288;
						}
						if (TrueGameSkill == SKILL_EASY)
						{
							LevelAddMaxHP = random(1,3);
							HPMaxGain = MaxHealthTrue / 360;
						}
							if (TrueGameSkill == SKILL_NORMAL)
						{
							LevelAddMaxHP = random(0,2);
							HPMaxGain = MaxHealthTrue / 432;
						}
						if (TrueGameSkill == SKILL_HARD)
						{
							LevelAddMaxHP = random(-1,1);
							HPMaxGain = MaxHealthTrue / 504;
						}
						if (TrueGameSkill == SKILL_VERY_HARD)
						{
							LevelAddMaxHP = random(-2,0);
							HPMaxGain = MaxHealthTrue / 576;
						}
						if (TrueGameSkill == SKILL_EXTREME)
						{
							LevelAddMaxHP = random(-2,0);
							HPMaxGain = MaxHealthTrue / 648;
						}
						if (TrueGameSkill == SKILL_HORRIBLE)
						{
							LevelAddMaxHP = random(-3,-1);
							HPMaxGain = MaxHealthTrue / 720;
						}
						if (TrueGameSkill == SKILL_IMPOSSIBLE)
						{
							LevelAddMaxHP = random(-3,-1);
							HPMaxGain = MaxHealthTrue / 792;
						}
						if (TrueGameSkill >= SKILL_OMEGA)
						{
							LevelAddMaxHP = random(-4,-2);
							HPMaxGain = MaxHealthTrue / 864;
						}
			
						HPMaxGain += Random(1,3);
						if (CharacterClass == 0) HPMaxGain += random(3,5); // + 6-12+ HP
						if (CharacterClass == 1) HPMaxGain += random(2,3); // + 5-10+ HP
						if (CharacterClass == 2) HPMaxGain += random(1,2); // + 4-9+ HP
						if (CharacterClass == 8) HPMaxGain += random(1,2); // + 3-8+ HP
						if (CharacterClass == 9) HPMaxGain += random(3,5); // + 6-12+ HP
			
						PerkFactor = ((LifeUpPerkLevel * 500) + (LifeUpEXPerkLevel * 1250)) + 10000;
						HPMaxGain = HPMaxGain * PerkFactor / 10000; // "LifeUp" and "LifeUp EX" perks.
			
						PerkFactor = (StrifeStaminaLevel * 1250) + 10000;
						HPMaxGain = HPMaxGain * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded
			
						PerkFactor = ((LifeUpPerkLevel / 2) + (LifeUpEXPerkLevel));
						PerkFactor += (StrifeStaminaLevel * 3) / 8;
						if (HPMaxGain < PerkFactor) HPMaxGain = PerkFactor;
						LevelAddMaxHP += HPMaxGain;
		
						if (TrueGameSkill <= SKILL_VERY_EASY)					LvlSkillMulti = PlayerLevel * 35 / 100;	// 35%
						else if (TrueGameSkill == SKILL_EASY)					LvlSkillMulti = PlayerLevel * 30 / 100;	// 30%
						else if (TrueGameSkill == SKILL_NORMAL)				LvlSkillMulti = PlayerLevel * 25 / 100;	// 25%
						else if (TrueGameSkill == SKILL_HARD)					LvlSkillMulti = PlayerLevel * 20 / 100;	// 20%
						else if (TrueGameSkill == SKILL_VERY_HARD)		LvlSkillMulti = PlayerLevel * 15 / 100;	// 15%
						else if (TrueGameSkill == SKILL_EXTREME)			LvlSkillMulti = PlayerLevel * 15 / 100;	// 15%
						else if (TrueGameSkill == SKILL_HORRIBLE)			LvlSkillMulti = PlayerLevel * 10 / 100;	// 10%
						else if (TrueGameSkill == SKILL_IMPOSSIBLE)		LvlSkillMulti = PlayerLevel * 10 / 100;	// 10%
						else if (TrueGameSkill >= SKILL_OMEGA)				LvlSkillMulti = PlayerLevel * 5 / 100;	// 5%
				
						if (PlayerLevel > 24 && PlayerLevel < 50)			LvlSkillMulti = LvlSkillMulti * 105 / 100; 		// *105%
						if (PlayerLevel > 49 && PlayerLevel < 75)			LvlSkillMulti = LvlSkillMulti * 110 / 100; 		// *110%
						if (PlayerLevel > 74 && PlayerLevel < 100)		LvlSkillMulti = LvlSkillMulti * 115 / 100; 		// *115%
						if (PlayerLevel > 99 && PlayerLevel < 125)		LvlSkillMulti = LvlSkillMulti * 121 / 100; 		// *121%
						if (PlayerLevel > 124 && PlayerLevel < 150)		LvlSkillMulti = LvlSkillMulti * 127 / 100; 		// *127%
						if (PlayerLevel > 149 && PlayerLevel < 175)		LvlSkillMulti = LvlSkillMulti * 133 / 100; 		// *133%
						if (PlayerLevel > 174)												LvlSkillMulti = LvlSkillMulti * 140 / 100; 		// *140%
			
						PerkFactor = ((LifeUpPerkLevel * 500) + (LifeUpEXPerkLevel * 1250)) + 10000;
						LvlSkillMulti = LvlSkillMulti * PerkFactor / 10000; // "LifeUp" and "LifeUp EX" perks.
			
						PerkFactor = (StrifeStaminaLevel * 1250) + 10000;
						LvlSkillMulti = LvlSkillMulti * PerkFactor / 10000; // [STRIFE-Compatibility] Times "Stamina Upgraded
			
						LevelAddMaxHP += LvlSkillMulti;
			
						int DefTheMulti;
						if (CharacterClass == 0) DefTheMulti = random(54,60); // Deggaris [HP Gain / Level] [112.5%-125%]
						if (CharacterClass == 1) DefTheMulti = random(36,42); // Illucia [HP Gain / Level] [75%-87.5%]
						if (CharacterClass == 2) DefTheMulti = random(27,33); // Flora [HP Gain / Level] [56.25%-68.75%]
						if (CharacterClass == 8) DefTheMulti = random(24,30); // Ailish [HP Gain / Level] [50.0%-62.5%]
						if (CharacterClass == 9) DefTheMulti = random(54,60); // Petra [HP Gain / Level] [112.5%-125%]. Same as Deggaris.
			
						DefTheMulti += ((CallACS("MiscVarCheckDECORATE",32) + CallACS("MiscVarCheckDECORATE",33)) / 48); // Add [(Defense+Deftness / 48)]
						LevelAddMaxHP = LevelAddMaxHP * DefTheMulti / 48;
			
						// Overall Modifier
						LevelAddMaxHP = LevelAddMaxHP * 75 / 100; // *75%+
			
						// Give The HP to the player
						if (LevelAddMaxHP < 1) LevelAddMaxHP = 1;
						if (LevelAddMaxHP == 1)
						{
							if (CharacterClass == 0 && random(1,100) <= 35) LevelAddMaxHP += 1;
							if (CharacterClass == 1 && random(1,100) <= 20) LevelAddMaxHP += 1;
							if (CharacterClass == 2 && random(1,100) <= 10) LevelAddMaxHP += 1;
							if (CharacterClass == 8 && random(1,100) <= 10) LevelAddMaxHP += 1;
							if (CharacterClass == 9 && random(1,100) <= 35) LevelAddMaxHP += 1;
						}
		
						LevelAddMaxHP *= CallACS("MiscVarCheckDECORATE",146);
						CurrentHealth += LevelAddMaxHP;
						owner.health = CurrentHealth;
						MaxHealthTrue += LevelAddMaxHP;
						CallACS("OtherVarSetDECORATE",0,MaxHealthTrue);
						CallACS("MiscVarSetDECORATE",241,PlayerCurrentHealth);
						CallACS("MiscVarSetDECORATE",175,PlayerCurrentHealth);
						
						
						if (leveluptimes == 0)
						{
							if (CharacterClass == 9) owner.A_PlaySound("PetraLeveledUp",CHAN_6,1.25,false,ATTN_NONE); //Petra
							else if (CharacterClass == 8) owner.A_PlaySound("AilishLeveledUp",CHAN_6,1.25,false,ATTN_NONE); //Ailish
							else if (CharacterClass == 2) owner.A_PlaySound("FloraLeveledUp",CHAN_6,1.25,false,ATTN_NONE); // Flora
							else if (CharacterClass == 1) owner.A_PlaySound("IlluciaLeveledUp",CHAN_6,1.25,false,ATTN_NONE); // Illucia
							else if (CharacterClass == 0) owner.A_PlaySound("DeggarisLeveledUp",CHAN_6,1.25,false,ATTN_NONE); // Deggaris
							else owner.A_PlaySound("misc/spawn",CHAN_6,1.25,false,ATTN_NONE); 
							CallACS("MiscVarSetDECORATE",247,1);
						}
						
						// [222] # of TOTAL Max HP gained during multiple stat ups [for displays]
						// [223] # of TOTAL Max MP gained during multiple stat ups [for displays]
						// [224] # of TOTAL Aeon Points gained during multiple stat ups [for displays]
						// [225] # of TOTAL Agility Points gained during multiple stat ups [for displays]
						// [226] # of TOTAL Defense Points gained during multiple stat ups [for displays]
						// [227] # of TOTAL Deftness Points gained during multiple stat ups [for displays]
						// [228] # of TOTAL Sorcery Points gained during multiple stat ups [for displays]
						// [229] # of TOTAL Strength Points gained during multiple stat ups [for displays]
						// [230] # of TOTAL Therapeusis Points gained during multiple stat ups [for displays]
						CallACS("MiscVarSetDECORATE",222,LevelAddMaxHP,1);
						CallACS("MiscVarSetDECORATE",223,LevelAddMaxMana,1);
						CallACS("MiscVarSetDECORATE",224,CallACS("MiscVarCheckDECORATE",204),1);
						CallACS("MiscVarSetDECORATE",225,CallACS("MiscVarCheckDECORATE",205),1);
						CallACS("MiscVarSetDECORATE",226,CallACS("MiscVarCheckDECORATE",206),1);
						CallACS("MiscVarSetDECORATE",227,CallACS("MiscVarCheckDECORATE",207),1);
						CallACS("MiscVarSetDECORATE",228,CallACS("MiscVarCheckDECORATE",208),1);
						CallACS("MiscVarSetDECORATE",229,CallACS("MiscVarCheckDECORATE",209),1);
						CallACS("MiscVarSetDECORATE",230,CallACS("MiscVarCheckDECORATE",210),1);
						if (CallACS("MiscVarCheckDECORATE",222) > 0) CallACS("MiscVarSetDECORATE",2031,105);
						if (CallACS("MiscVarCheckDECORATE",223) > 0) CallACS("MiscVarSetDECORATE",2032,105);
						if (CallACS("MiscVarCheckDECORATE",224) > 0) CallACS("MiscVarSetDECORATE",2033,105);
						if (CallACS("MiscVarCheckDECORATE",225) > 0) CallACS("MiscVarSetDECORATE",2034,105);
						if (CallACS("MiscVarCheckDECORATE",226) > 0) CallACS("MiscVarSetDECORATE",2035,105);
						if (CallACS("MiscVarCheckDECORATE",227) > 0) CallACS("MiscVarSetDECORATE",2036,105);
						if (CallACS("MiscVarCheckDECORATE",228) > 0) CallACS("MiscVarSetDECORATE",2037,105);
						if (CallACS("MiscVarCheckDECORATE",229) > 0) CallACS("MiscVarSetDECORATE",2038,105);
						if (CallACS("MiscVarCheckDECORATE",230) > 0) CallACS("MiscVarSetDECORATE",2039,105);
						
						string LearnedSpells = "";
						if (PlayerLevel <= 32) LearnedSpells = "\c[Green]New Spells Have Been Learned!\cf\n\n";
						if (CharacterClass == 2 && PlayerLevel == 56) LearnedSpells = "\c[Green]New Spells Have Been Learned!\cf\n\n";
			
						string AeonPtUse = "";
						if (PlayerLevel >= CallACS("MiscVarCheckDECORATE",197)) AeonPtUse = "\c[White]Remember to allocate any Aeon Points you've attained!\cf\n\n";
			
						string SpinAttack = "";
						if (CharacterClass == 2 && PlayerLevel == 8) SpinAttack = "\caThe Sceptre Will Now Have an Alternate\n\caAttack if Sceptre Level is above 2!\cf";
						
						if (dvdsallhuds_showlevelups)
						{
							owner.A_Print(String.Format("\c[Green]Congradulations, you've reached Level %d\n\n\c[Brick]HP \c[Gold]+%d\n\c[Purple]Mana \c[Gold]+%d\n\c[White]AeonPts: \c[Gold]+%d\n\c[LightBlue]Agility: \c[Gold]+%d\n\c[Olive]Defense: \c[Gold]+%d\n\c[Green]Deftness: \c[Gold]+%d\n\c[Purple]Sorcery: \c[Gold]+%d\n\c[Red]Strength: \c[Gold]+%d\n\c[Gray]Therapeusis: \c[Gold]+%d\n\n%s%s%s", PlayerLevel, LevelAddMaxHP, LevelAddMaxMana,
													 CallACS("MiscVarChecKDECORATE",204), CallACS("MiscVarChecKDECORATE",205),
													 CallACS("MiscVarChecKDECORATE",206), CallACS("MiscVarChecKDECORATE",207),
													 CallACS("MiscVarChecKDECORATE",208), CallACS("MiscVarChecKDECORATE",209),
													 CallACS("MiscVarChecKDECORATE",210), LearnedSpells, AeonPtUse, SpinAttack), 2.25, "SMALLFONT");
						}
						owner.A_SetBlend("00 00 FF",0.3,3,"00 00 FF",0.0);
						//FadeRange(0,0,255,0.3,0,0,255,0.0,0.036);
					}
				}
			}
		}
		
		
		
		
		
		/*
		Console.Printf("%d", level.levelnum);
		Console.Printf("%d / %d", level.found_secrets, level.total_secrets);
		Console.Printf("%d / %d", level.found_items, level.total_items);
		Console.Printf("%d / %d", level.killed_monsters, level.total_monsters);
		*/
		
		
		
		
		
		previoushealth = owner.health;
		if (!playeractor) owner.A_TakeInventory("PlayerStatItem",9999); // Removes itself if given to a non-Aetherius Player Class
		super.DoEffect();
	}

	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive)
	{
		let weapon = owner.player.ReadyWeapon;
		let playeractor = AetheriusPlayerPawn(owner);
		int CharacterClass = CallACS("CheckCharacterClass");

		int IsFocusOn = CallACS("MiscVarCheckDECORATE",212);

		// Perks
		int perks3mastered;
		int LifeUpPerkLevel = CallACS("MiscVarCheckDECORATE",10001);
		int LifeUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10002);
		int MagiUpPerkLevel = CallACS("MiscVarCheckDECORATE",10003);
		int MagiUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10004);
		int StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
		int StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
		int DodgeMorePerkLevel = CallACS("MiscVarCheckDECORATE",10007);
		int DodgeMoreEXPerkLevel = CallACS("MiscVarCheckDECORATE",10008);
		int JumpMorePerkLevel = CallACS("MiscVarCheckDECORATE",10009);
		int JumpMoreEXPerkLevel = CallACS("MiscVarCheckDECORATE",10010);
		int PsycheFastPerkLevel = CallACS("MiscVarCheckDECORATE",10011);
		int PsycheFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10012);
		int RegenHPFastPerkLevel = CallACS("MiscVarCheckDECORATE",10013);
		int RegenHPFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10014);
		int RegenMPFastPerkLevel = CallACS("MiscVarCheckDECORATE",10015);
		int RegenMPFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10016);
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int BulletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10019);
		int BulletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10020);
		//
		int OnTheMovePerkLevel = CallACS("MiscVarCheckDECORATE",10045);
		int OnTheMoveEXPerkLevel = CallACS("MiscVarCheckDECORATE",10046);
		//
		int WandMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10053);
		int WandMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10054);
		int ClearedOfMindParkLevel = CallACS("MiscVarCheckDECORATE",10055);
		int ClearedOfMindEXParkLevel = CallACS("MiscVarCheckDECORATE",10056);

		// Strife
		int StrifeStaminaLevel = CallACS("MiscVarCheckDECORATE",317);
		int StrifeAccuracyLevel = CallACS("MiscVarCheckDECORATE",318);

		// Buff Checks
		int NVLightTimer = CallACS("GetBuffTimer",0);
		int InvisibilityTimer = CallACS("GetBuffTimer",1);
		int FlightTimer = CallACS("GetBuffTimer",2);
		int StealthTimer = CallACS("GetBuffTimer",3);
		int InvulnerabilityTimer = CallACS("GetBuffTimer",4);
		int TimeFreezeTimer = CallACS("GetBuffTimer",5);
		int FearAuraTimer = CallACS("GetBuffTimer",6);
		int DivineAvatarTimer = CallACS("GetBuffTimer",7);
		int SpreadAura1Timer = CallACS("GetBuffTimer",8);
		int SpreadAura2Timer = CallACS("GetBuffTimer",9);
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int DQBuffTimer = CallACS("GetBuffTimer",11);
		int DQAcceleratleTimer = CallACS("GetBuffTimer",12);
		int DQBluntTimer = CallACS("GetBuffTimer",13);
		int DQSapTimer = CallACS("GetBuffTimer",14);
		int DQDeceleratleTimer = CallACS("GetBuffTimer",15);
		int PoisonedTimer = CallACS("GetBuffTimer",16);
		int CorrosionTimer = CallACS("GetBuffTimer",17);
		int FatigueTimer = CallACS("GetBuffTimer",18);
		int BlindTimer = CallACS("GetBuffTimer",19);
		int SleepTimer = CallACS("GetBuffTimer",20);
		int SilenceTimer = CallACS("GetBuffTimer",21);
		int RadSuitTimer = CallACS("GetBuffTimer",22);
		int BerserkTimer = CallACS("GetBuffTimer",23);
		int RegenerationTimer = CallACS("GetBuffTimer",24);
		int GoETimer = CallACS("GetBuffTimer",129);

		int InvisiblityLevel = 0;
		double InvisFactor = 1.0;
		double InvisBaseAmt = 1.0;
		if (Owner.CountInv("InvisiblitySpell") > 0)
		{
			if (random(1,100) <= 35)
			{
				InvisiblityLevel++;
				if (random(1,100) <= 25)
				{
					InvisiblityLevel++;
					if (random(1,100) <= 20)
					{
						InvisiblityLevel++;
						if (random(1,100) <= 10)
						{
							InvisiblityLevel++;
						}
					}
				}
			}
		}
		int InvisIgnored = random(1,3);

		// ******************
		// ******************
		// **Offensive Code**
		// ******************
		// ******************
		if (!passive && damage > 0) // If the owner [usually the player] of the item is the ATTACKER
		{
			if (dvdsdebug_actordmgdisplays > 0) Console.Printf("    (\czPlayerStatItem input [STEP 5 (\cwsuper.DamageMobj\cz)]\c-: \cydmg = %d\c-)", damage);

			// Check Level
			int PlayerLevel = CallACS("StatCheck",0);
			double LVLfactor = 1.0; double LVLfactorclamp = 10.00;
			if (CharacterClass == 0) LVLFactor = 1.00 + (PlayerLevel * .00117);				// Deggaris	(1 LVL = +0.117% Damage Dealt)
			if (CharacterClass == 1) LVLFactor = 1.00 + (PlayerLevel * .000863);			// Illucia	(1 LVL = +0.0863% Damage Dealt)
			if (CharacterClass == 2) LVLFactor = 1.00 + (PlayerLevel * .0011577);			// Flora		(1 LVL = +0.11577% Damage Dealt)
			if (CharacterClass == 8) LVLFactor = 1.00 + (PlayerLevel * .000825);			// Ailish		(1 LVL = +0.0825% Damage Dealt)
			if (CharacterClass == 9) LVLFactor = 1.00 + (PlayerLevel * .001075);			// Petra		(1 LVL = +0.1075% Damage Dealt)
			if (LVLfactor > LVLfactorclamp) LVLfactor = LVLfactorclamp;

			// Check Strength
			int PlayerSTR = CallACS("StatCheck",7);
			double STRfactor = 1.0; double STRfactorclamp = 10.00;
			if (damageType != 'Magic')
			{
				if (CharacterClass == 0) STRfactor = 1.00 + (PlayerSTR * .006667);			// Deggaris	(1 STR = +0.6667~% Damage Dealt)
				if (CharacterClass == 1) STRfactor = 1.00 + (PlayerSTR * .005);					// Illucia	(1 STR = +0.5% Damage Dealt)
				if (CharacterClass == 2) STRfactor = 1.00 + (PlayerSTR * .003334);			// Flora		(1 STR = +0.3334~% Damage Dealt)
				if (CharacterClass == 8) STRfactor = 1.00 + (PlayerSTR * .003);					// Ailish		(1 STR = +0.3% Damage Dealt)
				if (CharacterClass == 9) STRfactor = 1.00 + (PlayerSTR * .00625);				// Petra		(1 STR = +0.625% Damage Dealt)
			}
			if (STRfactor > STRfactorclamp) STRfactor = STRfactorclamp;

			// Check Sorcery
			int PlayerSOR = CallACS("StatCheck",6);
			double SORfactor = 1.0; double SORfactorclamp = 10.00;
			if (damageType == 'Magic')
			{
				if (CharacterClass == 0) SORfactor = 1.00 + (PlayerSOR * .003334);			// Deggaris	(1 SOR = +0.3334~% Damage Dealt)
				if (CharacterClass == 1) SORfactor = 1.00 + (PlayerSOR * .005);					// Illucia	(1 SOR = +0.5% Damage Dealt)
				if (CharacterClass == 2) SORfactor = 1.00 + (PlayerSOR * .006667);			// Flora		(1 SOR = +0.6667~% Damage Dealt)
				if (CharacterClass == 8) SORfactor = 1.00 + (PlayerSOR * .00625);				// Ailish		(1 SOR = +0.625% Damage Dealt)
				if (CharacterClass == 9) SORfactor = 1.00 + (PlayerSOR * .003);					// Petra		(1 SOR = +0.3% Damage Dealt)
			}
			if (SORfactor > SORfactorclamp) SORfactor = SORfactorclamp;

			// "Power Trip" Mode
			double MusouFactor = 1.0;
			if (dvds_musou_powertripmode == 1) MusouFactor = 5.0;
			if (dvds_musou_powertripmode == 2) MusouFactor = 10.0;

			// Hellcore Level Checker
			double HellcoreLevelFactor = 1.0;
			int HellcoreType = 0; 
			int HellcoreLevel = 0;
			// Slot 4 Hellcore Weapons
			if (damageType == 'ImpClaw') HellcoreType = 96;
			if (damageType == 'DarkImpClaw') HellcoreType = 97;
			if (damageType == 'CacodemonEye') HellcoreType = 98;
			if (damageType == 'CacolanternEye') HellcoreType = 99;
			if (damageType == 'AbaddonEye') HellcoreType = 100;
			// Slot 5 Hellcore Weapons
			if (damageType == 'KnightFist') HellcoreType = 101;
			if (damageType == 'BaronFist') HellcoreType = 102;
			if (damageType == 'BelphegorFist') HellcoreType = 103;
			if (damageType == 'BruiserFist') HellcoreType = 104;
			if (damageType == 'ArchonFist') HellcoreType = 105;
			if (damageType == 'PyroFist') HellcoreType = 106;
			// Slot 6 Hellcore Weapons
			if (damageType == 'IncarnateSkull') HellcoreType = 107;
			if (damageType == 'ArchvileHand') HellcoreType = 108;
			if (damageType == 'DiabloistHand') HellcoreType = 109;
			if (damageType == 'BalrogFist') HellcoreType = 110;
			if (damageType == 'ElementalEye') HellcoreType = 111;
			if (damageType == 'OverlordEye') HellcoreType = 112;
			if (HellcoreType != 0)
			{
				HellcoreLevel = CallACS("MiscVarCheckDECORATE",HellcoreType);
				if (HellcoreLevel > 0)
				{
					double HellcoreBaseMulti = 1.5;
					if (HellcoreLevel >= 1) HellcoreLevelFactor = HellcoreBaseMulti;
					if (HellcoreLevel >= 2) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 3) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 4) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 5) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 6) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 7) HellcoreLevelFactor *= HellcoreBaseMulti;
					if (HellcoreLevel >= 8) HellcoreLevelFactor *= HellcoreBaseMulti;
				}
				//Console.Printf("    (input: HellcoreLevelFactor [%d, LVL %d] = %10f)", HellcoreType, HellcoreLevel, HellcoreLevelFactor);
			}

			// "Soul Mastery" Perk [Hellcore damage ONLY]
			double SoulMasteryFactor = 1.0;
			if (damageType == 'ImpClaw' || damageType == 'DarkImpClaw' || damageType == 'CacodemonEye' || damageType == 'CacolanternEye' || damageType == 'AbaddonEye' || 
			    damageType == 'KnightFist' || damageType == 'BaronFist' || damageType == 'BelphegorFist' || damageType == 'BruiserFist' || damageType == 'ArchonFist' || damageType == 'PyroFist' || 
			    damageType == 'IncarnateSkull' || damageType == 'ArchvileHand' || damageType == 'DiabloistHand' || damageType == 'BalrogFist' || damageType == 'ElementalEye' || damageType == 'OverlordEye')
			{
				SoulMasteryFactor = 1.00 + ((CallACS("MiscVarCheckDECORATE",10033) * .10) + (CallACS("MiscVarCheckDECORATE",10034) * .25));
			}
			
			// Cursed Shield
			double CursedShieldFactor = 1.0;
			if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0)
			{
				CursedShieldFactor *= 0.390625;
				if (damageType == 'ImpClaw' || damageType == 'DarkImpClaw' || damageType == 'CacodemonEye' || damageType == 'CacolanternEye' || damageType == 'AbaddonEye' || 
						damageType == 'KnightFist' || damageType == 'BaronFist' || damageType == 'BelphegorFist' || damageType == 'BruiserFist' || damageType == 'ArchonFist' || damageType == 'PyroFist' || 
						damageType == 'IncarnateSkull' || damageType == 'ArchvileHand' || damageType == 'DiabloistHand' || damageType == 'BalrogFist' || damageType == 'ElementalEye' || damageType == 'OverlordEye')
				{
					CursedShieldFactor *= 2.56;
				}
			}
			
			// "MagiUp" and "Wand/Staff Mastery" Perks [Magic ONLY]
			double MagiUpATKFactor = 1.0;
			double WandStaffMasteryFactor = 1.0;
			if (damageType == 'Magic')
			{
				MagiUpATKFactor = 1.00 + ((MagiUpPerkLevel * .05) + (MagiUpEXPerkLevel * .125)); 
				WandStaffMasteryFactor = 1.00 + ((WandMasteryPerkLevel * .0625) + (WandMasteryEXPerkLevel * .15625)); 
			}
			
			// Clearer of Mind "Perk"
			double ClearOfMindFactor = 1.0;
			if (CharacterClass == 0 || CharacterClass == 1)
			{
				ClearOfMindFactor = 1.00 + ((ClearedOfMindParkLevel * .0375) + (ClearedOfMindEXParkLevel * .09375)); 
			}
			
			// "StamUp" Perk [Melee Oriented Attacks]
			double StamUpATKFactor = 1.0;
			if (damageType == 'Melee' || 
					damageType == 'Trample' || 
					damageType == 'Stomp' || 
					damageType == 'Sceptre' || 
					damageType == 'Gauntlets' || 
					damageType == 'Fist' || 
					damageType == 'Kick' || 
					damageType == 'Chainsaw' )
			{
				StamUpATKFactor = 1.00 + ((StamUpPerkLevel * .05) + (StamUpEXPerkLevel * .125)); 
			}
			
			// Death Rage
			double DeathRageFactor = 1.0;
			if (CallACS("MiscVarCheckDECORATE",9043) > 0)
			{
				if (CallACS("MiscVarCheckDECORATE",10043) == 1) DeathRageFactor = 2.5;
				if (CallACS("MiscVarCheckDECORATE",10043) == 2) DeathRageFactor = 3.75;
				if (CallACS("MiscVarCheckDECORATE",10043) == 3) DeathRageFactor = 5.0;
			}
			
			// Strife's "Accuracy" Upgrades
			double StrifeAccuracyFactor = 1.0;
			StrifeAccuracyFactor = 1.00 + (StrifeAccuracyLevel * .005);
			
			// Doomspell Bonuses
			double DoomSpellFactor = 1.0;
			if (CharacterClass == 0) // Deggaris
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.08334;
				if (damageType == 'Fire') DoomSpellFactor = 1.55;
				if (damageType == 'Holy') DoomSpellFactor = 1.75;
				if (damageType == 'Ice') DoomSpellFactor = 1.0;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 1.0;
				if (damageType == 'Acid') DoomSpellFactor = 2.1;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 2.1;
				if (damageType == 'Sigil') DoomSpellFactor = 1.03125;
			}
			if (CharacterClass == 1) // Illucia
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.16667;
				if (damageType == 'Fire') DoomSpellFactor = 1.0;
				if (damageType == 'Holy') DoomSpellFactor = 0.875;
				if (damageType == 'Ice') DoomSpellFactor = 2.1;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 2.1;
				if (damageType == 'Acid') DoomSpellFactor = 1.55;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.55;
				if (damageType == 'Sigil') DoomSpellFactor = 1.03125;
			}
			if (CharacterClass == 2) // Flora
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.25;
				if (damageType == 'Fire') DoomSpellFactor = 2.1;
				if (damageType == 'Holy') DoomSpellFactor = 2.5;
				if (damageType == 'Ice') DoomSpellFactor = 1.55;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 1.55;
				if (damageType == 'Acid') DoomSpellFactor = 1.0;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.0;
				if (damageType == 'Sigil') DoomSpellFactor = 1.125;
			}
			if (CharacterClass == 8) // Ailish
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.25;
				if (damageType == 'Fire') DoomSpellFactor = 2.1;
				if (damageType == 'Holy') DoomSpellFactor = 2.125;
				if (damageType == 'Ice') DoomSpellFactor = 2.1;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 1.55;
				if (damageType == 'Acid') DoomSpellFactor = 1.0;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.0;
				if (damageType == 'Sigil') DoomSpellFactor = 1.125;
			}
			if (CharacterClass == 9) // Petra
			{
				if (damageType == 'Magic') DoomSpellFactor = 1.08334;
				if (damageType == 'Fire') DoomSpellFactor = 1.55;
				if (damageType == 'Holy') DoomSpellFactor = 2.375;
				if (damageType == 'Ice') DoomSpellFactor = 1.55;
				if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') DoomSpellFactor = 1.55;
				if (damageType == 'Acid') DoomSpellFactor = 1.0;
				if (damageType == 'PoisonElemental') DoomSpellFactor = 1.0;
				if (damageType == 'Sigil') DoomSpellFactor = 1.125;
			}
			
			// Invisibility [OFFENSIVE]
			double InvisFactor = 1.0;
			double InvisBaseAmt = 1.25;
			if (InvisiblityLevel >= 1)
			{
				InvisFactor *= InvisBaseAmt;
				if (InvisiblityLevel >= 2)
				{
					InvisFactor *= InvisBaseAmt;
					if (InvisiblityLevel >= 3)
					{
						InvisFactor *= InvisBaseAmt;
						if (InvisiblityLevel >= 4)
						{
							InvisFactor *= InvisBaseAmt;
						}
					}
				}
			}
			
			// Dashing Bonus
			double DashingFactor = 1.0;
			if (CallACS("MiscVarCheckDECORATE",166) > 0)
			{
				if (damageType == 'Sceptre') DashingFactor = 1.75;
				if (damageType == 'Gauntlets') DashingFactor = 1.625;
				if (damageType == 'Fist' || damageType == 'Kick') DashingFactor = 1.5;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Chainsaw') DashingFactor = 1.25;
			}
			
			// Uppercut Bonus
			double UppercutFactor = 1.0;
			if (damageType == 'Fist' || damageType == 'Gauntlets')
			{
				if (Owner.CountInv("UppercutATKBonus1") > 0) UppercutFactor = 1.25;
				if (Owner.CountInv("UppercutATKBonus2") > 0) UppercutFactor = 1.625;
			}

			// Landing Bonus
			double LandingFactor = 1.0;
			if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Sceptre' || damageType == 'Gauntlets' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw')
			{
				if (landdmgbonus == 1) LandingFactor = 2.0;
				if (landdmgbonus == 2) LandingFactor = 3.5;
				if (landdmgbonus == 3) LandingFactor = 6.5625;
				if (landdmgbonus == 4) LandingFactor = 13.9453125;
			}

			// Tension Level [OFFENSIVE]
			double TensionFactor = 1.0;
			int TensionLevel = CallACS("MiscVarCheckDECORATE",181);
			int CanUseTension = dvds_allowtension;
			if (CanUseTension > 0)
			{
				if (TensionLevel == 1) TensionFactor = 1.7;		// "5" Tension
				if (TensionLevel == 2) TensionFactor = 3;			// "20" Tension
				if (TensionLevel == 3) TensionFactor = 5;			// "50" Tension
				if (TensionLevel == 4) TensionFactor = 7.5;		// "100" Tension
				if (TensionLevel == 5) TensionFactor = 11.25;	// "250" Tension
				if (TensionLevel == 6) TensionFactor = 17.5;	// "500" Tension
				if (TensionLevel == 7) TensionFactor = 25;		// "1000" Tension
			}
			
			// Flora Armor
			double FloraArmorFactor = 1.0;
			if (CharacterClass == 2)
			{
				if (Owner.CountInv("EvenstarNecklace") > 0) 
				{
					if (damageType == 'Magic') FloraArmorFactor += 0.2;
					if (damageType == 'Fire') FloraArmorFactor += 0.5;
					if (damageType == 'Ice') FloraArmorFactor += 0.5;
					if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Lightning') FloraArmorFactor += 0.5;
					if (damageType == 'Holy') FloraArmorFactor += 0.5;
				}
				if (Owner.CountInv("DoveRibbon") > 0) 
				{
					if (damageType == 'Magic') FloraArmorFactor += 0.2;
				}
				if (Owner.CountInv("FalconKnifeEarrings") > 0)
				{
					FloraArmorFactor *= 2.0;
					if (damageType == 'Gauntlets' || damageType == 'Fist' || damageType == 'Kick') FloraArmorFactor *= 1.3333;
				}
			}
			
			// The One Ring [OFFENSIVE]
			double RingFactor = 1.0;
			if (Owner.CountInv("TheOneRing") > 0) RingFactor = 2.5;

			// DQ Buffs [OFFENSIVE]
			double DQBuffFactor = 1.0;
			if (DQOomphTimer > 0) DQBuffFactor *= 2.0; // Oomph
			if (DQBluntTimer > 0) DQBuffFactor *= 0.5; // Blunt
			if (BlindTimer > 0) // Blind
			{
				if (random(1,16) == 1) DQBuffFactor *= 0.2; else DQBuffFactor *= 0.8; 
			}

			// Divine Avatar [OFFENSIVE]
			double DivineAvatarFactor = 1.0;
			if (DivineAvatarTimer > 0) DivineAvatarFactor = 4.0;

			// GoE? [OFFENSIVE]
			double GoEFactor = 1.0;
			if (GoETimer > 0) GoEFactor = 10.0;

			double TOTALFactor = LVLfactor 
													* STRfactor 
													* SORfactor 
													* MusouFactor 
													* MagiUpATKFactor 
													* WandStaffMasteryFactor 
													* StamUpATKFactor 
													* DeathRageFactor 
													* StrifeAccuracyFactor 
													* ClearOfMindFactor 
													* HellcoreLevelFactor
													* SoulMasteryFactor
													* CursedShieldFactor
													* DoomSpellFactor
													* InvisFactor
													* DashingFactor
													* UppercutFactor
													* LandingFactor
													* TensionFactor
													* FloraArmorFactor
													* RingFactor
													* DQBuffFactor
													* DivineAvatarFactor
													* GoEFactor;
			newdamage = max(1, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));

			if (playeractor) playeractor.playoutputdmg = newdamage;
			if (dvdsdebug_actordmgdisplays > 0 && newdamage > 0) 
			{
				Console.Printf("    (\czPlayerStatItem Input [STEP 6 - Alter Player's Dmg]\c-: \cwDmgType:\c- \cw%s\c-, input: \cyolddmg\c- / \cynewdmg\c- = \cy%d\c- / \cy%d\c-, \caTOTALFactor\c- = \ca%8f\c-, LVLFactor [%d] = %8f, STRfactor [%d] = %8f, SORfactor [%d] = %8f, MusouFactor = %8f, StamUpATKFactor = %8f, MagiUpATKFactor = %8f, WandStaffMasteryFactor = %8f, DeathRageFactor = %8f, StrifeAccuracyFactor = %8f, ClearOfMindFactor = %8f, HellcoreLevelFactor = %8f, SoulMasteryFactor = %8f, CursedShieldFactor = %8f, DoomSpellFactor = %8f, InvisFactor = %8f, DashingFactor = %8f, UppercutFactor = %8f, LandingFactor = %8f, TensionFactor = %8f, FloraArmorFactor = %8f, RingFactor = %8f, DQBuffFactor = %8f, DivineAvatarFactor = %8f, GoEFactor = %8f)", 
				damageType, damage, newdamage, TOTALFactor, 
				PlayerLevel, LVLFactor, PlayerSTR, STRfactor, PlayerSOR, SORfactor, 
				MusouFactor, StamUpATKFactor, MagiUpATKFactor, 
				WandStaffMasteryFactor, DeathRageFactor, StrifeAccuracyFactor, 
				ClearOfMindFactor, HellcoreLevelFactor, SoulMasteryFactor, 
				CursedShieldFactor, DoomSpellFactor, 
				InvisFactor, DashingFactor, UppercutFactor, 
				LandingFactor, TensionFactor, FloraArmorFactor, 
				RingFactor, DQBuffFactor, DivineAvatarFactor, GoEFactor);
			}
		}

		// ******************
		// ******************
		// **Defensive Code**
		// ******************
		// ******************
		if (passive && damage > 0) // If the owner [usually the player] of the item is the DEFENDER
		{
			int predmg = damage;
			if (playeractor) predmg = playeractor.mobjdmg;
			double factorchange = 1.00;
			if (predmg > 0) factorchange = 1.0 * damage / predmg;
			if (dvdsdebug_playerdmgdisplays > 0) Console.Printf("    (\cz[STEP 6 (\cwsuper.DamageMobj\cz)] player-StatItem input\c-: \cypredmg\c- / \cydamage\c- = \cy%d\c- /  \cy%d\c-, \cafactorchange\c- = \ca%8f\c-)", predmg, damage, factorchange);

			// ****************************************
			// *DEFENSE THAT CAN BE IGNORED GOES FIRST*
			// ****************************************
			// Check Level
			int PlayerLevel = CallACS("StatCheck",0);
			double LVLfactor = 1.0; double LVLfactorclamp = 0.05;
			if (CharacterClass == 0) LVLFactor = 1.00 - (PlayerLevel * .00117);				// Deggaris	(1 LVL = -0.117% Damage Taken)
			if (CharacterClass == 1) LVLFactor = 1.00 - (PlayerLevel * .0009707);			// Illucia	(1 LVL = -0.09707% Damage Taken)
			if (CharacterClass == 2) LVLFactor = 1.00 - (PlayerLevel * .0007633);			// Flora		(1 LVL = -0.07633% Damage Taken)
			if (CharacterClass == 8) LVLFactor = 1.00 - (PlayerLevel * .000800);			// Ailish		(1 LVL = -0.0800% Damage Taken)
			if (CharacterClass == 9) LVLFactor = 1.00 - (PlayerLevel * .0010875);			// Petra		(1 LVL = -0.10875% Damage Taken)
			if (LVLfactor < LVLfactorclamp) LVLfactor = LVLfactorclamp;

			// Check Defense
			int PlayerDEF = CallACS("StatCheck",4);
			double DEFfactor = 1.0; double DEFfactorclamp = 0.05;
			if (damageType != 'Magic')
			{
				if (CharacterClass == 0) DEFfactor = 1.00 - (PlayerDEF * .006667);			// Deggaris	(1 DEF = -0.6667~% Physical Damage)
				if (CharacterClass == 1) DEFfactor = 1.00 - (PlayerDEF * .005);					// Illucia	(1 DEF = -0.5000% Physical Damage)
				if (CharacterClass == 2) DEFfactor = 1.00 - (PlayerDEF * .003334);			// Flora		(1 DEF = -0.3334~% Physical Damage)
				if (CharacterClass == 8) DEFfactor = 1.00 - (PlayerDEF * .003);					// Ailish		(1 DEF = -0.3000% Physical Damage)
				if (CharacterClass == 9) DEFfactor = 1.00 - (PlayerDEF * .00725);				// Petra		(1 DEF = -0.7250% Physical Damage)
			}
			if (DEFfactor < DEFfactorclamp) DEFfactor = DEFfactorclamp;

			// Check Therapeusis
			int PlayerTHE = CallACS("StatCheck",8);
			double THEfactor = 1.0; double THEfactorclamp = 0.05;
			if (damageType == 'Magic')
			{
				if (CharacterClass == 0) THEfactor = 1.00 - (PlayerTHE * .003334);			// Deggaris	(1 THE = -0.3334~% Magic Damage)
				if (CharacterClass == 1) THEfactor = 1.00 - (PlayerTHE * .005);					// Illucia	(1 THE = -0.5000% Magic Damage)
				if (CharacterClass == 2) THEfactor = 1.00 - (PlayerTHE * .006667);			// Flora		(1 THE = -0.6667~% Magic Damage)
				if (CharacterClass == 8) THEfactor = 1.00 - (PlayerTHE * .00725);				// Ailish		(1 THE = -0.7250% Magic Damage)
				if (CharacterClass == 9) THEfactor = 1.00 - (PlayerTHE * .003);					// Petra		(1 THE = -0.3000% Magic Damage)
			}
			if (THEfactor < THEfactorclamp) THEfactor = THEfactorclamp;
			
			// "LifeUp" Perk
			double LifeUpDEFFactor = 1.0;
			LifeUpDefFactor = 1.00 - ((LifeUpPerkLevel * .05) + (LifeUpEXPerkLevel * .125)); 

			// "Demolition Expert" Perk
			double DemoExpertFactor = 1.00;
			if (damageType == 'Explosive')
			{
				DemoExpertFactor = 1.00 - ((CallACS("MiscVarCheckDECORATE",10025) * frandom[demordfactor](0.07,0.14)) - (CallACS("MiscVarCheckDECORATE",10026) * (frandom[demordfactor2](0.07,0.14) * 5 / 2))); 
				if (DemoExpertFactor < 0.025) DemoExpertFactor = 0.025;
			}

			// Strife's "Stamina" Upgrades
			double StrifeStaminaFactor = 1.0;
			StrifeStaminaFactor = 1.00 - (StrifeStaminaLevel * .005);
			
			// Invisibility [DEFENSIVE] [if ignored] (33% Chance)
			InvisFactor = 1.0;
			InvisBaseAmt = 0.8;
			if (InvisIgnored == 3)
			{
				if (InvisiblityLevel >= 1)
				{
					InvisFactor *= InvisBaseAmt;
					if (InvisiblityLevel >= 2)
					{
						InvisFactor *= InvisBaseAmt;
						if (InvisiblityLevel >= 3)
						{
							InvisFactor *= InvisBaseAmt;
							if (InvisiblityLevel >= 4)
							{
								InvisFactor *= InvisBaseAmt;
							}
						}
					}
				}
			}
			
			// Uppercut Bonus
			double UppercutFactor = 1.0;
			if (Owner.CountInv("UppercutDEFBonus1") > 0) UppercutFactor = 0.80;
			if (Owner.CountInv("UppercutDEFBonus2") > 0) UppercutFactor = 0.615;

			// Kicking Bonus
			double KickingFactor = 1.0;
			if (Owner.CountInv("UppercutDEFBonus1") > 0) KickingFactor = 0.75;
			if (Owner.CountInv("UppercutDEFBonus2") > 0) KickingFactor = 0.5625;

			// Kicking Bonus
			double MartArtFactor = 1.0;
			if (Owner.CountInv("MartArtsMaster1") > 0)
			{
				MartArtFactor *= 0.80;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') MartArtFactor *= 0.90;
			}
			if (Owner.CountInv("MartArtsMaster2") > 0)
			{
				MartArtFactor *= 0.50;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') MartArtFactor *= 0.75;
			}

			// Hell Warrior Shield [DEFENSIVE]
			double EWShieldFactor = 1.00;
			If (weapon is "EvilWarriorShield") 
			{
				EWShieldFactor *= 0.67;
				if (Owner.CountInv("EWShieldDefendMode") > 0) EWShieldFactor *= 0.134;
				if (Owner.CountInv("EWShieldDefendModeExtra") > 0) EWShieldFactor *= 0.0268;
			}

			double PlayerFistBlockFactor = 1.00;
			if (Owner.CountInv("FistPlayerBlock") > 0) 
			{
				PlayerFistBlockFactor *= 0.5;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.5;
			}
			if (Owner.CountInv("FistPlayerBlock2") > 0) 
			{
				PlayerFistBlockFactor *= 0.375;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.375;
			}
			if (Owner.CountInv("FistPlayerBlock3") > 0) 
			{
				PlayerFistBlockFactor *= 0.25;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.25;
			}
			if (Owner.CountInv("FistPlayerBlockExtra") > 0) 
			{
				PlayerFistBlockFactor *= 0.1;
				if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp') PlayerFistBlockFactor *= 0.1;
			}

			// Sceptre Swinging [DEFENSIVE]
			double SceptreDefenseFactor = 1.0;
			if (Owner.CountInv("SwingDefense0") > 0) SceptreDefenseFactor *= 0.95;
			if (Owner.CountInv("SwingDefense1") > 0) SceptreDefenseFactor *= 0.8333;
			if (Owner.CountInv("SwingDefense2") > 0) SceptreDefenseFactor *= 0.6666;
			if (Owner.CountInv("SwingDefense3") > 0) SceptreDefenseFactor *= 0.5;
			if (Owner.CountInv("ShieldDefense") > 0) SceptreDefenseFactor *= 0.5;
			if (Owner.CountInv("ShieldDefense2") > 0) SceptreDefenseFactor *= 0.25;
			if (Owner.CountInv("ShieldDefense3") > 0) SceptreDefenseFactor *= 0.125;
			if (Owner.CountInv("SceptreSpinDefense1") > 0) SceptreDefenseFactor *= 0.9375;
			if (Owner.CountInv("SceptreSpinDefense2") > 0) SceptreDefenseFactor *= 0.875;
			if (Owner.CountInv("SceptreSpinDefense3") > 0) SceptreDefenseFactor *= 0.75;
			if (Owner.CountInv("SceptreSpinDefense4") > 0) SceptreDefenseFactor *= 0.5;

			// Sauron Equipment [DEFENSIVE]
			double SauronEquipFactor = 1.0;
			if (Owner.CountInv("SauronHelmet") > 0) 
			{
				SauronEquipFactor *= 0.75; // General Reduction
				if (damageType == 'Bullet') SauronEquipFactor *= 0.833334;
			}

			// The One Ring [DEFENSIVE]
			double RingFactor = 1.0;
			if (Owner.CountInv("TheOneRing") > 0) RingFactor = 0.4;

			// DQ Buffs [DEFENSIVE]
			double DQBuffFactor = 1.0;
			if (DQBuffTimer > 0) DQBuffFactor *= 0.50; // Buff
			if (DQSapTimer > 0) DQBuffFactor *= 2.00; // Sap
			if (SleepTimer > 0) // Sleep
			{
				if(random(1,16) == 1) DQBuffFactor *= 5.0; else DQBuffFactor *= 1.25;
			}

			//********************************************************************
			// TOTALFactor is for defenses that can be ignored by various attacks
			//********************************************************************
			double TOTALFactor = 1.0
													* LVLfactor 
													* DEFfactor 
													* THEfactor 
													* LifeUpDEFFactor 
													* DemoExpertFactor 
													* StrifeStaminaFactor
													* InvisFactor
													* UppercutFactor
													* KickingFactor
													* MartArtFactor
													* EWShieldFactor
													* PlayerFistBlockFactor
													* SceptreDefenseFactor
													* SauronEquipFactor
													* RingFactor
													* DQBuffFactor;
													
			// The following allows TOTALFactor to be affected by varying types of (Partial)Defense-Ignoring attacks.
			double BaseIgnoreFactor = 0.0;
			double DefenseIgnoreFactor = 0.0;
			if (playeractor.PlayerDefenseIgnoreFactor > 0.00 && TOTALFactor <= 1.00)
			{
				BaseIgnoreFactor = (1.0 - TOTALFactor);
				DefenseIgnoreFactor = BaseIgnoreFactor * playeractor.PlayerDefenseIgnoreFactor;
				if (dvdsdebug_playerdmgdisplays > 0)
				{
					Console.Printf("    (\cz[STEP 7] PlayerStatItem input\c-: \caDmgIgnFctr\c- = \ca%8f\c- / \cy%8f\c-, \cwPlyrDmgIgnFctr\c- = \cw%8f\c-, \cydmg = %d\c- (StatItem Actor))", 
					DefenseIgnoreFactor, BaseIgnoreFactor, playeractor.PlayerDefenseIgnoreFactor, damage);
				}
				TOTALFactor += DefenseIgnoreFactor;
			}
			else
			{
				if (dvdsdebug_playerdmgdisplays > 0)
				{
					Console.Printf("    (\cz[STEP 7] PlayerStatItem input\c-: \caSKIPPED\c-, \cydmg = %d\c-)", DefenseIgnoreFactor, damage);
				}
			}

			newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, damage, damage * TOTALFactor));
			int postdef1dmg = newdamage;
			if (dvdsdebug_playerdmgdisplays > 0 && damage > 0) 
			{
				Console.Printf("    (\cz[STEP 8] StatItem input ([Ignorables])\c-: \cwDmgType:\c- \cw%s\c-, \cyolddmg\c- / \cynewdmg\c- = \cy%d\c- / \cy%d\c-, \caTOTALFactor\c- = \ca%8f\c-, LVLFactor [%d] = %8f, DEFfactor [%d] = %8f, THEfactor [%d] = %8f, LifeUpDEFFactor = %8f, DemoExpertFactor = %8f, StrifeStaminaFactor = %8f, InvisFactor = %8f, EWShieldFactor = %8f, PlayerFistBlockFactor = %8f, SceptreDefenseFactor = %8f, UppercutFactor = %8f, KickingFactor = %8f, MartArtFactor = %8f, SauronEquipFactor = %8f, RingFactor = %8f, DQBuffFactor = %8f)", 
				damageType, damage, postdef1dmg, TOTALFactor, 
				PlayerLevel, LVLFactor, PlayerDEF, DEFfactor, PlayerTHE, THEfactor, 
				LifeUpDEFFactor, DemoExpertFactor, StrifeStaminaFactor, 
				InvisFactor, EWShieldFactor,
				PlayerFistBlockFactor, SceptreDefenseFactor, UppercutFactor, 
				KickingFactor, MartArtFactor, SauronEquipFactor, 
				RingFactor, DQBuffFactor);
			}


			// ******************************************
			// *DEFENSE THAT CANNOT BE IGNORED GOES LAST*
			// ******************************************
			// "Power Trip" Mode ===Unignorable===
			double MusouFactor = 1.0;
			if (dvds_musou_powertripmode == 1) MusouFactor = 0.2;
			if (dvds_musou_powertripmode == 2) MusouFactor = 0.1;

			// Death Rage [Invulnerablity?] ===Unignorable===
			double DeathRageFactor = 1.0;
			if (CallACS("MiscVarCheckDECORATE",9043) > 0) DeathRageFactor = 0.0;
			
			// Focusing ===Unignorable===
			double FocusFactor = 1.00;
			if (IsFocusOn > 0) FocusFactor = 4.00;

			// Invisibility [DEFENSIVE] [if NOT ignored] (67% Chance)
			InvisFactor = 1.0;
			InvisBaseAmt = 0.8;
			if (InvisIgnored <= 2)
			{
				if (InvisiblityLevel >= 1)
				{
					InvisFactor *= InvisBaseAmt;
					if (InvisiblityLevel >= 2)
					{
						InvisFactor *= InvisBaseAmt;
						if (InvisiblityLevel >= 3)
						{
							InvisFactor *= InvisBaseAmt;
							if (InvisiblityLevel >= 4)
							{
								InvisFactor *= InvisBaseAmt;
							}
						}
					}
				}
			}
			
			// Cursed Shield [DEFENSIVE] ===Unignorable===
			double CursedShieldFactor = 1.0;
			if (CharacterClass == 2 && Owner.CountInv("RuinousShield") > 0)
			{
				CursedShieldFactor *= 2.56;
				if (damageType == 'Dark' || damageType == 'IncarnateGlare')
				{
					CursedShieldFactor *= 0.390625;
				}
			}
			
			// Tension Level [DEFENSIVE] ===Unignorable===
			double TensionFactor = 1.0;
			int TensionLevel = CallACS("MiscVarCheckDECORATE",181);
			int CanUseTension = dvds_allowtension;
			if (CanUseTension > 0)
			{
				if (TensionLevel == 1) TensionFactor = 0.975;		// "5" Tension
				if (TensionLevel == 2) TensionFactor = 0.925;		// "20" Tension
				if (TensionLevel == 3) TensionFactor = 0.825;		// "50" Tension
				if (TensionLevel == 4) TensionFactor = 0.7;			// "100" Tension
				if (TensionLevel == 5) TensionFactor = 0.55;		// "250" Tension
				if (TensionLevel == 6) TensionFactor = 0.35;		// "500" Tension
				if (TensionLevel == 7) TensionFactor = 0.1;			// "1000" Tension
			}

			// Divine Avatar [DEFENSIVE] ===Unignorable===
			double DivineAvatarFactor = 1.0;
			if (DivineAvatarTimer > 0) DivineAvatarFactor = 0.25;

			// GoE? [DEFENSIVE] ===Unignorable===
			double GoEFactor = 1.0;
			if (GoETimer > 0) GoEFactor = 0.1;

			//************************************************************************
			// TOTALFactor2 is for defenses that CANNOT be ignored by various attacks
			//************************************************************************
			double TOTALFactor2 = 1.0
													* MusouFactor
													* DeathRageFactor
													* FocusFactor
													* InvisFactor
													* CursedShieldFactor
													* TensionFactor
													* DivineAvatarFactor
													* GoEFactor;

			newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, postdef1dmg, postdef1dmg * TOTALFactor2));
			if (dvdsdebug_playerdmgdisplays > 0 && postdef1dmg > 0) 
			{
				Console.Printf("    (\cz[STEP 9] StatItem input ([UNIgnorables])\c-: \cwDmgType:\c- \cw%s\c-, \cyolddmg\c- / \cynewdmg\c- = \cy%d\c- / \cy%d\c-, \caTOTALFactor2\c- = \ca%8f\c-, MusouFactor = %8f, DeathRageFactor = %8f, FocusFactor = %8f, InvisFactor = %8f, CursedShieldFactor = %8f, TensionFactor = %8f, DivineAvatarFactor = %8f, GoEFactor = %8f)", 
				damageType, postdef1dmg, newdamage, TOTALFactor2, 
				MusouFactor, DeathRageFactor, FocusFactor,
				InvisFactor, CursedShieldFactor,
				TensionFactor, DivineAvatarFactor, GoEFactor);
			}
			if (playeractor) playeractor.saveddamage = newdamage;
		}
	}

	override double GetSpeedFactor() 
	{
		let weapon = owner.player.ReadyWeapon;
		let playeractor = AetheriusPlayerPawn(owner);
		int CharacterClass = CallACS("CheckCharacterClass");

		int IsFocusOn = CallACS("MiscVarCheckDECORATE",212);

		// Perks
		int perks3mastered;
		int LifeUpPerkLevel = CallACS("MiscVarCheckDECORATE",10001);
		int LifeUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10002);
		int MagiUpPerkLevel = CallACS("MiscVarCheckDECORATE",10003);
		int MagiUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10004);
		int StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
		int StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
		int DodgeMorePerkLevel = CallACS("MiscVarCheckDECORATE",10007);
		int DodgeMoreEXPerkLevel = CallACS("MiscVarCheckDECORATE",10008);
		int JumpMorePerkLevel = CallACS("MiscVarCheckDECORATE",10009);
		int JumpMoreEXPerkLevel = CallACS("MiscVarCheckDECORATE",10010);
		int PsycheFastPerkLevel = CallACS("MiscVarCheckDECORATE",10011);
		int PsycheFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10012);
		int RegenHPFastPerkLevel = CallACS("MiscVarCheckDECORATE",10013);
		int RegenHPFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10014);
		int RegenMPFastPerkLevel = CallACS("MiscVarCheckDECORATE",10015);
		int RegenMPFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10016);
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int BulletAccuracyPerkLevel = CallACS("MiscVarCheckDECORATE",10019);
		int BulletAccuracyEXPerkLevel = CallACS("MiscVarCheckDECORATE",10020);
		//
		int OnTheMovePerkLevel = CallACS("MiscVarCheckDECORATE",10045);
		int OnTheMoveEXPerkLevel = CallACS("MiscVarCheckDECORATE",10046);
		//
		int WandMasteryPerkLevel = CallACS("MiscVarCheckDECORATE",10053);
		int WandMasteryEXPerkLevel = CallACS("MiscVarCheckDECORATE",10054);
		int ClearedOfMindParkLevel = CallACS("MiscVarCheckDECORATE",10055);
		int ClearedOfMindEXParkLevel = CallACS("MiscVarCheckDECORATE",10056);

		// Strife
		int StrifeStaminaLevel = CallACS("MiscVarCheckDECORATE",317);
		int StrifeAccuracyLevel = CallACS("MiscVarCheckDECORATE",318);

		// Buff Checks
		int NVLightTimer = CallACS("GetBuffTimer",0);
		int InvisibilityTimer = CallACS("GetBuffTimer",1);
		int FlightTimer = CallACS("GetBuffTimer",2);
		int StealthTimer = CallACS("GetBuffTimer",3);
		int InvulnerabilityTimer = CallACS("GetBuffTimer",4);
		int TimeFreezeTimer = CallACS("GetBuffTimer",5);
		int FearAuraTimer = CallACS("GetBuffTimer",6);
		int DivineAvatarTimer = CallACS("GetBuffTimer",7);
		int SpreadAura1Timer = CallACS("GetBuffTimer",8);
		int SpreadAura2Timer = CallACS("GetBuffTimer",9);
		int DQOomphTimer = CallACS("GetBuffTimer",10);
		int DQBuffTimer = CallACS("GetBuffTimer",11);
		int DQAcceleratleTimer = CallACS("GetBuffTimer",12);
		int DQBluntTimer = CallACS("GetBuffTimer",13);
		int DQSapTimer = CallACS("GetBuffTimer",14);
		int DQDeceleratleTimer = CallACS("GetBuffTimer",15);
		int PoisonedTimer = CallACS("GetBuffTimer",16);
		int CorrosionTimer = CallACS("GetBuffTimer",17);
		int FatigueTimer = CallACS("GetBuffTimer",18);
		int BlindTimer = CallACS("GetBuffTimer",19);
		int SleepTimer = CallACS("GetBuffTimer",20);
		int SilenceTimer = CallACS("GetBuffTimer",21);
		int RadSuitTimer = CallACS("GetBuffTimer",22);
		int BerserkTimer = CallACS("GetBuffTimer",23);
		int RegenerationTimer = CallACS("GetBuffTimer",24);
		int GoETimer = CallACS("GetBuffTimer",129);

		double CVarAdjustSpeed = 1.00;
		CVarAdjustSpeed = dvds_speedmult;

		double StaminaSpeed = 1.00;
		int StamRatio = CallACS("MiscVarCheckDECORATE",41);
		if (dvds_staminaaffectsspeed > 0)
		{
			if (StamRatio < 157) StaminaSpeed = 0.325;
			if (StamRatio > 156 && StamRatio < 626) StaminaSpeed = 0.475;
			if (StamRatio > 625 && StamRatio < 1251) StaminaSpeed = 0.61;
			if (StamRatio > 1250 && StamRatio < 2501) StaminaSpeed = 0.73;
			if (StamRatio > 2500 && StamRatio < 5001) StaminaSpeed = 0.835;
			if (StamRatio > 5000 && StamRatio < 7501) StaminaSpeed = 0.925;
			if (StamRatio > 7500 && StamRatio < 12501) StaminaSpeed = 1.00;
			if (StamRatio > 12500 && StamRatio < 20001) StaminaSpeed = 1.075;
			if (StamRatio > 20000 && StamRatio < 27501) StaminaSpeed = 1.165;
			if (StamRatio > 27500 && StamRatio < 35001) StaminaSpeed = 1.27;
			if (StamRatio > 35000 && StamRatio < 42501) StaminaSpeed = 1.39;
			if (StamRatio > 42500 && StamRatio < 48751) StaminaSpeed = 1.525;
			if (StamRatio > 48750) StaminaSpeed = 1.675;
		}

		double DodgeMoreSpeed = 1.00;
		DodgeMoreSpeed = 1.0 + ((DodgeMorePerkLevel * 0.01) + (DodgeMoreEXPerkLevel * 0.025));

		double JumpMoreSpeed = 1.00;
		JumpMoreSpeed = 1.0 + ((JumpMorePerkLevel * 0.01) + (JumpMoreEXPerkLevel * 0.025));

		double OnTheMoveSpeed = 1.00;
		OnTheMoveSpeed = 1.0 + ((OnTheMovePerkLevel * 0.02) + (OnTheMoveEXPerkLevel * 0.05));

		double ArmorSpeed = 1.00;
		if (Owner.CountInv("CloakofEvasion") > 0) ArmorSpeed += 0.10;
		if (Owner.CountInv("DoveRibbon") > 0) ArmorSpeed += 0.15;

		double OneRingSpeed = 1.00;
		if (Owner.CountInv("TheOneRing") > 0) OneRingSpeed = 1.50;

		double LVLSpeed = 1.00;
		int PlayerLevel = CallACS("StatCheck",0);
		if (dvds_levelaffectsspeed)
		{
			if (CharacterClass == 0) LVLSpeed = 1.0 + (PlayerLevel * 0.000669);
			if (CharacterClass == 1) LVLSpeed = 1.0 + (PlayerLevel * 0.00117533333333); 
			if (CharacterClass == 2) LVLSpeed = 1.0 + (PlayerLevel * 0.001389);
			if (CharacterClass == 8) LVLSpeed = 1.0 + (PlayerLevel * 0.00128255555555);
			if (CharacterClass == 9) LVLSpeed = 1.0 + (PlayerLevel * 0.00117533333333); 
		}

		double AGLSpeed = 1.00;
		int PlayerAGL = CallACS("StatCheck",3);
		if (CharacterClass == 0) AGLSpeed = 1.0 + (PlayerAGL * 0.00111113333333);
		if (CharacterClass == 1) AGLSpeed = 1.0 + (PlayerAGL * 0.00166666666667); 
		if (CharacterClass == 2) AGLSpeed = 1.0 + (PlayerAGL * 0.00222223333333);
		if (CharacterClass == 8) AGLSpeed = 1.0 + (PlayerAGL * 0.00188888888889); 
		if (CharacterClass == 9) AGLSpeed = 1.0 + (PlayerAGL * 0.00166666666667); 

		double HWShieldSpeed = 1.00;
		If (weapon is "EvilWarriorShield") 
		{
			if (Owner.CountInv("HWShieldBlockHold") > 0) HWShieldSpeed = 0.81; else HWShieldSpeed = 0.9;
		}

		double MinigunFiringSpeed = 1.00;
		If (weapon is "Minigun")
		{
			if (Owner.CountInv("MinigunSlowdownWhenFiring") > 0) 
			{
				MinigunFiringSpeed = 0.2 + (BulletAccuracyPerkLevel * 0.05) + (BulletAccuracyEXPerkLevel * 0.125);
				
			}
		}

		double FistBlockSpeed = 1.00;
		if (Owner.CountInv("FistPlayerSpeedFactor") > 0) FistBlockSpeed = 0.75;
		if (Owner.CountInv("FistPlayerSpeedFactor2") > 0) FistBlockSpeed = 0.825;
		if (Owner.CountInv("FistPlayerSpeedFactor3") > 0) FistBlockSpeed = 0.90;

		double LongbowSpeed = 1.00;
		if (CallACS("MiscVarCheckDECORATE",398) == 1)
		{
			LongbowSpeed = CallACS("MiscVarCheckDECORATE",8) * 0.01;
			if (LongbowSpeed > 1.0) LongbowSpeed = 1.00;
		}
		double SceptreShieldSpeed = 1.00;
		if (CallACS("MiscVarCheckDECORATE",397) == 1) SceptreShieldSpeed = 0.25;
		if (CallACS("MiscVarCheckDECORATE",397) == 2) SceptreShieldSpeed = 0.5;
		if (CallACS("MiscVarCheckDECORATE",397) == 3) SceptreShieldSpeed = 0.875;

		double BuffSpeed = 1.00;
		if (DQAcceleratleTimer > 0) BuffSpeed *= 1.3334; 
		if (DQDeceleratleTimer > 0) BuffSpeed *= 0.6667; 

		double TensionSpeed = 1.00;
		int TensionLevel = CallACS("MiscVarCheckDECORATE",181);
		int CanUseTension = dvds_allowtension;
		if (CanUseTension > 0)
		{
			if (TensionLevel == 1) TensionSpeed = 1.035;
			if (TensionLevel == 2) TensionSpeed = 1.15;
			if (TensionLevel == 3) TensionSpeed = 1.25;
			if (TensionLevel == 4) TensionSpeed = 1.375;
			if (TensionLevel == 5) TensionSpeed = 1.5625;
			if (TensionLevel == 6) TensionSpeed = 1.875;
			if (TensionLevel == 7) TensionSpeed = 2.25;
		}

		double FocusSpeed = 1.00;
		if (IsFocusOn > 0) FocusSpeed = 0.25;

		double DivineAvatarSpeed = 1.00;
		if (DivineAvatarTimer > 0) DivineAvatarSpeed = 1.5;

		Speed = 1.00
					* CVarAdjustSpeed
					* StaminaSpeed 
					* DodgeMoreSpeed
					* JumpMoreSpeed
					* OnTheMoveSpeed
					* FocusSpeed
					* LVLSpeed
					* AGLSpeed
					* ArmorSpeed
					* OneRingSpeed
					* HWShieldSpeed
					* MinigunFiringSpeed
					* FistBlockSpeed
					* LongbowSpeed
					* SceptreShieldSpeed
					* BuffSpeed
					* TensionSpeed
					* DivineAvatarSpeed;
		if (dvdsdebug_showmoveinformation > 0) Console.Printf("    (\czSpeed Input\c-: \cyTotalSpeed\c- = \cy%8f\c-, CVarAdjustSpeed = %8f, StaminaSpeed [%d] = %8f, DodgeMoreSpeed = %8f, JumpMoreSpeed = %8f, OnTheMoveSpeed = %8f, FocusSpeed = %8f, LVLSpeed = %8f, AGLSpeed = %8f, ArmorSpeed = %8f, OneRingSpeed = %8f, HWShieldSpeed = %8f, MinigunFiringSpeed = %8f, FistBlockSpeed = %8f, LongbowSpeed = %8f, SceptreShieldSpeed = %8f, BuffSpeed = %8f, TensionSpeed = %8f, DivineAvatarSpeed = %8f)", Speed, CVarAdjustSpeed, StamRatio, StaminaSpeed, DodgeMoreSpeed, JumpMoreSpeed, OnTheMoveSpeed, FocusSpeed, LVLSpeed, AGLSpeed, ArmorSpeed, OneRingSpeed, HWShieldSpeed, MinigunFiringSpeed, FistBlockSpeed, LongbowSpeed, SceptreShieldSpeed, BuffSpeed, TensionSpeed, DivineAvatarSpeed);
		return Speed; 
	}

}

// Resistance code [w/ some help from argv :V]
class Resistances : Inventory 
{
	default 
	{
		//Powerup.Duration 0xfffffffd;
		+Inventory.PERSISTENTPOWER;
		+Inventory.UNDROPPABLE;
		+Inventory.UNTOSSABLE;
	}

	override void AbsorbDamage(int damage, Name damageType, out int newdamage) 
	{
		let playeractor = AetheriusPlayerPawn(owner);
		if (playeractor && playeractor.saveddamage > 0 && damage == 0) 
		{
			if (dvdsdebug_playerdmgdisplays > 0) Console.Printf("    (\cz[STEP 9.5] Flora PRE-Armor input Safeguard\c-: \cwDmgType\c- = \cw%s\c-, \cyolddmg\c- = \cy%d\c-, \cynewdmg\c- = \cy%d\c-)", 
																					 damageType, damage, playeractor.saveddamage);
			damage = playeractor.saveddamage; 
			playeractor.saveddamage = 0; 
		}
		int olddamage = damage;
		double BaseIgnoreFactor, ArmorIgnoreFactor, ArmorIgnoreFactor2, ArmorIgnoreFactor3;
		double resist = 0;
		double resistN = 0;
		int ArmorItemsAmt = 0;
		if (Owner.CountInv("SafeTeaShoes") > 0)					ArmorItemsAmt++;
		if (Owner.CountInv("PearlyCorset") > 0)					ArmorItemsAmt++;
		if (Owner.CountInv("WaterFlyingDress") > 0)			ArmorItemsAmt++;
		if (Owner.CountInv("EvenstarNecklace") > 0)			ArmorItemsAmt++;
		if (Owner.CountInv("CloakofEvasion") > 0)				ArmorItemsAmt++;
		if (Owner.CountInv("AnubisCufflinks") > 0)			ArmorItemsAmt++;
		if (Owner.CountInv("KissaBra") > 0)							ArmorItemsAmt++;
		if (Owner.CountInv("DivineShield") > 0)					ArmorItemsAmt++;
		if (Owner.CountInv("BalrogRing") > 0)						ArmorItemsAmt++;
		if (Owner.CountInv("DoveRibbon") > 0)						ArmorItemsAmt++;
		if (Owner.CountInv("FalconKnifeEarrings") > 0)	ArmorItemsAmt++;

		// Calculates any non-normal damage type in a separate factor
		for (let inv = Owner.Inv; inv != NULL; inv = inv.Inv)
		{
			if (inv is "ResistanceGrantingItem") resist += ResistanceGrantingItem(inv).GetResistForDamageType(damageType);
		}
		if (playeractor.PlayerArmorIgnoreFactor > 0.00)
		{
			ArmorIgnoreFactor = resist * playeractor.PlayerArmorIgnoreFactor;
			resist -= ArmorIgnoreFactor;
		}
		newdamage = damage * (1.0 - resist);

		// "Normal" Damage Type is counted separately from other resistances
		int newdmg1 = newdamage;
		if (damageType != 'Drowning')
		{
			for (let inv = Owner.Inv; inv != NULL; inv = inv.Inv)
			{
				if (inv is "ResistanceGrantingItem") resistN += ResistanceGrantingItem(inv).ResistNormal;
			}
		}
		if (playeractor.PlayerArmorIgnoreFactorGeneral > 0.00)
		{
			ArmorIgnoreFactor2 = resistN * playeractor.PlayerArmorIgnoreFactorGeneral;
			resistN -= ArmorIgnoreFactor2;
		}
		newdamage = newdmg1 * (1.0 - resistN);
		int tempdamage = newdamage;

		// The "Omniblock" Bonus from the Divine Shield is Armor based defense, so it gets placed here now 
		// instead of PlayerStatItem [which also prevents standard def-ignoring attacks from bypassing it]
		int shieldblockdmg1 = newdamage;
		int ShieldBonusOn = 0;
		double DivineShieldBlockChance = 0.0;
		double DivShldBonus = 0.0;
		if (Owner.CountInv("DivineShield") > 0)
		{
			DivineShieldBlockChance += 7.8; // 13.0
			DivShldBonus += 0.042; // 0.07
			if (Owner.CountInv("SafeTeaShoes") > 0)					{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("PearlyCorset") > 0)					{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("WaterFlyingDress") > 0)			{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("EvenstarNecklace") > 0)			{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("CloakofEvasion") > 0)				{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("AnubisCufflinks") > 0)			{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("KissaBra") > 0)							{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("BalrogRing") > 0)						{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("DoveRibbon") > 0)						{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (Owner.CountInv("FalconKnifeEarrings") > 0)	{ DivineShieldBlockChance += 1.3; DivShldBonus += 0.042; }
			if (playeractor.PlayerArmorIgnoreFactorGeneral > 0.00)
			{
				ArmorIgnoreFactor3 = DivShldBonus * playeractor.PlayerArmorIgnoreFactorGeneral;
				DivShldBonus -= ArmorIgnoreFactor3;
			}

			if (frandom(0.001,100.000) <= DivineShieldBlockChance)
			{ 
				ShieldBonusOn = 1;
				newdamage = shieldblockdmg1 * (1.0 - DivShldBonus);
				owner.A_Playsound("SceptreEmpyrea/Reflect",random(5,7));
			}
		}
		if ((damageType != 'Holy') && (olddamage > 1 && newdamage < 1)) newdamage = 1;
		int tempdamage2 = newdamage;

		if (dvdsdebug_playerdmgdisplays > 0)
		{
			if (ArmorItemsAmt > 0) Console.Printf("    (\cz[STEP 10] Flora Armor input\c-: \cwDmgType\c- = \cw%s\c-, \cyolddmg\c- = \cy%d\c-, \cydmg\c- = \cy%d\c-, \cares\c- = \ca%.4f\c-, \cynewdmg1\c- = \cy%d\c-, \caresN\c- = \ca%.4f\c-, \cyfinaldmg\c- = \cy%d\c-, \cxArmorIgnoreFactor\c- = \cx%8f\c-, \cwArmorIgnoreFactor2\c- = \cw%8f\c-)", damageType, olddamage, damage, resist, newdmg1, resistN, tempdamage, ArmorIgnoreFactor, ArmorIgnoreFactor2);
												else Console.Printf("    (\cz[STEP 10] Flora Armor input\c-: \caSKIPPED\c-, \cyolddmg\c- = \cy%d\c-, \cydmg = %d\c-)", olddamage, newdmg1);

			if (ShieldBonusOn > 0) Console.Printf("    (\cz[STEP 11] Flora Omniblock Input\c-: \cwDmgType\c- = \cw%s\c-, \cyshieldblockdmg1\c- = \cy%d\c-, \caDivShldBonus\c- = \ca%.4f\c-, \cyfinaldmg\c- = \cy%d\c-, \cwArmorIgnoreFactor3\c- = \cw%8f\c-)", damageType, shieldblockdmg1, DivShldBonus, tempdamage2, ArmorIgnoreFactor3);
												else Console.Printf("    (\cz[STEP 11] Flora Omniblock Input\c-: \caSKIPPED\c-, \cydmg = %d\c-)", shieldblockdmg1);
		}
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class ResistanceGrantingItem : CustomInventory 
{
	double ResistNormal, ResistPhysical, ResistMelee, ResistBullet, ResistMagic;
	double ResistFire, ResistIce, ResistThunder, ResistHoly, ResistDark, ResistWind, ResistEarth;
	double ResistSlime, ResistMagma, ResistCrush, ResistDrowning, ResistFalling, ResistExplosive;
	double ResistSceptre, ResistFist, ResistKick, ResistGauntlets, ResistChainsaw;
	double ResistAcid, ResistPoison;

	property ResistNormal: ResistNormal;
	property ResistPhysical: ResistPhysical;
	property ResistMelee: ResistMelee;
	property ResistBullet: ResistBullet;
	property ResistMagic: ResistMagic;

	property ResistFire: ResistFire;
	property ResistIce: ResistIce;
	property ResistThunder: ResistThunder;
	property ResistHoly: ResistHoly;
	property ResistDark: ResistDark;
	property ResistWind: ResistWind;
	property ResistEarth: ResistEarth;

	property ResistSlime: ResistSlime;
	property ResistMagma: ResistMagma;
	property ResistCrush: ResistCrush;
	property ResistDrowning: ResistDrowning;
	property ResistFalling: ResistFalling;
	property ResistExplosive: ResistExplosive;

	property ResistSceptre: ResistSceptre;
	property ResistFist: ResistFist;
	property ResistKick: ResistKick;
	property ResistGauntlets: ResistGauntlets;
	property ResistChainsaw: ResistChainsaw;

	property ResistAcid: ResistAcid;
	property ResistPoison: ResistPoison;
    
	double GetResistForDamageType(Name damageType) 
	{
		if (damageType == 'Physical')
				return ResistPhysical;
		else if (damageType == 'Melee' || damageType == 'Trample' || damageType == 'Stomp' || damageType == 'Fist' || damageType == 'Kick' || damageType == 'Chainsaw' || damageType == 'Gauntlets')
				return ResistMelee;
		else if (damageType == 'Bullet' || damageType == 'Railgun')
				return ResistBullet;
		else if (damageType == 'Magic')
				return ResistMagic;
		else if (damageType == 'Fire')
				return ResistFire;
		else if (damageType == 'Ice')
				return ResistIce;
		else if (damageType == 'Thunder' || damageType == 'Electric' || damageType == 'Shock')
				return ResistThunder;
		else if (damageType == 'Holy')
				return ResistHoly;
		else if (damageType == 'Dark')
				return ResistDark;
		else if (damageType == 'Wind')
				return ResistWind;
		else if (damageType == 'Earth')
				return ResistEarth;
		else if (damageType == 'Slime')
				return ResistSlime;
		else if (damageType == 'Magma')
				return ResistMagma;
		else if (damageType == 'Crush')
				return ResistCrush;
		else if (damageType == 'Drowning')
				return ResistDrowning;
		else if (damageType == 'Falling')
				return ResistFalling;
		else if (damageType == 'Explosive' || damagetype == 'MOD_ROCKET' || damagetype == 'MOD_R_SPLASH' || damagetype == 'MOD_BARREL')
				return ResistExplosive;
		else if (damageType == 'Sceptre')
				return ResistSceptre;
		else if (damageType == 'Fist;')
				return ResistFist;
		else if (damageType == 'Kick')
				return ResistKick;
		else if (damageType == 'Gauntlets')
				return ResistGauntlets;
		else if (damageType == 'Chainsaw')
				return ResistChainsaw;
		else if (damageType == 'Acid')
				return ResistAcid;
		else if (damageType == 'Poison' || damageType == 'PoisonElemental')
				return ResistPoison;
		else
				return 0;
	}

	States
	{
		Use:
			TNT1 A 0;
			Stop;
	}
}

class BaseFloraArmorItemZSC : ResistanceGrantingItem
{
	int loopernum, armorhumtimer;
	default
	{
		radius 20;
		height 20;
		scale 0.33;
		//Alpha 0.1 RenderStyle Add
		mass 666;
		+DONTGIB;
		+FLOATBOB;
		+INVENTORY.ALWAYSPICKUP;
		+INVENTORY.BIGPOWERUP;
	}
	property loopernum: loopernum;
	
	int gfxeffectlvl;

	override void PostBeginPlay()
	{
		if (CountInv("PlayingDoom64",AAPTR_PLAYER1)) { scale.x * 1.2; scale.y * 1.2; }
		//This space for rent.
		Super.PostBeginPlay();
	}

	override void Tick()
	{
		if (Owner == null)
		{
			gfxeffectlvl = dvds_gfxeffectlevel;
			ACS_NamedExecuteAlways("CheckFloraArmorCopies",0,loopernum,0,0);
			if (A_CheckRange(1024,"Null")) { } else { if (gfxeffectlvl == 0) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,64); } }
			if (A_CheckRange(1024,"Null")) { } else { if (gfxeffectlvl <= 1) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,128); } }
			if (A_CheckRange(1024,"Null")) { } else { if (gfxeffectlvl <= 2) { A_SpawnItemEx("ArmorGlitter", 0, 0, 16, random(-2,2), random(-2,2), random(-2,2) ,192); } }
			armorhumtimer++;
			if (armorhumtimer >= 42)
			{
				A_Stopsound(CHAN_ITEM);
				A_Playsound("FloraArmor/Hum",CHAN_ITEM);
				armorhumtimer = 0;
			}
		}
		Super.Tick(); 
	}

	States
	{
		Spawn:
			FAMR A 0 bright NoDelay;
			loop;
		Use:
			TNT1 A 0;
			Stop;
		Pickup:
			// Other Things
			TNT1 A 0 A_JumpIf(CallACS("CheckPlayerIfDead") == 1,2);
			TNT1 A 0 A_PlaySound("generalequip", 5);
			TNT1 A 0;
			Stop;
	}
}

// Item 1
class SafeTeaShoes : BaseFloraArmorItemZSC
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRA0"
		inventory.icon "FAMRA0";
		Inventory.PickupMessage "Got the \chSafe Tea Shoes\c-!!";
		ResistanceGrantingItem.ResistSlime 0.275;
		ResistanceGrantingItem.ResistMagma 0.275;
		ResistanceGrantingItem.ResistNormal 0.03;
		ResistanceGrantingItem.ResistMagic 0.0125;
		ResistanceGrantingItem.ResistFalling 0.75;
		BaseFloraArmorItemZSC.loopernum 1;
	}

	override void DoEffect() 
	{
		ResistSlime = 0.25 + (0.005 * random[safeteashoes](0,10));
		//if (dvdsdebug_playerdmgdisplays > 0) Console.Printf("    (\czFloraArmorAbsorb\c-: ResistSlime = %8f)", ResistSlime);
		Super.DoEffect(); 
	}

	States
	{
		Spawn:
			FAMR A 1 bright NoDelay;
			loop;
	}
}

// Item 2
class PearlyCorset : BaseFloraArmorItemZSC
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRB0"
		inventory.icon "FAMRB0";
		Inventory.PickupMessage "Got the \chPearly Corset\c-!!";
		ResistanceGrantingItem.ResistNormal 0.07;
		ResistanceGrantingItem.ResistFire 0.02;
		ResistanceGrantingItem.ResistMagma 0.02;
		ResistanceGrantingItem.ResistIce 0.02;
		ResistanceGrantingItem.ResistThunder 0.02;
		ResistanceGrantingItem.ResistDark 0.25;
		ResistanceGrantingItem.ResistMagic 0.025;
		ResistanceGrantingItem.ResistBullet 0.25;
		BaseFloraArmorItemZSC.loopernum 2;
	}

	States
	{
		Spawn:
			FAMR B 1 bright NoDelay;
			loop;
	}
}

// Item 3
class WaterFlyingDress : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRC0"
		inventory.icon "FAMRC0";
		Inventory.PickupMessage "Got the \chWater Flying Dress\c-!!";
		ResistanceGrantingItem.ResistNormal 0.08;
		ResistanceGrantingItem.ResistFire 0.3;
		ResistanceGrantingItem.ResistMagma 0.3;
		ResistanceGrantingItem.ResistMagic 0.25;
		ResistanceGrantingItem.ResistBullet 0.15;
		ResistanceGrantingItem.ResistExplosive 0.20;
		BaseFloraArmorItemZSC.loopernum 3;
	}

	States
	{
		Spawn:
			FAMR C 1 bright NoDelay;
			loop;
	}
}

// Item 4
class EvenstarNecklace : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRD0"
		inventory.icon "FAMRD0";
		Inventory.PickupMessage "Got the \chEvenstar Necklace\c-!!";
		ResistanceGrantingItem.ResistNormal 0.02;
		ResistanceGrantingItem.ResistFire 0.2;
		ResistanceGrantingItem.ResistMagma 0.2;
		ResistanceGrantingItem.ResistIce 0.2;
		ResistanceGrantingItem.ResistThunder 0.2;
		ResistanceGrantingItem.ResistDark 0.2;
		ResistanceGrantingItem.ResistMagic 0.2;
		BaseFloraArmorItemZSC.loopernum 4;
	}

	States
	{
		Spawn:
			FAMR D 1 bright NoDelay;
			loop;
	}
}

// Item 5
class CloakOfEvasion : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRE0"
		inventory.icon "FAMRE0";
		Inventory.PickupMessage "Got the \chCloak of Evasion\c-!!";
		ResistanceGrantingItem.ResistNormal 0.04;
		ResistanceGrantingItem.ResistIce 0.05;
		ResistanceGrantingItem.ResistThunder 0.025;
		ResistanceGrantingItem.ResistBullet 0.1;
		BaseFloraArmorItemZSC.loopernum 5;
	}

	States
	{
		Spawn:
			FAMR E 1 bright NoDelay;
			loop;
	}
}

// Item 6
class AnubisCufflinks : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRF0"
		inventory.icon "FAMRF0";
		Inventory.PickupMessage "Got the \chAnubis Cufflinks\c-!!";
		ResistanceGrantingItem.ResistNormal 0.05;
		ResistanceGrantingItem.ResistThunder 0.0625;
		ResistanceGrantingItem.ResistBullet 0.1;
		BaseFloraArmorItemZSC.loopernum 6;
	}

	States
	{
		Spawn:
			FAMR F 1 bright NoDelay;
			loop;
	}
}

// Item 7
class KissaBra : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRG0"
		inventory.icon "FAMRG0";
		Inventory.PickupMessage "Got \chKissa's Armored Brasseire\c-!!";
		ResistanceGrantingItem.ResistNormal 0.06;
		ResistanceGrantingItem.ResistBullet 0.2;
		BaseFloraArmorItemZSC.loopernum 7;
	}

	States
	{
	Spawn:
		FAMR G 1 bright NoDelay;
		loop;
	}
}

// Item 8
class DivineShield : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRH0"
		inventory.icon "FAMRH0";
		Inventory.PickupMessage "Got the \chDivine Shield\c-!!";
		ResistanceGrantingItem.ResistNormal 0.16;
		ResistanceGrantingItem.ResistFire 0.25;
		ResistanceGrantingItem.ResistMagma 0.25;
		ResistanceGrantingItem.ResistIce 0.25;
		ResistanceGrantingItem.ResistThunder 0.25;
		ResistanceGrantingItem.ResistDark 0.25;
		ResistanceGrantingItem.ResistMagic 0.3;
		BaseFloraArmorItemZSC.loopernum 9;
	}

	States
	{
		Spawn:
			FAMR H 1 bright NoDelay;
			loop;
	}
}

// Item 9
class BalrogRing : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRI0"
		inventory.icon "FAMRI0";
		Inventory.PickupMessage "Got the \chBalrog's Ring\c-!!";
		ResistanceGrantingItem.ResistNormal 0.02;
		ResistanceGrantingItem.ResistFire 0.15;
		ResistanceGrantingItem.ResistMagma 0.15;
		ResistanceGrantingItem.ResistIce 0.225;
		ResistanceGrantingItem.ResistExplosive 0.25;
		BaseFloraArmorItemZSC.loopernum 10;
	}

	States
	{
		Spawn:
			FAMR I 1 bright NoDelay;
			loop;
	}
}

// Item 10
class DoveRibbon : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRJ0"
		inventory.icon "FAMRJ0";
		Inventory.PickupMessage "Got the \chDove's Ribbon\c-!!";
		ResistanceGrantingItem.ResistNormal 0.09;
		ResistanceGrantingItem.ResistFire 0.0125;
		ResistanceGrantingItem.ResistMagma 0.0125;
		ResistanceGrantingItem.ResistIce 0.0625;
		ResistanceGrantingItem.ResistThunder 0.15;
		ResistanceGrantingItem.ResistDark 0.125;
		ResistanceGrantingItem.ResistMagic 0.0625;
		ResistanceGrantingItem.ResistBullet 0.05;
		BaseFloraArmorItemZSC.loopernum 11;
	}

	States
	{
		Spawn:
			FAMR J 1 bright NoDelay;
			loop;
	}
}

// Item 11
class FalconKnifeEarrings : BaseFloraArmorItemZSC 
{
	default
	{
		//$Category DV-DS Armor Items
		//$Sprite "FAMRK0"
		inventory.icon "FAMRK0";
		Inventory.PickupMessage "Got the \chFalcon Knife Earrings\c-!!";
		ResistanceGrantingItem.ResistNormal 0.05;
		BaseFloraArmorItemZSC.loopernum 12;
	}

	States
	{
		Spawn:
			FAMR K 1 bright NoDelay;
			loop;
	}
}
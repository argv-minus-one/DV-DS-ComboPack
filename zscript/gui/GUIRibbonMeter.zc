/**
 * An all-in-one meter widget that uses GUIColorRibbon for fill, GUIText for labeling, and arbitrary widgets drawn under/over the fill part.
 */
class GUIRibbonMeter : GUIWidget {
	DynamicValueInterpolator ValueInterp, MaxValueInterp;
	int Value, MaxValue;
	GUIText LabelText, NumberText;
	GUIColorRibbon MainFill, OverFill;
	bool DrawValue, DrawMaxValue;
	GUIInsets FillInsets;
	GUIWidget DrawUnder, DrawOver;
	
	/** If LengthScale is set to a positive value, then the length of the meter is MaxValue * LengthScale + LengthAdd, and the LengthBase field is the maximum length instead. */
	double LengthScale;
	double LengthBase;
	double LengthAdd;
	
	override void Init(GUIWidget parent = null) {
		Super.Init(parent);
		
		LabelText = new("GUIText");
		LabelText.ConsoleLabel = ConsoleLabel..".LabelText";
		LabelText.Init(self);
		LabelText.Align.X = XALIGN_LEFT;
		
		NumberText = new("GUIText");
		NumberText.ConsoleLabel = ConsoleLabel..".NumberText";
		NumberText.Init(self);
		NumberText.PrefLineLength = 7;
		
		MainFill = new("GUIColorRibbon");
		MainFill.ConsoleLabel = ConsoleLabel..".MainFill";
		MainFill.Init(self);
		MainFill.Align.X = XALIGN_LEFT;
		
		OverFill = new("GUIColorRibbon");
		OverFill.ConsoleLabel = ConsoleLabel..".OverFill";
		OverFill.Init(self);
		OverFill.Align.X = XALIGN_LEFT;
		
		DrawMaxValue = DrawValue = true;
		ValueInterp = DynamicValueInterpolator.Create(0, 0.25, 1, 8);
		MaxValueInterp = DynamicValueInterpolator.Create(0, 0.15, 1, 6);
		LengthBase = 200;
		
		WStack = new("GUIStackGroup");
		WStack.ConsoleLabel = ConsoleLabel.."WStack";
		WStack.Init(self);
	}
	
	void SetBackgroundTextureSet(String textureNamePrefix, int texUseType) {
		DrawUnder = new("GUIEdgeGroup");
		DrawUnder.ConsoleLabel = ConsoleLabel..".DrawUnder";
		DrawUnder.Init(self);
		GUIEdgeGroup(DrawUnder).UseTextureSet(textureNamePrefix, texUseType);
		RequestLayout();
	}
	
	void SetForegroundTextureSet(String textureNamePrefix, int texUseType) {
		DrawOver = new("GUIEdgeGroup");
		DrawOver.ConsoleLabel = ConsoleLabel..".DrawOver";
		DrawOver.Init(self);
		GUIEdgeGroup(DrawOver).UseTextureSet(textureNamePrefix, texUseType);
		RequestLayout();
	}
	
	void Tick() {
		ValueInterp.Update(Value);
		
		let oldMaxValueInterp = MaxValueInterp.GetValue();
		MaxValueInterp.Update(MaxValue);
		
		// If the whole meter needs to grow/shrink, then we need to recompute layout.
		if (oldMaxValueInterp != MaxValueInterp.GetValue() && LengthScale > 0.)
			RequestLayout();
	}
	
	override double PreferredWidth(double height = -1.) {
		return max(
			NumberText == null? 0. : NumberText.PreferredWidth(height),
			MainFill == null? 0. : MainFill.PreferredWidth(height),
			OverFill == null? 0. : OverFill.PreferredWidth(height),
			DrawUnder == null? 0. : DrawUnder.PreferredWidth(height),
			DrawOver == null? 0. : DrawOver.PreferredWidth(height)
		) + Insets.X();
	}
	
	override double PreferredHeight(double width = -1.) {
		return max(
			NumberText == null? 0. : NumberText.PreferredHeight(width),
			MainFill == null? 0. : MainFill.PreferredHeight(width),
			OverFill == null? 0. : OverFill.PreferredHeight(width),
			DrawUnder == null? 0. : DrawUnder.PreferredHeight(width),
			DrawOver == null? 0. : DrawOver.PreferredHeight(width)
		) + Insets.Y();
	}
	
	private double GetFillFraction(double adjust = 0.) {
		let vi = ValueInterp.GetValue(), mvi = MaxValueInterp.GetValue();
		double rf;
		
		if (mvi > 0)
			rf = double(vi) / double(mvi);
		else
			rf = 1;
		
		return clamp(rf + adjust, 0., 1.);
	}
	
	private GUIStackGroup WStack;
	
	override void Layout() {
		Super.Layout();
		
		if (zsgui_debug_ribbonmeter_layout)
			Console.Printf(">>> ZsGUI: Laying out %s into area %fx%f.", ToString(), DC.Bounds.X, DC.Bounds.Y);
		
		WStack.Children.Clear();
		
		if (DrawUnder)
			WStack.Children.Push(DrawUnder);
		if (MainFill) {
			MainFill.Align.Copy(Align);
			MainFill.Insets.Copy(FillInsets);
			WStack.Children.Push(MainFill);
		}
		if (OverFill) {
			OverFill.Align.Copy(Align);
			OverFill.Insets.Copy(FillInsets);
			WStack.Children.Push(OverFill);
		}
		if (DrawOver)
			WStack.Children.Push(DrawOver);
		if (NumberText && DrawValue)
			WStack.Children.Push(NumberText);
		if (LabelText)
			WStack.Children.Push(LabelText);
		
		Rectangle ca;
		ca.Size = DC.Bounds;
		
		LayoutChild(WStack, ca);
	}
	
	override void Draw() {
		Super.Draw();
		
		if (MainFill)
			MainFill.DrawFraction = GetFillFraction();
		if (OverFill)
			OverFill.DrawFraction = GetFillFraction(-1);
		
		if (NumberText != null && DrawValue) {
			String newText;
			
			if (DrawMaxValue)
				newText = String.Format("%d/%d", ValueInterp.GetValue(), MaxValueInterp.GetValue());
			else
				newText = String.Format("%d", ValueInterp.GetValue());
			
			if (newText != NumberText.Text) {
				NumberText.Text = newText;
				NumberText.Layout();
			}
		}
		
		WStack.Draw();
	}
}

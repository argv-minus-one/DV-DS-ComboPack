// Base class [for later use]
class AetheriusBaseZSC : Actor
{
	float user_tempvar1, user_tempvar2, user_tempvar3, user_tempvar4, user_tempvar5;
	int user_hyperlvl1, user_hyperlvl2;
	int user_theta, user_dormant, user_isstealth, user_baseattack, user_basedefense, user_basemass; 
	int user_monsterlevel, user_extraevolvechance, user_extrastealthchance;
	int user_willbecomelegendary, user_legendaryevolved;
	int user_MaxHP, user_HPCritRange, user_HPBuffRange, user_HPXDeathRange, user_HPXDeathRange2, user_HPLowRange;
	int user_checkmapskill, user_ressurrectstr, user_resurrectedtimes, user_canusecrisisatk;
	int user_presetleveladd, user_presetlevelrand1, user_presetlevelrand2;
	int user_barragecounter, user_shotsfired, user_shotsfiredmax;
	float user_shotaccuracy, user_shotaccuracy1, user_shotaccuracy2; 
	float user_shotzaccuracy, user_shotzaccuracy1, user_shotzaccuracy2; 
	float user_randominaccuracy, user_randominaccuracy2;
	float user_basespeed;
	int user_pelletsfired, user_currenttracer, user_aimangleorigin; 
	int user_ammotype, user_gravitytype, user_shotangle, user_chargeinterval, user_pulseinterval;
	int user_spread, user_spread1, user_spread2;
	int user_attacktype, user_attacks, user_attackmax, user_fastchasechance, user_fastchaseextra, user_painfastchase;
	int user_paintomissile;
	int user_painreacttimer;
	int user_fastchasetimer, user_fastchasetimermax;
	int user_walksound;

	int user_nolegendarytrans;
	int user_golddrop;
	int user_crisisprojectile;
	int user_defendtimer, user_defendtimermax, user_defendcycles;
	int user_autorestimer;
	int user_firevolleys, user_firevolleymax;
	int user_random, user_random1, user_ailment1, user_ailmentmaxchance, user_attackpoint;
	int user_chargechance; 
	int user_charmchance, user_charmed;
	int user_summoned;
	int user_regencycles, user_regencyclemax;
	
	/**
	 * Checks if an attack from an actor can hit and damage a target actor with a given projectile or puff.
	 *
	 * This doesn't check whether the source actor *should* attack the target. Use you.isHostile(target) for that.
	 *
	 * @param you The potentially attacking actor.
	 * @param target The actor that “you” is potentially attacking.
	 * @param projectile The class of projectile or puff to attack with.
	 * @param wep The weapon to attack with, if any. Null by default.
	 * @param includingCheckSight If true, a line-of-sight check will also be performed.
	 */
	static bool CanHitWith(Actor you, Actor target, Class<Actor> projectile, Weapon wep = null, bool includingCheckSight = true)
	{
		let defaults = GetDefaultByType(projectile);
		
		return
			you != target &&
			target.bShootable &&
			!target.bDormant &&
			(!defaults.bAllowThruFlags || (
				!defaults.bThruActors &&
				(!defaults.bMThruSpecies || defaults.Species != target.Species)
			)) &&
			(!target.bGhost || (
				!defaults.bThruGhost &&
				(wep == null || !wep.bThruGhost)
			)) &&
			(defaults.bSpectral || !target.bSpectral) &&
			(!includingCheckSight || you.CheckSight(target));
	}
}

class AetheriusCustomInventory : CustomInventory
{
	int allowexperiessence, gfxeffectlevel;
	int animationtimer, heartbeattimer;
	int skilllevel;
	int frametimer;
	int autousemode;
	
	private class<Inventory> iDTech1Check;
	
	property HealthAutoUse: autousemode;

	void A_UseCustomInventoryItem(int type = 0)
	{
		String nm;
		double temp1, temp2, temp3, check1, check2, check3;
		double healmax;
		double perktemp1, perktemp2, perktemp3, perktemp4;
		double perkhealthlimit, perkstaminalimit, perkmanalimit;
		double PerkFactor;
		double perkbasemulti = 16;
		int CurrentHealth = player.mo.health;
		int CurrentMana = CallACS("StatCheck",14); 
		int CurrentStamina = CallACS("MiscVarCheckDECORATE",21);
		int MaxHealthTrue = CallACS("StatCheck",1);
		int MaxMana = CallACS("StatCheck",2);
		int MaxStamina = CallACS("MiscVarCheckDECORATE",22);
		int MaxHealthLimit = MaxHealthTrue * 2;
		int PowerupTimeMulti = dvds_invpoweruptimemultiplier;
		int RegenStamFastPerkLevel = CallACS("MiscVarCheckDECORATE",10017);
		int RegenStamFastEXPerkLevel = CallACS("MiscVarCheckDECORATE",10018);
		int MedicinalProwessPerkLevel = CallACS("MiscVarCheckDECORATE",10049);
		int CharacterClass = CallACS("CheckCharacterClass");
		
		nm = "ArtiInvisibilityNew"; iDTech1Check = nm;
		if (type == -7 && player.mo.CountInv(iDTech1Check) > 0) // Icon of the Defender
		{
			perktemp4 = (35 * 90);
			perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
			perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			CallACS("GetBuffTimer",1,2,perktemp4);
			check1 += 1;
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiInvulnerabilityNew"; iDTech1Check = nm;
		if (type == -6 && player.mo.CountInv(iDTech1Check) > 0) // Ring of Invincibility
		{
			perktemp4 = (35 * 45);
			perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
			perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			CallACS("GetBuffTimer",4,2,perktemp4);
			check1 += 1;
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiInvulnerability2New"; iDTech1Check = nm;
		if (type == -5 && player.mo.CountInv(iDTech1Check) > 0) // Icon of the Defender
		{
			perktemp4 = (35 * 45);
			perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
			perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			CallACS("GetBuffTimer",4,2,perktemp4);
			check1 += 1;
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiHealingRadiusNew"; iDTech1Check = nm;
		if (type == -4 && player.mo.CountInv(iDTech1Check) > 0) // Mystic Ambit Incant
		{
			// Heal HP/Health [62.5%] up to 200%
			temp1 = CurrentHealth;
			healmax = MaxHealthLimit;
			if (temp1 < healmax)
			{
				check1 += 1;
				temp1 += (MaxHealthTrue * 5 / 8);
				if (temp1 > healmax) temp1 = healmax;
				player.mo.health = temp1;
			}
		
			// Heal MP/Mana [62.5%] up to 200%
			healmax = MaxMana * 2;
			if (CurrentMana < healmax)
			{
				check1 += 1;
				CurrentMana += (MaxMana * 5 / 8);
				if (CurrentMana > healmax) CurrentMana = healmax;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);
			}
		
			// Heal Stamina [125%] up to 500%
			healmax = MaxStamina * 5;
			if (CurrentStamina < healmax)
			{
				check1 += 1;
				temp2 = MaxStamina * 1.25;
				perktemp1 = temp2;
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp1 = perktemp1 * PerkFactor;
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Restored: %d VS [%d]", perktemp1, temp2); //PrintBold(s:"Stamina Restored: ",d:perktemp1,s:" VS [",d:temp2,s:"]");
				temp2 = perktemp1;
				CurrentStamina += temp2;
				if (CurrentStamina > healmax) CurrentStamina = healmax;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
		
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("C0 80 C0",0.55,27); // FadeRange(192,128,192,0.55,192,128,192,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiBoostManaNew"; iDTech1Check = nm;
		if (type == -3 && player.mo.CountInv(iDTech1Check) > 0) // Krater of Might [Hexen]
		{
			if (player.mo.CountInv("Mana1") < 500)
			{
				check1 += 1;
				player.mo.A_GiveInventory("Mana1",500);
			}
			if (player.mo.CountInv("Mana2") < 500)
			{
				check1 += 1;
				player.mo.A_GiveInventory("Mana2",500);
			}
			if (CurrentMana < MaxMana * 2)
			{
				check1 += 1;
				CurrentMana = MaxMana * 2;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.55,27,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiSuperHealthNew"; iDTech1Check = nm;
		if (type == -2 && player.mo.CountInv(iDTech1Check) > 0) // Mystic Urn [Heretic AND Hexen]
		{
			// Heal Health [~100 to 110% HP] up to 192.5% Max HP
			temp1 = CurrentHealth;
			healmax = MaxHealthTrue * 1.925;
			if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			healmax = healmax * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			if (healmax > MaxHealthLimit) healmax = MaxHealthLimit;
			
			if (temp1 < healmax)
			{
				check1 += 1;
				temp1 += MaxHealthTrue * frandom(1.0,1.1);
				if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				temp1 = temp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
				if (temp1 > healmax) temp1 = healmax;
				player.mo.health = temp1;
			}
			// Heal Stamina [62.50%] up to 500%
			healmax = MaxStamina * 5;
			if (CurrentStamina < healmax)
			{
				check1 += 1;
				temp2 = MaxStamina * 0.625;
				perktemp1 = temp2;
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp1 = perktemp1 * PerkFactor;
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Restored: %d VS [%d]", perktemp1, temp2); //PrintBold(s:"Stamina Restored: ",d:perktemp1,s:" VS [",d:temp2,s:"]");
				temp2 = perktemp1;
				CurrentStamina += temp2;
				if (CurrentStamina > healmax) CurrentStamina = healmax;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.55,27,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ArtiHealthNew"; iDTech1Check = nm;
		if (type == -1 && player.mo.CountInv(iDTech1Check) > 0) // Mystic Urn [Heretic AND Hexen]
		{
			// Heal Health [~25 to 30% HP] up to 105% Max HP
			temp1 = CurrentHealth;
			healmax = MaxHealthTrue * 1.05;
			if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			healmax = healmax * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			if (healmax > MaxHealthLimit) healmax = MaxHealthLimit;
			
			if (temp1 < healmax)
			{
				check1 += 1;
				temp1 += MaxHealthTrue * frandom(0.25,0.30);
				if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				temp1 = temp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
				if (temp1 > healmax) temp1 = healmax;
				player.mo.health = temp1;
			}

			// Heal Stamina [12.5%]
			healmax = MaxStamina;
			if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			healmax = healmax * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;

			if (CurrentStamina < healmax)
			{
				check1 += 1;
				temp2 = MaxStamina * 0.125;
				perktemp1 = temp2;
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp1 = perktemp1 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp1 = perktemp1 * PerkFactor;
				if (CharacterClass == 0 | CharacterClass == 1 | CharacterClass == 9) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Restored: %d VS [%d]", perktemp1, temp2); //PrintBold(s:"Stamina Restored: ",d:perktemp1,s:" VS [",d:temp2,s:"]");
				temp2 = perktemp1;
				CurrentStamina += temp2;
				if (CurrentStamina > healmax) CurrentStamina = healmax;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.55,27,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "MedicinalHerb"; iDTech1Check = nm;
		if (type == 1 && player.mo.CountInv(iDTech1Check) > 0) // Medicinal Herb
		{
			// Heal Health [~25-35 HP]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = random(25,35);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = temp1;
			}
			// Heal Stamina [~7.5% - ~10.5%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.075,0.105);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.33,23,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "StrongMedicine"; iDTech1Check = nm;
		if (type == 2 && player.mo.CountInv(iDTech1Check) > 0) // Medicinal Herb
		{
			// Heal Health [~55-65 HP]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = random(55,65);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = temp1;
			}
			
			// Heal Stamina [~16.5% - ~19.5%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.165,0.195);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.55,27,"10 FF 10",0.01); // FadeRange(12,255,12,0.55,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "SpecialMedicine"; iDTech1Check = nm;
		if (type == 2 && player.mo.CountInv(iDTech1Check) > 0) // Medicinal Herb
		{
			// Heal Health [~85-105 HP]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = random(85,105);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = temp1;
			}
			
			// Heal Stamina [~25.5% - ~31.5%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.225,0.315);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.77,31,"10 FF 10",0.01); // FadeRange(12,255,12,0.77,16,255,16,0.01,0.77);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "YggdrasilDew"; iDTech1Check = nm;
		if (type == 4 && player.mo.CountInv(iDTech1Check) > 0) // Yggdrasil Dew
		{
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				// Heal Health [90.0% - 110.0%]
				check1 += 1;
				temp2 = ((MaxHealthTrue * random(900,1100)) / 1000);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				temp1 += perktemp1;
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = temp1;
			}
		
			// Heal Mana [22.5% - 27.5%]
			perkmanalimit = MaxMana;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkmanalimit = perkmanalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentMana < perkmanalimit)
			{
				check1 += 1;
				temp2 = MaxMana * frandom(0.225,0.275);
				perktemp3 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp3 = perktemp3 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				temp3 = perktemp3;
				CurrentMana += temp3;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp3, temp2);
				if (CurrentMana > perkmanalimit) CurrentMana = perkmanalimit;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);
			}
		
			// Heal Stamina [90.0% - 110.0%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.9,1.1);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.85,39,"10 FF 10",0.02); // FadeRange(12,255,12,0.85,16,255,16,0.02,1.12);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "PaxaPunch"; iDTech1Check = nm;
		if (type == 5 && player.mo.CountInv(iDTech1Check) > 0) // Paxa Punch
		{
			temp1 = CurrentHealth;
			perktemp2 = 6300; // 180 seconds max
			perktemp2 = perktemp2 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			if (temp1 > 0 && 
					CallACS("MiscVarCheckDECORATE",10) < perktemp2 && 
					CallACS("MiscVarCheckDECORATE",11) < perktemp2)
			{
				// Oomph and Buff for a full minute
				perktemp4 = (35 * 60);
				perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
				perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
				CallACS("MiscVarSetDECORATE",10,perktemp4,1);
				CallACS("MiscVarSetDECORATE",11,perktemp4,1);
				player.mo.A_PlaySound("use_paxa",CHAN_BODY,1.0,0,ATTN_NORM);
				A_PlaySound("use_paxa2",CHAN_BODY,1.0,0,ATTN_NONE);
				CallACS("MiscVarSetDECORATE",2040,70);
				CallACS("MiscVarSetDECORATE",2045,3);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "LesserVimstone"; iDTech1Check = nm;
		if (type == 6 && player.mo.CountInv(iDTech1Check) > 0) // Lesser Vimstone
		{
			if (CallACS("MiscVarCheckDECORATE",181) < 4) // Cooldown Timer is 0 and Tension is less than "100" [tier 4]
			{
				ACS_NamedExecuteAlways("SetTensionLevel",0,2,1);
				player.mo.A_PlaySound("use_lesservimstone",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "GreaterVimstone"; iDTech1Check = nm;
		if (type == 7 && player.mo.CountInv(iDTech1Check) > 0) // Lesser Vimstone
		{
			if (CallACS("MiscVarCheckDECORATE",181) < 7) // Cooldown Timer is 0 and Tension is less than "1000" [tier 7]
			{
				ACS_NamedExecuteAlways("SetTensionLevel",0,4,2);
				player.mo.A_PlaySound("use_greatervimstone",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "MercuryBandana"; iDTech1Check = nm;
		if (type == 8 && player.mo.CountInv(iDTech1Check) > 0) // Mercury Bandana
		{
			temp1 = CurrentHealth;
			perktemp2 = 6300; // 180 seconds max
			perktemp2 = perktemp2 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
			if (temp1 > 0 && CallACS("MiscVarCheckDECORATE",12) < perktemp2)
			{
				// Oomph and Buff for a full minute
				perktemp4 = (35 * 60);
				perktemp4 = (perktemp4 * PowerupTimeMulti) / 100;
				perktemp4 = perktemp4 * (CallACS("MiscVarCheckDECORATE",10050) + 4) / 4;
				CallACS("MiscVarSetDECORATE",12,perktemp4,1);
				player.mo.A_PlaySound("use_mercurybandana",CHAN_BODY,1.0,0,ATTN_NORM);
				CallACS("MiscVarSetDECORATE",2040,70);
				CallACS("MiscVarSetDECORATE",2045,3);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "MagicWater"; iDTech1Check = nm;
		if (type == 9 && player.mo.CountInv(iDTech1Check) > 0) // Magic Water
		{
			perkmanalimit = MaxMana;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkmanalimit = perkmanalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentMana < perkmanalimit)
			{
				temp1 = (random(30,35) + (MaxMana * 0.05));
				perktemp1 = temp1;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp1, temp2);
				CurrentMana += perktemp1;
				if (CurrentMana > perkmanalimit) CurrentMana = perkmanalimit;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);

				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.14,12,"10 FF 10",0.01); // FadeRange(12,255,12,0.14,16,255,16,0.01,0.33);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "SageElixir"; iDTech1Check = nm;
		if (type == 10 && player.mo.CountInv(iDTech1Check) > 0) // Sage Elixir
		{
			perkmanalimit = MaxMana;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkmanalimit = perkmanalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentMana < perkmanalimit)
			{
				temp1 = (random(90,105) + (MaxMana * 0.15));
				perktemp1 = temp1;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp1, temp2);
				CurrentMana += perktemp1;
				if (CurrentMana > perkmanalimit) CurrentMana = perkmanalimit;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);

				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.28,15,"10 FF 10",0.01); // FadeRange(12,255,12,0.28,16,255,16,0.01,0.44);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "ElfinElixir"; iDTech1Check = nm;
		if (type == 11 && player.mo.CountInv(iDTech1Check) > 0) // Elfin Elixir
		{
			temp1 = MaxMana * 1.125;
			perkmanalimit = temp1;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkmanalimit = perkmanalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentMana < perkmanalimit)
			{
				temp1 = MaxMana;
				perktemp1 = temp1;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp1, temp2);
				CurrentMana += perktemp1;
				if (CurrentMana > perkmanalimit) CurrentMana = perkmanalimit;
				CallACS("OtherVarSetDECORATE",2,CurrentMana);

				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.43,19,"10 FF 10",0.01); // FadeRange(12,255,12,0.43,16,255,16,0.01,0.55);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "MiraclePotion"; iDTech1Check = nm;
		if (type == 12 && player.mo.CountInv(iDTech1Check) > 0) // Miracle Potion
		{
			perkhealthlimit = MaxHealthTrue;
			perkmanalimit = MaxMana;
		
			if (CharacterClass == 8) // Ailish gets 25% more healing to both HP/MP [so up to 125% of maximum :V]
			{
				perkhealthlimit *= 1.25;
				perkmanalimit *= 1.25;
			}
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 8; } else { perkbasemulti = 16; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			perkmanalimit = perkmanalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentHealth >= perkhealthlimit && (CurrentMana >= perkmanalimit))
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
			else
			{
				if (CurrentHealth < perkhealthlimit) player.mo.health;
				if (CurrentMana < perkmanalimit) CurrentMana = perkmanalimit;
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Mana Limit: %d VS [%d], Mana Restored: %d VS [%d]", perkmanalimit, MaxMana, perktemp3, temp2);
			
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_PlaySound("healing_dq",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.43,19,"10 FF 10",0.01); // FadeRange(12,255,12,0.43,16,255,16,0.01,0.55);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
		}
		
		nm = "MedPatchNew"; iDTech1Check = nm;
		if (type == 13 && player.mo.CountInv(iDTech1Check) > 0) // Med Patch
		{
			// Heal Health [10%]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = CurrentHealth * frandom(0.095,0.105);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = temp1;
			}
			// Heal Stamina [~9.5% - ~10.5%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.095,0.105);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.11,8,"10 FF 10",0.01);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "MedicalKitNew"; iDTech1Check = nm;
		if (type == 14 && player.mo.CountInv(iDTech1Check) > 0) // Medical Kit
		{
			// Heal Health [25%]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = CurrentHealth * frandom(0.24,0.26);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = temp1;
			}
			// Heal Stamina [~24% - ~26%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.24,0.26);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.265,14,"10 FF 10",0.01);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
		nm = "SurgeryKitNew"; iDTech1Check = nm;
		if (type == 15 && player.mo.CountInv(iDTech1Check) > 0) // Surgery Kit
		{
			// Heal Health [100%]
			temp1 = CurrentHealth;
			perkhealthlimit = MaxHealthTrue;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkhealthlimit = perkhealthlimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (temp1 < perkhealthlimit)
			{
				check1 += 1;
				temp2 = CurrentHealth * frandom(0.96,1.04);
				perktemp1 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp1 = perktemp1 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Healing Limit: %d VS [%d], Health Restored: %d VS [%d]", perkhealthlimit, MaxHealthTrue, perktemp1, temp2);
				temp1 += perktemp1;
				if (temp1 > perkhealthlimit) temp1 = perkhealthlimit;
				player.mo.health = temp1;
			}
			// Heal Stamina [~96% - ~104%]
			perkstaminalimit = MaxStamina;
		
			if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
			perkstaminalimit = perkstaminalimit * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
		
			if (CurrentStamina < perkstaminalimit)
			{
				check1 += 1;
				temp2 = MaxStamina * frandom(0.96,1.04);
				perktemp2 = temp2;
			
				if (CharacterClass == 2 | CharacterClass == 8) { perkbasemulti = 16; } else { perkbasemulti = 8; }
				perktemp2 = perktemp2 * (perkbasemulti + MedicinalProwessPerkLevel) / perkbasemulti;
			
				if (player.mo.CountInv("WaterFlyingDress") > 0 && CharacterClass == 2) perktemp2 = perktemp2 * 5 / 3;
				PerkFactor = ((RegenStamFastPerkLevel * 0.2) + (RegenStamFastEXPerkLevel * 0.5)) + 1.0;
				perktemp2 = perktemp2 * PerkFactor;
				CurrentStamina += perktemp2;

				if (dvdsdebug_healitemdisplays > 0) Console.Printf ("Stamina Limit: %d VS [%d], Stamina Restored: %d VS [%d]", perkstaminalimit, MaxStamina, perktemp2, temp2);
				if (CurrentStamina > perkstaminalimit) CurrentStamina = perkstaminalimit;
				CallACS("MiscVarSetDECORATE",21,CurrentStamina);
			}
			if (check1 > 0)
			{
				player.mo.A_PlaySound("misc/invuse",CHAN_BODY,1.0,0,ATTN_NORM);
				player.mo.A_SetBlend("0C FF 0C",0.55,22,"10 FF 10",0.01);
				player.mo.A_TakeInventory(iDTech1Check,1);
			}
			else
			{
				player.mo.A_PlaySound("inv_fail",CHAN_BODY,1.0,0,ATTN_NORM);
			}
		}
		
	}
}

// Keeps Sounds/Music active during time Freeze powerups
class AetheriusTimeFreezer : PowerTimeFreezer
{
	override void InitEffect()
	{
		Super.InitEffect();
		S_ResumeSound(false);
	}
	
	override void Tick()
	{
		Super.Tick();
		S_ResumeSound(false);
	}
}

class ShieldSpawnerBase : AetheriusBaseZSC
{
	default
	{
		Radius 1;
		Height 1;
		+NOGRAVITY
		+NOINTERACTION
		+NOTIMEFREEZE
		+NOTELESTOMP
	}
}

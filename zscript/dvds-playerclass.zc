class AetheriusPlayerPawn : PlayerPawn
{
	// Spreader Aura Level 1 Angles
	const spread1angle1 = -15.0;
	const spread1angle2 = 15.0;
	const spread1horz1 = 0.0;
	const spread1horz2 = 0.0;
	const spread1height1 = 0.0;
	const spread1height2 = 0.0;

	// Spreader Aura Level 2 Angles/Pitches
	const spread2angle1 = -7.5;
	const spread2angle2 = 7.5;
	const spread2horz1 = 0.0;
	const spread2horz2 = 0.0;
	const spread2pitch1 = -7.5;
	const spread2pitch2 = 7.5;
	const spread2height1 = 0.0;
	const spread2height2 = 0.0;

	int user_PlayerDVDSSpecial[256];

	int actortimer;
	int pbuddha1, pbuddha2, pgod1, pgod2, pnoclip1, pnoclip2;
	int breathdirection; // 0 = down [size decreases], 1 = up [size increases]
	int mobjdmg;
	int playoutputdmg;
	int playtookdamage;
	double basexscale, baseyscale;
	double scalexmulti, scaleymulti;
	int breathframe;
	
	int saveddamage;
	
	double PlayerDefenseIgnoreFactor, PlayerArmorIgnoreFactor, PlayerArmorIgnoreFactorGeneral;
	double neverbleeds;

	private class<Inventory> APPackToken, APPackCheck, MiscCheck;

	double TotalAirControl;
	override void MovePlayer()
	{
		String nm;
		int CharacterClass = CallACS("CheckCharacterClass");
		//double LevelAirControl = level.aircontrol; // Saves a value
		int PlayerLevel = CallACS("StatCheck",0);
		int PlayerAGL = CallACS("StatCheck",3);

		double AirControlBase = 0.2375;
		if (CharacterClass == 0) AirControlBase = 0.2375;
		if (CharacterClass == 1) AirControlBase = 0.2500;
		if (CharacterClass == 2) AirControlBase = 0.2625;
		if (CharacterClass == 8) AirControlBase = 0.2375;
		if (CharacterClass == 9) AirControlBase = 0.275;
		
		// Level Based AirControl
		double LVLAirControl = 1.00 + (PlayerLevel * 0.00123);
		if (CharacterClass == 0) LVLAirControl = 1.00 + (PlayerLevel * 0.00113);
		if (CharacterClass == 1) LVLAirControl = 1.00 + (PlayerLevel * 0.00128);
		if (CharacterClass == 2) LVLAirControl = 1.00 + (PlayerLevel * 0.00138);
		if (CharacterClass == 8) LVLAirControl = 1.00 + (PlayerLevel * 0.00108);
		if (CharacterClass == 9) LVLAirControl = 1.00 + (PlayerLevel * 0.00148);

		// AGLSeed-based multiplier
		double AGLAirControl = 1.00 + (PlayerAGL * 0.000415);
		if (CharacterClass == 0) AGLAirControl = 1.00 + (PlayerAGL * 0.000380);
		if (CharacterClass == 1) AGLAirControl = 1.00 + (PlayerAGL * 0.000430);
		if (CharacterClass == 2) AGLAirControl = 1.00 + (PlayerAGL * 0.000415);
		if (CharacterClass == 8) AGLAirControl = 1.00 + (PlayerAGL * 0.000375);
		if (CharacterClass == 9) AGLAirControl = 1.00 + (PlayerAGL * 0.000400);

		// Armor items
		double ArmorAirControl = 1.00;
		if (CharacterClass == 2)
		{
			if (CountInv("SafeTeaShoes") > 0) 				ArmorAirControl += 0.20;
			if (CountInv("PearlyCorset") > 0) 				ArmorAirControl += 0.0125;
			if (CountInv("WaterFlyingDress") > 0)			ArmorAirControl += 0.0125;
			if (CountInv("EvenstarNecklace") > 0)			ArmorAirControl += 0.0375;
			if (CountInv("CloakofEvasion") > 0)				ArmorAirControl += 0.20;
			if (CountInv("AnubisCufflinks") > 0)			ArmorAirControl += 0.025;
			if (CountInv("KissaBra") > 0)							ArmorAirControl += 0.0375;
			if (CountInv("DivineShield") > 0)					ArmorAirControl += 0.05;
			if (CountInv("BalrogRing") > 0)						ArmorAirControl += 0.0125;
			if (CountInv("DoveRibbon") > 0)						ArmorAirControl += 0.0375;
			if (CountInv("FalconKnifeEarrings") > 0)	ArmorAirControl += 0.05;
		}
		else
		if (CharacterClass == 0 || CharacterClass == 1)
		{
			if (CountInv("DSGreenArmorClass") > 0)		ArmorAirControl += 0.0667;
			if (CountInv("DSBlueArmorClass") > 0)			ArmorAirControl += 0.10;
			if (CountInv("DSStoneArmorClass1") > 0)		ArmorAirControl += 0.1334;
			if (CountInv("DSDiamondArmorClass1") > 0)	ArmorAirControl += 0.18;
			if (CountInv("DSStoneArmorClass2") > 0)		ArmorAirControl += 0.1667;
			if (CountInv("DSDiamondArmorClass2") > 0)	ArmorAirControl += 0.19;
		}
	
		// Sauron Armor items
		double SauronArmorAirControl = 1.00;
		if (CountInv("SauronHelmet") > 0)						SauronArmorAirControl -= 0.10;
		if (CountInv("SauronGauntlets") > 0)				SauronArmorAirControl -= 0.05;
		if (CountInv("SauronGauntletsIllucia") > 0)	SauronArmorAirControl -= 0.05;
		if (CountInv("SauronGauntletsFlora") > 0)		SauronArmorAirControl -= 0.05;
		nm = "SauronGauntletsAilish"; APPackCheck = nm;
		if (CountInv(APPackCheck) > 0)							SauronArmorAirControl -= 0.05;
		nm = "SauronGauntletsPetra"; APPackCheck = nm;
		if (CountInv(APPackCheck) > 0)							SauronArmorAirControl -= 0.05;
		if (CountInv("TheOneRing") > 0)							SauronArmorAirControl += 0.25;

		// Buffs
		double BuffAirControl = 1.00;
		if (CallACS("GetBuffTimer",12) > 0) BuffAirControl += 0.25;
		if (CallACS("GetBuffTimer",15) > 0) BuffAirControl -= 0.25;

		// Sceptre for AirControl.
		double SceptreAirControl = 1.00;
		if (CallACS("MiscVarCheckDECORATE",397) == 1) SceptreAirControl -= 0.20;
		if (CallACS("MiscVarCheckDECORATE",397) == 2) SceptreAirControl -= 0.10;
		if (CallACS("MiscVarCheckDECORATE",397) == 3) SceptreAirControl -= 0.05;

		double PerkFactorAirControl = 1.0;
		PerkFactorAirControl += ((CallACS("MiscVarCheckDECORATE",10009) * 0.05) + (CallACS("MiscVarCheckDECORATE",10010) * 0.125));

		double DashingAirControl = 1.0;
		if (CallACS("MiscVarCheckDECORATE",166) > 0) DashingAirControl = 0.015625;

		double DivineAvatarAirControl = 1.00;
		if (CallACS("GetBuffTimer",7) > 0) DivineAvatarAirControl *= 2.00;

		level.aircontrol = AirControlBase
										 * LVLAirControl
										 * AGLAirControl
										 * ArmorAirControl
										 * SauronArmorAirControl
										 * BuffAirControl
										 * SceptreAirControl
										 * PerkFactorAirControl
										 * DashingAirControl
										 * DivineAvatarAirControl;
		if (dvdsdebug_showmoveinformation > 0)
		{
			Console.Printf("    \cwTotalAirControl:\c- \cw%8f\c-, \cyAirControlBase:\c- \cy%8f\c-, LVLAirControl: %8f, AGLAirControl: %8f, ArmorAirControl: %8f, SauronArmorAirControl: %8f, BuffAirControl: %8f, SceptreAirControl: %8f, PerkFactorAirControl: %8f, DashingAirControl: %8f, DivineAvatarAirControl: %8f", 
													level.aircontrol, AirControlBase,
													LVLAirControl, AGLAirControl,
													ArmorAirControl, SauronArmorAirControl,
													BuffAirControl, SceptreAirControl,
													PerkFactorAirControl, DashingAirControl,
													DivineAvatarAirControl);
		}

		super.MovePlayer();
	}

	override void PostBeginPlay()
	{
		basexscale = scale.x;
		baseyscale = scale.y;
		scalexmulti = 1.00;
		scaleymulti = 1.00;

		// VOODOO Doll Protection
		if (!player || !player.mo || player.mo != self) { return Super.PostBeginPlay(); }

		if (bNOBLOOD == 1) 
		{
			if (bNOBLOODDECALS == 0) bNOBLOODDECALS == 1;
			neverbleeds = 1;
		}
		if (bNOBLOODDECALS == 1) 
		{
			if (bNOBLOOD == 0) bNOBLOOD == 1;
			neverbleeds = 1;
		}
		
		Super.PostBeginPlay(); // KEEP THIS HERE ELSE OTHER FUNCTIONS RELATED TO PostBeginPlay() BREAK :V
	}
	
	override void Tick()
	{
		// VOODOO Doll Protection
		if (!player || !player.mo || player.mo != self) { return Super.Tick(); }

		// Melee Ghost Range Reticles
		if (dvdsdebug_sceptrerangeghost)
		{
			let weapon = player.ReadyWeapon;
			let kickingweapon = QuickMeleeWeaponZSC(player.ReadyWeapon);
			string reticleactorname;
			int SceptreLevel = CallACS("GetSceptreLevel");
			int PlayerLevel = CallACS("StatCheck",0);

			int wRange = CallACS("GetSceptreRange",0);
			int wRange2 = CallACS("GetSceptreRange",2);
			int range1 = CallACS("GetSceptreRange",0) * 0.75;
			int range2 = CallACS("GetSceptreRange",0) * 0.5;
			int range3 = CallACS("GetSceptreRange",0) * 0.25;
			int wHeight = (player.mo.AttackZOffset + (self.Height/2));
			int wSpeed = 0;
			int SpawnX1 = cos(-pitch) * range1;
			int SpawnX2 = cos(-pitch) * range2;
			int SpawnX3 = cos(-pitch) * range3;
			int SpawnX4 = cos(-pitch) * wRange;
			int SpawnXA = cos(-pitch) * wRange2;
			int SpawnY = 0;
			int SpawnZ1 = wheight + (sin(-pitch) * range1);
			int SpawnZ2 = wheight + (sin(-pitch) * range2);
			int SpawnZ3 = wheight + (sin(-pitch) * range3);
			int SpawnZ4 = wheight + (sin(-pitch) * wRange);
			int SpawnZA = wheight + (sin(-pitch) * wRange2);
			int SXVel = cos(-pitch) * wSpeed;
			int SYVel = 0;
			int SZVel = sin(-pitch) * wSpeed;

			if (kickingweapon)
			{
				reticleactorname = "KickPuff-Silent";
				int kRange = CallACS("GetMeleeRange",4);
				int SpawnKickX = cos(-pitch) * kRange;
				int SpawnKickZ = wheight + (sin(-pitch) * kRange);
				//Console.Printf("Kicking Weapon: %d", kRange);

				if (CountInv("SpreaderAura2") > 0)
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch + 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch - 7.5
					A_SetPitch(pitch-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 0, Pitch + 0
					A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch - 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch + 7.5
					A_SetPitch(pitch+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Reset
					A_SetAngle(angle+spread1angle2);
				}
				else
				if (CountInv("SpreaderAura1") > 0)
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
				}
				else
				{
					A_SpawnItemEx(reticleactorname,cos(-pitch) * kRange,SpawnY,wheight + (sin(-pitch) * kRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
				}
			}

			if (weapon is "FistDeggaris" || weapon is "FistIllucia" || weapon is "FistFlora")
			{
				reticleactorname = "PunchPuff-Silent";

				int pRange = CallACS("GetMeleeRange",0);
				int puRange = CallACS("GetMeleeRange",1);

				int SpawnPunchX = cos(-pitch) * pRange;
				int SpawnPunchZ = wheight + (sin(-pitch) * pRange);
				//Console.Printf("Punching Weapon: %d", pRange);
				if (CountInv("SpreaderAura2") > 0)
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch + 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch - 7.5
					A_SetPitch(pitch-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 0, Pitch + 0
					A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch - 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch + 7.5
					A_SetPitch(pitch+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Reset
					A_SetAngle(angle+spread1angle2);
				}
				else
				if (CountInv("SpreaderAura1") > 0)
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
				}
				else
				{
					A_SpawnItemEx(reticleactorname,cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
				}
				
				SpawnPunchX = cos(-pitch) * puRange;
				SpawnPunchZ = wheight + (sin(-pitch) * puRange);
				//Console.Printf("Punching Weapon [Alt]: %d", puRange);
				reticleactorname = "AltPunchPuff-Silent";

				if (CountInv("SpreaderAura2") > 0)
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch + 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch - 7.5
					A_SetPitch(pitch-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 0, Pitch + 0
					A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch - 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch + 7.5
					A_SetPitch(pitch+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Reset
					A_SetAngle(angle+spread1angle2);
				}
				else
				if (CountInv("SpreaderAura1") > 0)
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
				}
				else
				{
					A_SpawnItemEx(reticleactorname,cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
				}
			}

			if (weapon is "SauronGauntlets" || weapon is "SauronGauntletsIllucia" || weapon is "SauronGauntletsFlora")
			{
				reticleactorname = "PunchPuff-Silent";
				int pRange = CallACS("GetMeleeRange",2);
				int puRange = CallACS("GetMeleeRange",3);

				int SpawnPunchX = cos(-pitch) * pRange;
				int SpawnPunchZ = wheight + (sin(-pitch) * pRange);
				//Console.Printf("Punching Weapon: %d", pRange);
				if (CountInv("SpreaderAura2") > 0)
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch + 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch - 7.5
					A_SetPitch(pitch-spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 0, Pitch + 0
					A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch - 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch + 7.5
					A_SetPitch(pitch+spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Reset
					A_SetAngle(angle+spread1angle2);
				}
				else
				if (CountInv("SpreaderAura1") > 0)
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
				}
				else
				{
					A_SpawnItemEx(reticleactorname, cos(-pitch) * pRange,SpawnY,wheight + (sin(-pitch) * pRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
				}
				
				reticleactorname = "AltPunchPuff-Silent";
				SpawnPunchX = cos(-pitch) * puRange;
				SpawnPunchZ = wheight + (sin(-pitch) * puRange);
				//Console.Printf("Punching Weapon [Alt]: %d", puRange);
				if (CountInv("SpreaderAura2") > 0)
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch + 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch - 7.5
					A_SetPitch(pitch-spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 0, Pitch + 0
					A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch - 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch + 7.5
					A_SetPitch(pitch+spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Reset
					A_SetAngle(angle+spread1angle2);
				}
				else
				if (CountInv("SpreaderAura1") > 0)
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
				}
				else
				{
					A_SpawnItemEx(reticleactorname, cos(-pitch) * puRange,SpawnY,wheight + (sin(-pitch) * puRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
				}
			}

			if (weapon is "Chainsaw2" || weapon is "DoubleBladedChainsaw")
			{
				reticleactorname = "ChainsawPuff-Silent";
				int cRange = CallACS("GetMeleeRange",5);
				if (weapon is "DoubleBladedChainsaw") { cRange = CallACS("GetMeleeRange",6); reticleactorname = "ChainsawPuff2-Silent"; }
				int SpawnSawX = cos(-pitch) * cRange;
				int SpawnSawZ = wheight + (sin(-pitch) * cRange);
				//Console.Printf("Chainsaw Weapon: %d", cRange);
				if (CountInv("SpreaderAura2") > 0)
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch + 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 7.5, Pitch - 7.5
					A_SetPitch(pitch-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 0, Pitch + 0
					A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch - 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 7.5, Pitch + 7.5
					A_SetPitch(pitch+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Reset
					A_SetAngle(angle+spread1angle2);
				}
				else
				if (CountInv("SpreaderAura1") > 0)
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
				}
				else
				{
					A_SpawnItemEx(reticleactorname,cos(-pitch) * cRange,SpawnY,wheight + (sin(-pitch) * cRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
				}
			}

			if (weapon is "SceptreOfEmpyrea")
			{
				reticleactorname = "SceptrePuff-Silent2";

				//Console.Printf("Sceptre: %d", wRange);
				if (CountInv("SpreaderAura2") > 0)
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SetAngle(angle-90);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle-67.5);
					// Angle + 7.5, Pitch + 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch+spread2pitch2);
					A_SetAngle(angle-90);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle-67.5);
					// Angle + 7.5, Pitch - 7.5
					A_SetPitch(pitch-spread1angle2);
					A_SetAngle(angle-90);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle-67.5);
					// Angle + 0, Pitch + 0
					A_SetPitch(pitch+spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SetAngle(angle-90);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle-67.5);
					// Angle - 7.5, Pitch - 7.5
					A_SetAngle(angle-spread2angle2); A_SetPitch(pitch-spread2pitch2);
					A_SetAngle(angle-90);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle-67.5);
					// Angle - 7.5, Pitch + 7.5
					A_SetPitch(pitch+spread1angle2);
					A_SetAngle(angle-90);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle-67.5);
					// Angle - 15, Pitch + 0
					A_SetPitch(pitch-spread2pitch2); A_SetAngle(angle-spread2angle2);
					A_SetAngle(angle-90);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle-67.5);
					// Reset
					A_SetAngle(angle+spread1angle2);
				}
				else
				if (CountInv("SpreaderAura1") > 0)
				{
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
					A_SetAngle(angle-90);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle-67.5);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SetAngle(angle-90);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle-67.5);
					// Angle - 15, Pitch + 0
					A_SetAngle(angle-spread1angle2);
					A_SetAngle(angle-90);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle-67.5);
					// Angle + 15, Pitch + 0
					A_SetAngle(angle+spread1angle2);
				}
				else
				{
					A_SetAngle(angle-90);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle+22.5); 
					A_SpawnItemEx(reticleactorname,cos(-pitch) * wRange,SpawnY,wheight + (sin(-pitch) * wRange),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					if (PlayerLevel >= 8 && SceptreLevel >= 2) A_SpawnItemEx("SceptrePuff-Silent",cos(-pitch) * wRange2,SpawnY,wheight + (sin(-pitch) * wRange2),SXVel,SYVel,SZVel,0,SXF_NOCHECKPOSITION);
					A_SetAngle(angle-67.5);
				}
			}
		}
		
		if (dvds_dashdoesdmg)
		{
			int timermod = 3;
			int timer = level.time % timermod;
			if (CountInv("PlayerDashing") && timer == 0)
			{
				int PlayerLevel = CallACS("StatCheck",0);
				int PlayerAGL = CallACS("StatCheck",3);
				int PlayerSTR = CallACS("StatCheck",7);
				int MartialArtsMastery = CallACS("MiscVarCheckDECORATE",10035);
				int MartialArtsMasteryEX = CallACS("MiscVarCheckDECORATE",10036);
				int StamUpPerkLevel = CallACS("MiscVarCheckDECORATE",10005);
				int StamUpEXPerkLevel = CallACS("MiscVarCheckDECORATE",10006);
				int CharacterClass = CallACS("CheckCharacterClass");
				double DashDmg = (random(3,4) + (PlayerAGL / 3) + (PlayerSTR / 12) + (PlayerLevel / 6));
				DashDmg *= (1.0 + (StamUpPerkLevel * 0.1) + (StamUpEXPerkLevel * 0.25));
				DashDmg *= (1.0 + (MartialArtsMastery * 0.2) + (MartialArtsMasteryEX * 0.5));
				double DashRad = (radius * 2.25) + random(-3,3);
				DashRad *= (1.0 + (StamUpPerkLevel * 0.05) + (StamUpEXPerkLevel * 0.125));
				DashRad *= (1.0 + (MartialArtsMastery * 0.1) + (MartialArtsMasteryEX * 0.25));
				if (CharacterClass == 2 && CountInv("SafeTeaShoes")) { DashDmg *= 2.5; DashRad *= 1.25; }
				if (CallACS("GetBuffTimer",23) > 0) { DashDmg *= 2.5; DashRad *= 1.25; }
				double DashFullRad = (DashRad * 3) / 4;

				A_Explode(DashDmg,DashRad,XF_NOTMISSILE,0,DashFullRad,0,0,"","Dashing");
				if (dvdsdebug_showdashinformation) Console.Printf("DashDmg: %4f, DashRad: %4f [DashFullRad: %4f] (time: %d / %d)", DashDmg, DashRad, DashFullRad, timer, level.time);
			}
		}
		
		
		
		
		
		
		
		
		
		
		super.Tick(); // KEEP THIS HERE ELSE OTHER FUNCTIONS RELATED TO THIS BREAK :V
	}

	
	override bool CanCollideWith(Actor other, bool passive)
	{
		// Non-passive means the one moving into the other is performing the checks.
		if (!passive)
		{
			// Pass through different species of select types.
			if (other.bFRIENDLY == 1)
				return false;
		}
		// We don't really care about others making the check.
		return true;
	}

	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		int predamage = damage;
		int CharacterClass = CallACS("CheckCharacterClass");
		int criticalhit;
		int CritChance, CritRoll;
		AetheriusMonsterZSC DVDSActor;
		AetheriusEffectProjectile ailmentproj;
		SingleDamageRipper singleripproj;
		SingleDamageFastRipper singlefastripproj;
		if (source) DVDSActor = AetheriusMonsterZSC(source);
		if (inflictor) 
		{
			ailmentproj = AetheriusEffectProjectile(inflictor);
			singleripproj = SingleDamageRipper(inflictor);
			singlefastripproj = SingleDamageFastRipper(inflictor);
		}
		if (neverbleeds == 0)
		{
			bNOBLOOD = 0;
			bNOBLOODDECALS = 0;
		}
		string infl, sour, vict;
		vict = GetClassName();
		if (inflictor == null) infl = "NONE";
											else infl = inflictor.GetClassName();
		if (source == null) sour = "NONE";
									 else sour = source.GetClassName();

		int bosstype = 0;
		if (source)
		{
			if (sour == "NetherDarkImp" || sour == "Abaddon" || sour == "Daedabus" || sour == "Diabloist" ||
					sour == "DSHellKnight" || sour == "DSHellKnight64" || sour == "DSBaronofHell" || sour == "DSBaronofHell64" || 
					sour == "HellWarrior" || sour == "Belphegor" || sour == "BruiserDemon" || sour == "ArchonofHell" || 
					sour == "Cybruiser" || sour == "PyroDemon" || sour == "FlyingBalrog" || sour == "Hierophant" || 
					sour == "HadesElemental" || sour == "HadesOverlord" || 
					sour == "DSCyberdemon" || sour == "DSCyberdemon64" || sour == "Annihilator" || sour == "DSSpiderMastermind" || sour == "Demolisher" ||
					sour == "DeathKnight" || sour == "ShadowBeast" || sour == "MaulotaurNew" || sour == "HellGuard" || 
					sour == "IronlichNew" || sour == "IceLich" || sour == "GoldLich" || sour == "BloodLich" ||
					sour == "Bormereth" || sour == "FireDemonQueen" || sour == "VampireDVDS" || sour == "EtherealChaosSerpentNew" ||
					sour == "InquisitorNew" || sour == "DarkInquisitor" ||
					sour == "TNTSpider")
			{
				bosstype = 1; // Miniboss Level
			}
			else
			if (sour == "AvatarNew" || sour == "DSparilMountedNew" || 
					sour == "ClericBossNew" || sour == "MageBossNew" || sour == "FighterBossNew" || 
					sour == "ProgrammerNew" || sour == "StrifeBishopNew" || sour == "OracleNew" || 
					sour == "Macil1New" || sour == "Macil2New" || sour == "LoremasterNew" ||
					sour == "SourceGuardian" || sour == "DSMotherDemon64" ||
					sour == "AlienSpectre1New" || sour == "AlienSpectre2New" || sour == "AlienSpectre3New" || 
					sour == "AlienSpectre4New" || sour == "AlienSpectre5New")
			{
				bosstype = 2; // Moderate Boss Level
			}
			else
			if (sour == "DSparilUnmountedNew" || sour == "KoraxNew" || sour == "Zakachi" || 
					sour == "Benellus1DS" || sour == "Benellus2DS" || sour == "Benellus3DS" ||
					sour == "ThamuzNew" || sour == "TchernobogNew" ||
					sour == "SauronEyeWeak" || sour == "SauronEyeStrong1" || sour == "SauronEyeStrong2")
			{
				bosstype = 3; // Major/Named Threat [Lv 1]
			}
			else
			if (sour == "EntityBossNew" || sour == "EntitySecondNew" || sour == "EntityAscended" || 
					sour == "PennywiseBoss" || sour == "TheSource" || sour == "Magmantis" || 
					sour == "AdolfHitlerDS" || sour == "SauronEyeMain")
			{
				bosstype = 4; // Extreme/Named Threat [Lv 2]
			}
			else
			if (sour == "Sauravatar")
			{
				bosstype = 5; // Elite/Named Threat [Lv 3]
			}
			else
			if (source.bBOSS)
			{
				bosstype = 1; // Miniboss Level
			}
		}

		// VOODOO Doll Protection
		if (!player || !player.mo || player.mo != self) 
		{ 
			//*********************************************************************
			return super.DamageMobj(inflictor, source, damage, mod, flags, angle); 
			//*********************************************************************
			if (dvdsdebug_playerdmgdisplays > 0) Console.Printf("    (\cz[STEP -1] player-damagemobj input\c-: \cyVOODOO DOLL\c-)", damage);
		}

		// Makes the HUD show "Missed!" and play a sound if you evade an attack. V:
		int EvadedTheAttack = 0;
		int GhostDashing = 0;
		if (self.health <= 0 || bINVULNERABLE || player.cheats & CF_GODMODE2 || player.cheats & CF_GODMODE || CountInv("InvulnerabilitySpell",AAPTR_PLAYER1) > 0 || CountInv("IsInvulnerable",AAPTR_PLAYER1) > 0 || CountInv("MenuInvulnerability",AAPTR_PLAYER1) > 0 || (CountInv("IronFeetNoPoison",AAPTR_PLAYER1) > 0 && (mod == "PoisonElemental" || mod == "Poison")) )
		{
			damage = 0;
			if (dvdsdebug_playerdmgdisplays > 0) Console.Printf("    (\cz[STEP 0] player-damagemobj input [PLAYER IS INVULNERABLE (\cyDMG: %d)\cz]\c-)", damage);
		}
		else
		{
			if (mod != "Falling" || mod != "Drowning")
			{
				if (CountInv("EvadeAnAttack") > 0)
				{
					A_Playsound("DraQue/miss");
					A_Playsound("DraQue/miss");
					A_GiveInventory("Missed",1);
					damage = 0;
					EvadedTheAttack = 1;
				}
				if (CountInv("PlayerDashing") > 0)
				{
					damage = 0;
					GhostDashing = 1;
				}
			}
		}
		if (dvdsdebug_playerdmgdisplays > 0) 
		{
				if (EvadedTheAttack) Console.Printf("    (\cz[STEP 1] player-damagemobj input\c-: \cyATTACKED WAS EVADED/AVOIDED\c-)", damage);
			else if (GhostDashing) Console.Printf("    (\cz[STEP 1] player-damagemobj input\c-: \cyDASHED TO AVOID DAMAGE\c-)", damage);
												else Console.Printf("    (\cz[STEP 1] player-damagemobj input [Base Dmg]\c-: \cydmg = %d\c-)", damage);
		}

		double RailRandom = frandompick(0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,
																		0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,
																		0.50,0.50,0.50,0.50,0.50,
																		0.75,0.75,0.75,
																		0.90,0.90,
																		0.9875);

		double MonsterLevelIgnoreFactor;
		if (DVDSActor) MonsterLevelIgnoreFactor = (DVDSActor.user_monsterlevel * 0.00022223);
		int LegendaryIgnoreDefenseFactor = 0.5 - (CallACS("MiscVarCheckDECORATE",10057) * 0.05) - (CallACS("MiscVarCheckDECORATE",10058) * 0.125);

		//*************************************
		//**Player Taking Crits from Monsters**
		//*************************************
		int meleeattack = 0;
		if (DVDSActor && dvds_monstercrits != 0) 
		{
			if (mod == 'Melee' || mod == 'Trample' || mod == 'Stomp' || mod == 'Fist' || mod == 'Kick' || mod == 'Chainsaw' || mod == 'Gauntlets' || mod == 'Sceptre') meleeattack = 1;
			string ActorClass = DVDSActor.GetClassName();
			string AilmentProjClass;
			if (ailmentproj) AilmentProjClass = ailmentproj.GetClassName();
			//*****************************************************
			//**Allows Monsters to deal crits [4/256 base chance]**
			//*****************************************************
			// Base Chances
			CritChance = 8 + (DVDSActor.user_monsterlevel / 11.25); // 8 (+ 8 every 90 levels)
			if (DVDSActor && DVDSActor.bBOSS) CritChance = (CritChance * 3) / 2; // Boss Flag Check
			if (DVDSActor && DVDSActor.bJUSTHIT) CritChance *= 2; // JustHit Flag Check
			if (DVDSActor && DVDSActor.user_charmed > 0) CritChance = (CritChance * 3) / 2; // Charm Flag Check
			if (DVDSActor && DVDSActor.user_legendaryevolved) CritChance *= 4; // Legendaries have double crit rate
			if (DVDSActor && DVDSActor.health <= DVDSActor.user_HPBuffRange) CritChance = (CritChance * 6) / 4;
	
			// Actor Only Checks
			if (ActorClass == "DSHelperDog") CritChance *= 3; // Helper Dogs get triple crit rate
			if (ActorClass == "DSPainElemental" || ActorClass == "FPainElemental" || ActorClass == "DSPainElemental64" || ActorClass == "DSLostSoul" || ActorClass == "DSLostSoul2" || ActorClass == "ForgottenOne" || ActorClass == "DSLostSoul64" || ActorClass == "DSLostSoul642" ||
					ActorClass == "FLostSoul1" || ActorClass == "FLostSoul2") CritChance *= 4; // Pain-Elementals/Lost Souls are Crit-happy nuisances
			if (ActorClass == "DSRevenant" || ActorClass == "FRevenant" || ActorClass == "DeathIncarnate" || ActorClass == "FDeathIncarnate") CritChance = (CritChance * 6) / 4; // Revenants/Death Incarnates have 50% more crit
			if (ActorClass == "ChainsawZombieNew") CritChance = (CritChance * 10) / 4; // Chainsaw Zombies have 150% more crit
			if (ActorClass == "NightmareNew" || ActorClass == "SirenNightmareNew") CritChance *= 4; // Nightmares are good at crits too
			if (ActorClass == "EvilDeadHandNew" || ActorClass == "BabyClownNew" || 
					ActorClass == "BabyClown2New" || ActorClass == "BouncingClownNew") CritChance *= 4;
			// Ally Specfic
			if (ActorClass == "RebelNew" || ActorClass == "Rebel1New" || ActorClass == "Rebel2New" || ActorClass == "Rebel3New" || 
					ActorClass == "Rebel4New" || ActorClass == "Rebel5New" || ActorClass == "Rebel6New") 
					CritChance = (CritChance * random(7,9)) / 4; // Strife Rebles have +75-125% more crit

			// Boss Only Checks
			if (ActorClass == "DragonNew" || ActorClass == "FDragon" || ActorClass == "HeresiarchNew" || ActorClass == "FHeresiarch" || 
					ActorClass == "DSparilMountedNew" || ActorClass == "ClericBossNew" || ActorClass == "FighterBossNew" || ActorClass == "MageBossNew" ||
					ActorClass == "ProgrammerNew" || ActorClass == "StrifeBishopNew" || ActorClass == "LoremasterNew" || ActorClass == "Macil1New" || ActorClass == "StrifMacil2NeweBishopNew") CritChance *= 4;
			if (ActorClass == "AlienSpectre1New" || ActorClass == "AlienSpectre2New" || ActorClass == "AlienSpectre3New" || ActorClass == "AlienSpectre4New" || ActorClass == "AlienSpectre5New" ||
					ActorClass == "AvatarNew" || ActorClass == "Benellus1DS" || ActorClass == "Benellus2DS" || ActorClass == "Benellus3DS" ||
					ActorClass == "TNTSpider" || ActorClass == "SourceGuardian" || ActorClass == "AdolfHitlerDS") CritChance *= 6;
			if (ActorClass == "DSparilUnmountedNew" || ActorClass == "KoraxNew" || ActorClass == "PennywiseBoss" ||
					ActorClass == "EntityBossNew" || ActorClass == "EntitySecondNew" || ActorClass == "EntityAscended" || ActorClass == "ThamuzNew" || ActorClass == "TchernobogNew" ||
					ActorClass == "Magmantis" || ActorClass == "Zakachi") CritChance *= 8;
	
			// Unique Checks
			if (meleeattack && (ActorClass == "WraithNew" || ActorClass == "WraithBuriedNew" || ActorClass == "FWraith")) 
					CritChance *= 4;

			if (meleeattack && (ActorClass == "Dragon" || ActorClass == "FDragon")) 
					CritChance *= 8;

			if (meleeattack && (ActorClass == "EttinNew" || ActorClass == "EttinCommander" || ActorClass == "Bormereth" ||
					ActorClass == "FEttinNew" || ActorClass == "FEttinCommander" || ActorClass == "FBormereth")) 
					CritChance = (CritChance * 9) / 4; // Ettins have 125% more crit for Melee

			if (meleeattack && (ActorClass == "StalkerNew" || ActorClass == "StalkerLeaderNew" || ActorClass == "IceStalker" || ActorClass == "IceStalkerLeader" || 
					ActorClass == "FStalker" || ActorClass == "FStalkerLeader")) 
					CritChance *= 2; // Hexen Stalkers have 2x more crit for Melee

			if (meleeattack && (ActorClass == "CentaurNew" || ActorClass == "SlaughtaurNew" || 
					ActorClass == "FCentaur" || ActorClass == "FSlaughtaur")) 
					CritChance *= 2; // Centaurs have 2x more crit for Melee

			if (meleeattack && (ActorClass == "DSRevenant" || ActorClass == "FRevenant" || ActorClass == "DeathIncarnate" || ActorClass == "FDeathIncarnate")) 
					CritChance = (CritChance * 6) / 4; // Revenants/Death Incarnates have another +50% more crit when using melee

			if (meleeattack && (ActorClass == "KnightNew" || ActorClass == "FKnight" || ActorClass == "KnightGhostNew" || ActorClass == "FKnightGhost")) 
					CritChance = (CritChance * 6) / 4; // Revenants/Death Incarnates have another +50% more crit when using melee

			if (meleeattack && (ActorClass == "ReaverNew")) 
					CritChance *= 3; // Reavers have 3x more crit for melee

			if (meleeattack && (ActorClass == "OStalkerNew")) 
					CritChance = (CritChance * 6) / 4; // Strife Stalkers have 50% more crit for melee

			if (meleeattack && 
					(ActorClass == "DSCacodemon" || ActorClass == "DSCacodemon64" || ActorClass == "FCacodemon" ||
					ActorClass == "Cacolantern" || ActorClass == "FCacolantern" ||
					ActorClass == "Abaddon" || ActorClass == "FAbaddon")) 
					CritChance *= 2; // Cacos have 2x Crit for Melee

			if (meleeattack && 
					(ActorClass == "HadesElemental" || ActorClass == "FHadesElemental" ||
					ActorClass == "HadesOverlord" || ActorClass == "FHadesOverlord")) 
					CritChance *= 3; // Hades Scions have 3x Crit for Melee

			if (meleeattack && (ActorClass == "SatyrNew")) 
					CritChance *= 8; // Satyrs are very likely to crit too
					
			if (meleeattack && 
					(ActorClass == "DSDemon" || ActorClass == "DSDemon64" || 
					ActorClass == "DSSpectre" || ActorClass == "DSSpectre64" || 
					ActorClass == "BloodDemon" || ActorClass == "BloodSpectre" ||
					ActorClass == "BloodFiendNew" || ActorClass == "LurkerNew" ||
					ActorClass == "FDemon" || ActorClass == "FSpectre" || 
					ActorClass == "FBloodDemon" || ActorClass == "FBloodSpectre")) 
					CritChance = (CritChance * 6) / 4; // Pinkies have 50% more crit with Melee

			if (meleeattack && (ActorClass == "ClinkNew" || ActorClass == "FClink")) 
					CritChance = (CritChance * 6) / 4; // SabreClaws have 50% more crit with Melee

			if (meleeattack && 
					(ActorClass == "DSCyberdemon" || ActorClass == "DSCyberdemon64" || ActorClass == "Annihilator" || 
					ActorClass == "FCyberdemon" || ActorClass == "FAnnihilator")) 
					CritChance *= 8; // Cyberdemon Stomps/Melee have 8x chance to crit.
					
			if (meleeattack && 
					(ActorClass == "DSHellKnight" || ActorClass == "DSHellKnight64" || ActorClass == "FHellKnight" || 
					ActorClass == "HellWarrior" || ActorClass == "FHellWarrior" || 
					ActorClass == "DSBaronofHell" || ActorClass == "DSBaronofHell64" || ActorClass == "FBaronofHell" || 
					ActorClass == "Belphegor" || ActorClass == "FBelphegor" || 
					ActorClass == "BruiserDemon" || ActorClass == "FBruiserDemon" || 
					ActorClass == "CyBruiser" || ActorClass == "FCyBruiser" || 
					ActorClass == "ArchonofHell" || ActorClass == "FArchonofHell" ||
					ActorClass == "PyroDemon" || ActorClass == "FPyroDemon" ||
					ActorClass == "WeakenedFlyingBalrog" || ActorClass == "FlyingBalrog" || ActorClass == "FFlyingBalrog")) 
					CritChance *= 4; // Hell Nobles have 4x chance to Crit w/ melee attacks

			// Misc
			if (mod == 'BFG' || mod == 'BFGSpray') // BFG related attacks have signficantly LESS chance to crit, but still always have at least a 1/512 chance :P
			{ 
				CritChance /= 16;
				if (CritChance < 1) CritChance = 1;
			}
			if (infl == "DemonFire" || infl == "DemonFireCrisis" || 
					infl == "MiniFirePuff" || infl == "MiniFirePuffCrisis" || 
					infl == "DogFireNew" || infl == "DogFireNewCrisis" ||
					infl == "FireBreath" || infl == "FireBreathCrisis" ||
					infl == "SGuardianFlameBreath" || infl == "SGuardianFlameBreathCrisis" ||
					infl == "Demon5Jet" || infl == "Demon5JetCrisis")
			{
				CritChance *= 4;
			}
			if (infl == "SuicideBomb" || infl == "SuicideBomber" || infl == "HSBoom" || infl == "HadesSphere" || infl == "HSOverlord") CritChance = 0; // Kamikaze Monsters Cannot Crit

			// Chance to RESIST a crit.
			double CritResistChance = 1.25;
			int CritResistDivisor;
			// Check Armor
			if (CharacterClass == 0 || CharacterClass == 1)
			{
				CritResistDivisor = 8;
				if (CountInv("DSGreenArmorClass") > 0) 		CritResistChance += (35.00 / CritResistDivisor);
				if (CountInv("DSBlueArmorClass") > 0) 		CritResistChance += (52.50 / CritResistDivisor);
				if (CountInv("DSStoneArmorClass1") > 0)		CritResistChance += (70.80 / CritResistDivisor);
				if (CountInv("DSDiamondArmorClass1") > 0)	CritResistChance += (93.75 / CritResistDivisor);
				if (CountInv("DSStoneArmorClass2") > 0)		CritResistChance += (87.50 / CritResistDivisor);
				if (CountInv("DSDiamondArmorClass2") > 0)	CritResistChance += (98.75 / CritResistDivisor);
			}
			if (CharacterClass == 2)
			{
				CritResistDivisor = 8;
				if (CountInv("SafeTeaShoes") > 0) 				CritResistChance += (3.00 / CritResistDivisor);
				if (CountInv("PearlyCorset") > 0) 				CritResistChance += (7.00 / CritResistDivisor);
				if (CountInv("WaterFlyingDress") > 0)			CritResistChance += (8.00 / CritResistDivisor);
				if (CountInv("EvenstarNecklace") > 0)			CritResistChance += (2.00 / CritResistDivisor);
				if (CountInv("CloakofEvasion") > 0)				CritResistChance += (4.00 / CritResistDivisor);
				if (CountInv("AnubisCufflinks") > 0)			CritResistChance += (5.00 / CritResistDivisor);
				if (CountInv("KissaBra") > 0)							CritResistChance += (6.00 / CritResistDivisor);
				if (CountInv("DivineShield") > 0)					CritResistChance += (16.00 / CritResistDivisor);
				if (CountInv("BalrogRing") > 0)						CritResistChance += (2.00 / CritResistDivisor);
				if (CountInv("DoveRibbon") > 0)						CritResistChance += (9.00 / CritResistDivisor);
				if (CountInv("FalconKnifeEarrings") > 0)	CritResistChance += (5.00 / CritResistDivisor);
			}
			// Check Stats
			double temp1 = 0.0;
			temp1 += (CallACS("StatCheck",0) * 0.03125); // LVL
			temp1 += (CallACS("StatCheck",3) * 0.01875); // AGL
			temp1 += (CallACS("StatCheck",4) * 0.009375); // DEF
			temp1 += (CallACS("StatCheck",5) * 0.175); // DFT
			temp1 += (CallACS("StatCheck",6) * 0.003125); // SOR
			temp1 += (CallACS("StatCheck",7) * 0.0125); // STR
			temp1 += (CallACS("StatCheck",8) * 0.003125); // THE
			temp1 /= 4;
			CritResistChance += temp1;
			if (CallACS("GetBuffTimer",1) > 0) CritResistChance += 2.5; // Invisiblity
			if (CallACS("GetBuffTimer",7) > 0) CritResistChance += 12.5; // Divine Avatar
			if (CallACS("GetBuffTimer",11) > 0) CritResistChance += 5.0; // Buff
			if (CallACS("GetBuffTimer",12) > 0) CritResistChance += 1.25; // Acceleratle
			if (CallACS("GetBuffTimer",14) > 0) CritResistChance -= 2.5; // Sap
			if (CallACS("GetBuffTimer",15) > 0) CritResistChance -= 0.625; // Deceleratle
			if (CallACS("GetBuffTimer",129) > 0) CritResistChance += 25.0; // GoE
			if (CallACS("GetBuffTimer",20) > 0) CritResistChance = 0.0; // Sleep

			// Player Has "Item"
			if (CountInv("HWShieldDefense")) CritResistChance += ((100.0 - CritResistChance) * 0.25);
			if (CountInv("ImpWarlordShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.25);
			if (CountInv("ImpWarlordShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.45);
			if (CountInv("DKnightShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.375);
			if (CountInv("DKnightShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.475);
			if (CountInv("AcolyteShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.125);
			if (CountInv("AcolyteShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.35);
			if (CountInv("CentaurShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.333);
			if (CountInv("CentaurShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.48666);
			if (CountInv("SlaughtaurShieldDefend")) CritResistChance += ((100.0 - CritResistChance) * 0.41667);
			if (CountInv("SlaughtaurShieldDefendExtra")) CritResistChance += ((100.0 - CritResistChance) * 0.49333);
			if (CountInv("MaulotaurChargeDefense")) CritResistChance += ((100.0 - CritResistChance) * 0.375);
			if (CountInv("HeresiarchShieldDefense")) CritResistChance += ((100.0 - CritResistChance) * 0.4375);
			if (CountInv("HightmarePhaseOutDefense")) CritResistChance += ((100.0 - CritResistChance) * 0.46875);
			String nm = "ThamuzApocalypseDefendMode"; MiscCheck = nm; if (CountInv(MiscCheck)) CritResistChance += ((100.0 - CritResistChance) * 0.4);

			// Ripper Detection
			if (infl == "RagingSpirit" && random(1,6) != 1) CritResistChance = 200.0;
			if (inflictor && inflictor.bRIPPER) { if (!singleripproj && !singlefastripproj && random(1,6) != 1) CritResistChance = 200.0; }

			double CritResistRoll = frandom(0.1,100.0);
			if (criticalhit && CritResistRoll <= CritResistChance) 
			{
				criticalhit = 0;
				if (dvdsdebug_playerdmgdisplays > 0 && dvds_monstercrits != 0) Console.Printf("    (\cz[STEP 1a] Monster Crit Rate\c-: \cxRESISTED\c-, \cbCritResist: (%8f) / %8f\c-)", CritResistRoll, CritResistChance);
			}
				
			// Final Crit Roll
			CritRoll = random(1,512);
			if (CritRoll <= CritChance && DVDSActor.health > 0 && !(level.frozen || globalfreeze) && dvds_monstercrits != 0) criticalhit = 1;
			// Alter EffectProjectile Chances
			if (ailmentproj && criticalhit)
			{
				ailmentproj.user_ailmentmaxchance /= 2; // Most EffectProjectiles get their affliction chances doubled when critting
			}
			if (dvdsdebug_playerdmgdisplays > 0 && dvds_monstercrits != 0) Console.Printf("    (\cz[STEP 1a] Monster Crit Rate\c-: %d / 512 (%d) \c-, \cbCritResist: (%8f) / %8f\c-, \cyActorClass: = %s\c-)", CritRoll, CritChance, CritResistRoll, CritResistChance, ActorClass);
		}
		double dmgmulti = 2.0 + (0.01 * random(-10,10));

		int defense;
		// Defense Calculation
		int prefriendlydmg = damage;
		if (damage > 0)
		{
			if (DVDSActor)
			{
				if (DVDSActor.bFRIENDLY)
				{
					damage /= 4;
					if (DVDSActor.user_summoned > 0) damage /= 4;
					if (DVDSActor.user_charmed > 0) damage /= 4;
					if (damage < 1) damage = 1;
					if (dvdsdebug_playerdmgdisplays > 0 && damage > 0) Console.Printf("    (\cz[STEP 2] player-damagemobj input [Hit By Friendly]\c-: \cypredmg\c- / \cynewdmg\c- = \cy%d\c- / \cy%d\c-)", prefriendlydmg, damage);
				}
				else
				{
					if (dvdsdebug_playerdmgdisplays > 0 && damage > 0) Console.Printf("    (\cz[STEP 2] player-damagemobj input [Hit By Defined Enemy]\c-: \caSKIPPED\c-, \cydmg = %d\c-)", damage);
				}
			}
			else
			{
				if (dvdsdebug_playerdmgdisplays > 0 && damage > 0) Console.Printf("    (\cz[STEP 2] player-damagemobj input [Hit By Undefined Enemy]\c-: \caSKIPPED\c-, \cydmg = %d\c-)", damage);
			}

			int olddmg = damage;
			int basedef = CallACS("StatCheck",4);
			defense = basedef * (5 + (CallACS("MiscVarCheckDECORATE",10001) * 1 / 2) + ((CallACS("MiscVarCheckDECORATE",10002) * 5 / 4))) / 50;

			int armordef = 0;
			if (CountInv("DSGreenArmorClass") > 0) armordef = 1;
			if (CountInv("DSBlueArmorClass") > 0) armordef = 2;
			if (CountInv("DSStoneArmorClass1") > 0) armordef = 2;
			if (CountInv("DSDiamondArmorClass1") > 0) armordef = 3;
			if (CountInv("DSStoneArmorClass2") > 0) armordef = 3;
			if (CountInv("DSDiamondArmorClass2") > 0) armordef = 4;
			if (armordef > 0)
			{
				armordef = armordef * (25 + CallACS("MiscVarCheckDECORATE",10001) + (CallACS("MiscVarCheckDECORATE",10002) * 5 / 4)) / 25;
				defense += ((armordef * 5) / 4);
			}

			// Defense-Stat (Partial) Ignoring Checks
			if (inflictor == null && source == null)
			{
				if (mod == 'Slime' || mod == 'Crush') defense *= 0.1; // Total Defense is only 10% as effective for damagefloors/slime/crushing sectors with no source/inflictor.
				if (gameinfo.gametype & GAME_Raven)
				{
					if (mod == 'Fire' || mod == 'Magma') 
					{
						defense *= 0.1;
						damage = damage * frandom(1.5,2.5);
					}
				}
			}
			if (infl == "DBTRailPuff") 
			{
				defense *= (1.0 - RailRandom);
			}
			if (mod == 'Drowning') 
			{
				defense = 0;
			}
			if (infl == "SuicideBomber" || infl == "SuicideBomb" || infl == "HSBoom" || infl == "HadesSphere" || infl == "HSOverlord") 
			{
				defense *= 0.334;
			}
			if (infl == "DemonFire" || infl == "DemonFireCrisis" || 
					infl == "MiniFirePuff" || infl == "MiniFirePuffCrisis" || 
					infl == "DogFireNew" || infl == "DogFireNewCrisis" ||
					infl == "FireBreath" || infl == "FireBreathCrisis" ||
					infl == "SGuardianFlameBreath" || infl == "SGuardianFlameBreathCrisis" ||
					infl == "Demon5Jet" || infl == "Demon5JetCrisis")
			{
				defense *= 0.25;
			}
			if (DVDSActor && DVDSActor.user_legendaryevolved) 
			{
				defense *= 0.5;
			}
			//**************************
			//**Special Boss detection**
			//**************************
			if (bosstype == 1) defense *= (1.0 - frandompick(0.125,0.25));
			if (bosstype == 2) defense *= (1.0 - frandompick(0.25,0.375,0.50));
			if (bosstype == 3) defense *= (1.0 - frandompick(0.50,0.625,0.75));
			if (bosstype == 4) defense *= (1.0 - frandompick(0.75,0.875,1.00));
			if (bosstype == 5) defense *= (1.0 - frandompick(0.875,1.00));

			// Level Check
			if (DVDSActor) defense *= (1.0 - MonsterLevelIgnoreFactor);

			// Critical Hits?
			if (criticalhit) 
			{
				damage *= dmgmulti;
				defense = 0;
			}

			damage -= defense;
			if (damage < 1)
			{
				if (random(1,256) < (248 - ((CallACS("MiscVarCheckDECORATE",10001) * 2) + (CallACS("MiscVarCheckDECORATE",10002) * 5))) ) damage = 1; else damage = 0;
			}

			if (dvdsdebug_playerdmgdisplays > 0 && damage > 0) 
			{
				if (criticalhit) Console.Printf("    (\cz[STEP 3] player-damagemobj input\c-: \cxCRIT! (multi: %8f)\c-, \cyolddmg = %d\c-, \cdbasedef = %d, \cdarmdef = %d\c-, \cddef = %d\c=, \cynewdmg = %d\c-, \cwdmgtype = %s\c-, \cdinflictor = %s\c-, \cnsource = %s\c-, \cvbosstype = %d\c-)", dmgmulti, olddmg, basedef, armordef, defense, damage, mod, infl, sour, bosstype);
										else Console.Printf("    (\cz[STEP 3] player-damagemobj input\c-: \cyolddmg = %d\c-, \cdbasedef = %d, \cdarmdef = %d\c-, \cddef = %d\c=, \cynewdmg = %d\c-, \cwdmgtype = %s\c-, \cdinflictor = %s\c-, \cnsource = %s\c-, \cvbosstype = %d\c-)", olddmg, basedef, armordef, defense, damage, mod, infl, sour, bosstype);
			}
		}

		// Tries to determine a factor of much of the total defense calculations to ignore in their "PlayerStatItem"
		if (damage > 0)
		{
			PlayerDefenseIgnoreFactor = 0.00;
			if (inflictor == null && source == null)
			{
				if (mod == 'Drowning') PlayerDefenseIgnoreFactor += (1.00 * (1.00 - PlayerDefenseIgnoreFactor));
				if (mod == 'Slime' || mod == 'Crush') PlayerDefenseIgnoreFactor += (0.90 * (1.00 - PlayerDefenseIgnoreFactor));
				if (gameinfo.gametype & GAME_Raven)
				{
					if (mod == 'Fire' || mod == 'Magma') PlayerDefenseIgnoreFactor += (0.90 * (1.00 - PlayerDefenseIgnoreFactor));
				}
			}
			else
			{
				// Plasma Ignores 1/4th of "normal" damagefactor
				if (mod == 'BFG' || mod == 'BFGSpray') 
				{ 
					PlayerDefenseIgnoreFactor += (frandom(0.45,0.55) * (1.00 - PlayerDefenseIgnoreFactor));
				}
				if (mod == 'Plasma') 
				{ 
					PlayerDefenseIgnoreFactor += (frandom(0.225,0.275) * (1.00 - PlayerDefenseIgnoreFactor));
				}
				if (infl == "DBTRailPuff") 
				{
					PlayerDefenseIgnoreFactor += (RailRandom * (1.00 - PlayerDefenseIgnoreFactor));
				}
				if (mod == 'Drowning') 
				{
					PlayerDefenseIgnoreFactor += (1.00 * (1.00 - PlayerDefenseIgnoreFactor));
				}
				if (infl == "SuicideBomber" || infl == "SuicideBomb" || infl == "HSBoom" || infl == "HadesSphere" || infl == "HSOverlord") 
				{
					PlayerDefenseIgnoreFactor += (0.6667 * (1.00 - PlayerDefenseIgnoreFactor));
				}
				if (infl == "DemonFire" || infl == "DemonFireCrisis" || 
						infl == "MiniFirePuff" || infl == "MiniFirePuffCrisis" || 
						infl == "DogFireNew" || infl == "DogFireNewCrisis" ||
						infl == "FireBreath" || infl == "FireBreathCrisis" ||
						infl == "SGuardianFlameBreath" || infl == "SGuardianFlameBreathCrisis" ||
						infl == "Demon5Jet" || infl == "Demon5JetCrisis")
				{
					PlayerDefenseIgnoreFactor += (0.75 * (1.00 - PlayerDefenseIgnoreFactor));
				}

				//**************************
				//**Special Boss detection**
				//**************************
				if (bosstype == 1) PlayerDefenseIgnoreFactor += (frandompick(0.125,0.25) * (1.00 - PlayerDefenseIgnoreFactor));
				if (bosstype == 2) PlayerDefenseIgnoreFactor += (frandompick(0.25,0.375,0.50) * (1.00 - PlayerDefenseIgnoreFactor));
				if (bosstype == 3) PlayerDefenseIgnoreFactor += (frandompick(0.50,0.625,0.75) * (1.00 - PlayerDefenseIgnoreFactor));
				if (bosstype == 4) PlayerDefenseIgnoreFactor += (frandompick(0.75,0.875,1.00) * (1.00 - PlayerDefenseIgnoreFactor));
				if (bosstype == 5) PlayerDefenseIgnoreFactor += (frandompick(0.875,1.00) * (1.00 - PlayerDefenseIgnoreFactor));
			}
			// Level Check
			if (DVDSActor) 
			{
				PlayerDefenseIgnoreFactor += ((DVDSActor.user_monsterlevel * 0.00022223) * (1.00 - PlayerDefenseIgnoreFactor));
			}

			LegendaryIgnoreDefenseFactor = 0.50 - (CallACS("MiscVarCheckDECORATE",10057) * 0.05) - (CallACS("MiscVarCheckDECORATE",10058) * 0.125);
			if (DVDSActor && DVDSActor.user_legendaryevolved) 
			{
				PlayerDefenseIgnoreFactor += (LegendaryIgnoreDefenseFactor * (1.00 - PlayerDefenseIgnoreFactor));
			}
			// Critical Hits?
			if (criticalhit) 
			{
				PlayerDefenseIgnoreFactor += (1.00 * (1.00 - PlayerDefenseIgnoreFactor));
			}
			if (PlayerDefenseIgnoreFactor <= 0.0) PlayerDefenseIgnoreFactor = 0.0;
			if (PlayerDefenseIgnoreFactor > 1.0) PlayerDefenseIgnoreFactor = 1.0;

			// Intended to ignore aspects of Flora's special armor or Marines' armor items [if any attacks will in the future]
			PlayerArmorIgnoreFactor = 0.00;
			if (criticalhit) PlayerArmorIgnoreFactor += (0.3334 * (1.00 - PlayerArmorIgnoreFactor));
			if (PlayerArmorIgnoreFactor <= 0.0) PlayerArmorIgnoreFactor = 0.0;
			if (PlayerArmorIgnoreFactor > 1.0) PlayerArmorIgnoreFactor = 1.0;

			PlayerArmorIgnoreFactorGeneral = 0.00;
			if (bosstype == 2 || bosstype == 3) PlayerArmorIgnoreFactorGeneral += (frandompick(0.0625,0.125,0.1875) * (1.00 - PlayerArmorIgnoreFactorGeneral));
			if (bosstype == 4 || bosstype == 5) PlayerArmorIgnoreFactorGeneral += (frandompick(0.1875,0.25,0.3125) * (1.00 - PlayerArmorIgnoreFactorGeneral));
			if (criticalhit) PlayerArmorIgnoreFactorGeneral += (0.3334 * (1.00 - PlayerArmorIgnoreFactorGeneral));

			if (PlayerArmorIgnoreFactorGeneral <= 0.0) PlayerArmorIgnoreFactorGeneral = 0.0;
			if (PlayerArmorIgnoreFactorGeneral > 1.0) PlayerArmorIgnoreFactorGeneral = 1.0;

			// Final Printouts for Defense/Armor Ignoring Stuff
			if (dvdsdebug_playerdmgdisplays > 0)
			{
				if (PlayerDefenseIgnoreFactor <= 0.00 && PlayerArmorIgnoreFactor <= 0.00 && PlayerArmorIgnoreFactorGeneral <= 0.00)
				{
					Console.Printf("    (\cz[STEP 4] player-damagemobj input\c-: \caSKIPPED\c-, \cydmg = %d\c-)", damage);
				}
				else
				{
					if (PlayerDefenseIgnoreFactor > 0.00) Console.Printf("    (\cz[STEP 4a] player-damagemobj input\c-: \caDamageIgnoreFactor = %8f\c-, \cydmg = %d\c- (Player Actor))", PlayerDefenseIgnoreFactor, damage);
					if (PlayerArmorIgnoreFactor > 0.00) Console.Printf("    (\cz[STEP 4b] player-damagemobj input\c-: \caArmorIgnoreFactor = %8f\c-, \cydmg = %d\c- (Player Actor))", PlayerArmorIgnoreFactor, damage);
					if (PlayerArmorIgnoreFactorGeneral > 0.00) Console.Printf("    (\cz[STEP 4c] player-damagemobj input\c-: \caArmorIgnoreFactorGeneral = %8f\c-, \cydmg = %d\c- (Player Actor))", PlayerArmorIgnoreFactorGeneral, damage);
				}
			}

			int predirdmg = damage;
			// Direct Damage Changes
			if (infl == "DemonFire" || infl == "DemonFireCrisis" || 
					infl == "MiniFirePuff" || infl == "MiniFirePuffCrisis" || 
					infl == "DogFireNew" || infl == "DogFireNewCrisis" ||
					infl == "FireBreath" || infl == "FireBreathCrisis" ||
					infl == "SGuardianFlameBreath" || infl == "SGuardianFlameBreathCrisis" ||
					infl == "Demon5Jet" || infl == "Demon5JetCrisis")
			{
				damage *= 1.125;
			}
			if (dvdsdebug_playerdmgdisplays > 0 && damage > 0) 
			{
				if (predirdmg != damage) Console.Printf("    (\cz[STEP 5] Direct Dmg Changes\c-: \cypredmg = %d\c-, \cydmg = %d\c-)", predirdmg, damage);
														else Console.Printf("    (\cz[STEP 5] Direct Dmg Changes\c-: \caSKIPPED\c-, \cydmg = %d\c-)", predirdmg);
			}
		}

		// Space for rent :V
		mobjdmg = damage;

		//************************************************************************
		let ret = super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		//************************************************************************
		
		//**********************************************
		//*Post "PlayerStatItem" and "Resistances" Info*
		//**********************************************
		if (dvdsdebug_playerdmgdisplays > 0 && damage > 0)
		{
			if (ret > 0) Console.Printf("    (\cz[STEP 12] player-damagemobj output\c-: \cydmg = %d\c-, \cwdmgtype = %s\c-, \cdinflictor = %s\c-, \cnsource = %s\c-)", ret, mod, infl, sour);
							else Console.Printf("    (\cz[STEP 12] player-damagemobj output\c-: \caSKIPPED\c-, \cydmg = %d\c-)", ret);
		}

		if (ret > 0) 
		{
			if (criticalhit)
			{
				A_GiveInventory("TookCriticalHit",1);
				A_PlaySound("monster/criticalhit",CHAN_BODY,1.0,0,ATTN_NORM);
				Console.Printf("\cxDealt a Desperate Blow!", criticalhit);
			}
			int hpratio = ret * 100 / max(1, CallACS("StatCheck",1));
			int cursemulti = 1;
			int cursedivisor = 1;
			if (hpratio >= 201)										{ cursemulti = 8; cursedivisor = 2; }
			if (hpratio >= 151 && hpratio <= 200)	{ cursemulti = 7; cursedivisor = 2; }
			if (hpratio >= 101 && hpratio <= 150)	{ cursemulti = 6; cursedivisor = 2; }
			if (hpratio >= 81 && hpratio <= 100)	{ cursemulti = 5; cursedivisor = 2; }
			if (hpratio >= 61 && hpratio <= 80)		{ cursemulti = 4; cursedivisor = 2; }
			if (hpratio >= 41 && hpratio <= 60)		{ cursemulti = 3; cursedivisor = 2; }
			if (hpratio >= 21 && hpratio <= 40)		{ cursemulti = 2; cursedivisor = 2; }
			if (hpratio <= 20)										{ cursemulti = 1; cursedivisor = 2; }
			if (dvdsdebug_playerdmgdisplays > 0) Console.Printf("    (\cz[STEP 13] player-damagemobj uncurse stuff\c-: \cydmg = %d\c-, \cwcursemulti = %d\c-, \cxcursedivisor = %d\c-, \cdhpratio = %d\c-)", ret, cursemulti, cursedivisor, hpratio);
			ACS_NamedExecuteAlways("CursedShieldPain",0,1,cursemulti,cursedivisor);
		}
		else
		{
			if (!(EvadedTheAttack || GhostDashing) && predamage > 0)
			{
				if (mod != 'falling' || mod != 'Drowning') 
				{
					if (CallACS("GetBuffTimer",4) > 0 || bINVULNERABLE || player.cheats & CF_GODMODE2 || player.cheats & CF_GODMODE || CountInv("InvulnerabilitySpell",AAPTR_PLAYER1) > 0 || CountInv("IsInvulnerable",AAPTR_PLAYER1) > 0)
					{ 
						A_GiveInventory("TookNoDamageInvuln",1);
						A_PlaySound("Player/TookNoDamageInvuln",CHAN_BODY,frandom(0.375,0.625),0,ATTN_NORM); 
					}
					else 
					{ 
						A_GiveInventory("TookNoDamage",1);
						A_PlaySound("Player/TookNoDamage",CHAN_BODY,frandom(0.375,0.625),0,ATTN_NORM); 
					}
				}
			}

			if (neverbleeds == 0)
			{
				bNOBLOOD = 1;
				bNOBLOODDECALS = 1;
			}
			if (dvdsdebug_playerdmgdisplays > 0) Console.Printf("    (\cz[STEP 13] player-damagemobj uncurse stuff\c-: \caSKIPPED\c-)", ret);
		}

		saveddamage = 0;
		// End
		return ret;
	}
	
	// Reset Breathing Scale
	void A_APPBreatheReset()
	{
		scaleymulti = 1.00;
		breathdirection = 0;
		breathframe = 0;
		A_SetScale(basexscale,baseyscale*scaleymulti);
	}

	// Breathing Function
	void A_APPBreathe(double startpoint = 1.00, double endpoint = 0.976, double breathincrementbase = 0.002, double basetics = 4)
	{
		double StaminaBreathSpeed = 1.0;
		int StaminaLevel;
		int StaminaMax = 10000;
		if (CallACS("MiscVarCheckDECORATE",22) > 0) StaminaMax = CallACS("MiscVarCheckDECORATE",22);
		StaminaLevel = CallACS("MiscVarCheckDECORATE",21) * 10000 / StaminaMax;

		if (StaminaLevel < 157) StaminaBreathSpeed = 1.99;
		if (StaminaLevel > 156 && StaminaLevel < 626) StaminaBreathSpeed = 1.825;
		if (StaminaLevel > 625 && StaminaLevel < 1251) StaminaBreathSpeed = 1.66;
		if (StaminaLevel > 1250 && StaminaLevel < 2501) StaminaBreathSpeed = 1.495;
		if (StaminaLevel > 2500 && StaminaLevel < 5001) StaminaBreathSpeed = 1.33;
		if (StaminaLevel > 5000 && StaminaLevel < 7501) StaminaBreathSpeed = 1.165;
		if (StaminaLevel > 7500 && StaminaLevel < 12501) StaminaBreathSpeed = 1.00;
		if (StaminaLevel > 12500 && StaminaLevel < 20001) StaminaBreathSpeed = 0.835;
		if (StaminaLevel > 20000 && StaminaLevel < 27501) StaminaBreathSpeed = 0.67;
		if (StaminaLevel > 27500 && StaminaLevel < 35001) StaminaBreathSpeed = 0.505;
		if (StaminaLevel > 35000 && StaminaLevel < 42501) StaminaBreathSpeed = 0.34;
		if (StaminaLevel > 42500 && StaminaLevel < 48751) StaminaBreathSpeed = 0.175;
		if (StaminaLevel > 48750) StaminaBreathSpeed = 0.01;
		breathincrementbase *= StaminaBreathSpeed;
		
		double ticmulti = 1.00 * (tics / basetics);
		breathincrementbase *= ticmulti;

		if (breathdirection == 0)
		{
			breathframe++;
			scaleymulti -= breathincrementbase;
			if (scaleymulti <= endpoint) { scaleymulti = endpoint; breathdirection = 1; breathframe = 0; }
		}
		else
		{
			breathframe++;
			scaleymulti += breathincrementbase;
			if (scaleymulti >= startpoint) { scaleymulti = startpoint; breathdirection = 0; breathframe = 0; }
		}
		/*
		Console.Printf("scaleymulti = %8f, breathincrementbase = %8f, breathdirection = %d, breathframe = %d, StaminaBreathSpeed = %8f, ticmulti = %8f, actualtics = %d, basetics = %d", 
										scaleymulti, 
										breathincrementbase, 
										breathdirection, 
										breathframe, 
										StaminaBreathSpeed, 
										ticmulti, 
										tics, 
										basetics);
		*/
		A_SetScale(basexscale,baseyscale*scaleymulti);
	}
	
	/** Returns true if “Inventory.RestrictedTo” and/or “Inventory.ForbiddenTo” rules do not allow PlayerPawns of the given class to pick up items of the given class. */
	static clearscope bool IsItemForbidden(Class<PlayerPawn> pp, Class<Inventory> item)
	{
		let d = GetDefaultByType(item);
		
		for (let i = 0, s = d.ForbiddenToPlayerClass.Size(); i < s; i++)
		if (pp is d.ForbiddenToPlayerClass[i])
			// Item is forbidden to this class.
			return true;
		
		let s = d.RestrictedToPlayerClass.Size();
		
		if (!s)
			// No restrictions.
			return false;
		else
		{
			for (let i = 0; i < s; i++)
			if (pp is d.RestrictedToPlayerClass[i])
				// Item is restricted, but this class is permitted.
				return false;
			
			// Item is restricted, and this class is not on the list.
			return true;
		}
	}
	
	/** Returns true if “Inventory.RestrictedTo” and/or “Inventory.ForbiddenTo” rules do not allow any of the currently active players to pick up items of the given class. */
	static clearscope bool IsItemForbiddenToAll(Class<Inventory> item)
	{
		bool anyForbidden = false;
		
		for (let i = 0; i < MAXPLAYERS; i++)
		if (playeringame[i] && players[i].mo)
		{
			if (IsItemForbidden(players[i].mo.GetClass(), item))
				// The item is forbidden to at least one player.
				anyForbidden = true;
			else
				// The item is not forbidden to at least one player.
				return false;
		}
		
		// In the unlikely event that no players are in-game and have an actor, this will correctly return false. Otherwise, if everyone is forbidden, this will return true.
		return anyForbidden;
	}
}
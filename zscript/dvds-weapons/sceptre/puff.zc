class SceptrePuff : AetheriusMeleePuff
{
	default
	{
		VSpeed 0;
		RenderStyle 'Translucent';
		DamageType 'Sceptre';
		SceptrePuff.EnabledEffects 0xFFFFFFFF; // Enable everything by default.
		+PUFFONACTORS;
		+FORCEPAIN;
		+SPECTRAL;
		+BRIGHT;
		-ALLOWPARTICLES;
	}
	
	enum EEffectFlags
	{
		SPFX_QUAKE_HITWALL = 1 << 0,
		SPFX_QUAKE_HITPROJECTILE = 1 << 1,
		SPFX_QUAKE_HITACTOR = 1 << 2,
		SPFX_QUAKE_ALL = (SPFX_QUAKE_HITWALL | SPFX_QUAKE_HITPROJECTILE | SPFX_QUAKE_HITACTOR),
		SPFX_SOUND_HITWALL = 1 << 3,
		SPFX_SOUND_HITPROJECTILE = 1 << 4,
		SPFX_SOUND_HITACTOR = 1 << 5,
		SPFX_SOUND_ALL = (SPFX_SOUND_HITWALL | SPFX_SOUND_HITPROJECTILE | SPFX_SOUND_HITACTOR),
		SPFX_IMPACT = 1 << 6,
		SPFX_ALL_HITWALL = (SPFX_QUAKE_HITWALL | SPFX_SOUND_HITWALL | SPFX_IMPACT),
		SPFX_ALL_HITPROJECTILE = (SPFX_QUAKE_HITPROJECTILE | SPFX_SOUND_HITPROJECTILE | SPFX_IMPACT),
		SPFX_ALL_HITACTOR = (SPFX_QUAKE_HITACTOR | SPFX_SOUND_HITACTOR | SPFX_IMPACT)
	};
	
	static EEffectFlags GetEffectFlagsFor(Actor a)
	{
		if (!a)
			return SPFX_ALL_HITWALL | SPFX_IMPACT;
		else if (a.bMissile)
			return SPFX_ALL_HITPROJECTILE | SPFX_IMPACT;
		else if (a.player || a.bShootable || a.bIsMonster || a.bTouchy || a.bVulnerable)
			return SPFX_ALL_HITACTOR | SPFX_IMPACT;
		else
			return 0;
	}
	
	EEffectFlags EnabledEffects;
	property EnabledEffects: EnabledEffects;
	
	/**
	 * Level of the Sceptre that generated this puff. This should be set externally (by the Sceptre class) when this puff is spawned.
	 */
	int SceptreLevel;
	
	protected AnimSpeedScaler animSpeed;
	
	override void BeginPlay()
	{
		animSpeed.Target = self;
		Super.BeginPlay();
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Refresh();
	}
	
	override void Tick()
	{
		Super.Tick();
		animSpeed.Tick();
	}
	
	/**
	 * Does things that need to happen when the victim of this puff is hit. Specifically, this method does the following:
	 *
	 * • Makes a sound and quake, if configured to.
	 * • Sets the scale and alpha of this puff, as appropriate for the Sceptre level.
	 * • If this puff is in the Fade sequence, moves it back into the Spawn sequence.
	 *
	 * This method is automatically called whenever this puff is spawned. It should be called again if this puff is moved.
	 */
	virtual void Refresh()
	{
		animSpeed.Scale = AnimSpeedScales[SceptreLevel];
		A_HitSparkGetSize2();
		Scale *= Scales[SceptreLevel];
		Alpha = Opacities[SceptreLevel];
		
		let effectFlags = GetEffectFlagsFor(tracer);
		
		if (SPFX_QUAKE_ALL & effectFlags & EnabledEffects)
			A_PuffQuake(
				QuakeBaseIntensity[SceptreLevel],
				QuakeBaseDuration[SceptreLevel],
				QuakeBaseRadius[SceptreLevel]
			);
		
		if (SPFX_SOUND_ALL & effectFlags & EnabledEffects)
			A_PlaySound(
				(effectFlags & SPFX_SOUND_HITACTOR)? HitThingSounds[SceptreLevel] :
				(effectFlags & SPFX_SOUND_HITPROJECTILE)? HitProjectileSounds[SceptreLevel] :
				HitWallSounds[SceptreLevel],
				slot: CHAN_WEAPON
			);
		
		if (SPFX_IMPACT & effectFlags & EnabledEffects)
		{
			let sw = SceptreShockwave(Spawn("SceptreShockwave", Pos));
			sw.EnabledEffects = 0;
			sw.SceptreLevel = SceptreLevel;
		}
		
		SetState(SpawnState);
	}
	
	states
	{
		Spawn:
			TNT1 A 0 nodelay
			{
				{
					let secondary = Spawn("SceptreShockwave", Pos, replace: ALLOW_REPLACE);
					let ssp = SceptrePuff(secondary);
					if (ssp)
					{
						ssp.EnabledEffects = 0;
						ssp.SceptreLevel = invoker.SceptreLevel;
					}
				}
			}
			
			SCIM ABCDE 1 A_FadeOut(Alpha / 10.);
			stop;
			
		Melee:
			// Override the Melee state defined by BulletPuff.
			TNT1 A 0 { return SpawnState; }
	}
}

class SceptreShockwave : SceptrePuff
{
	states
	{
		Spawn:
			SCIM GHIJKLM 1 nodelay A_FadeOut(Alpha / 12.);
			stop;
	}
}

class SceptreDefenseHit : SceptrePuff
{
	default
	{
		Scale 0;
	}
	
	private int BobStartTic;
	protected double BaseScale;
	
	override void Refresh()
	{
		Alpha = Opacities[SceptreLevel];
		
		// Same as A_HitSparkGetSize2, but without changing the actual scale field.
		BaseScale = Scales[SceptreLevel] * (1. + (CallACS("MiscVarCheckDECORATE",10005) * .05) + (CallACS("MiscVarCheckDECORATE",10006) * .125));
	}
	
	states
	{
		Spawn:
			// Wait for PostBeginPlay to run.
			TNT1 A 1;
			
			SCSK J 1
			{
				Scale.X += BaseScale / 17.5;
				Scale.Y = Scale.X;
				return A_JumpIf(Scale.X >= BaseScale, 1);
			}
			wait;
			
			#### # 0 { invoker.BobStartTic = gametic; }
			
			#### # 1
			{
				A_FadeOut(SceptrePuff.Opacities[invoker.SceptreLevel] / 12., FTF_REMOVE);
				Scale.Y = Scale.X = BaseScale + (sin((gametic - invoker.BobStartTic) * (360. / 17.5)) * (Scales[SceptreLevel] * .25));
			}
			wait;
	}
}

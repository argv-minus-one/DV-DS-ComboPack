class SceptrePuff : AetheriusMeleePuff
{
	default
	{
		VSpeed 0;
		RenderStyle 'Translucent';
		DamageType 'Sceptre';
		SceptrePuff.EnabledEffects 0xFFFFFFFF; // Enable everything by default.
		+PUFFONACTORS;
		+FORCEPAIN;
		+SPECTRAL;
		-ALLOWPARTICLES;
	}
	
	enum EEffectFlags
	{
		SPFX_QUAKE_HITWALL = 1 << 0,
		SPFX_QUAKE_HITPROJECTILE = 1 << 1,
		SPFX_QUAKE_HITACTOR = 1 << 2,
		SPFX_QUAKE_ALL = (SPFX_QUAKE_HITWALL | SPFX_QUAKE_HITPROJECTILE | SPFX_QUAKE_HITACTOR),
		SPFX_SOUND_HITWALL = 1 << 3,
		SPFX_SOUND_HITPROJECTILE = 1 << 4,
		SPFX_SOUND_HITACTOR = 1 << 5,
		SPFX_SOUND_ALL = (SPFX_SOUND_HITWALL | SPFX_SOUND_HITPROJECTILE | SPFX_SOUND_HITACTOR),
		SPFX_ALL_HITWALL = (SPFX_QUAKE_HITWALL | SPFX_SOUND_HITWALL),
		SPFX_ALL_HITPROJECTILE = (SPFX_QUAKE_HITPROJECTILE | SPFX_SOUND_HITPROJECTILE),
		SPFX_ALL_HITACTOR = (SPFX_QUAKE_HITACTOR | SPFX_SOUND_HITACTOR)
	};
	
	static EEffectFlags GetEffectFlagsFor(Actor a)
	{
		if (!a)
			return SPFX_ALL_HITWALL;
		else if (a.bMissile)
			return SPFX_ALL_HITPROJECTILE;
		else if (a.player || a.bShootable || a.bIsMonster || a.bTouchy || a.bVulnerable)
			return SPFX_ALL_HITACTOR;
		else
			return 0;
	}
	
	const FadeRate = 1. / 7.;
	
	EEffectFlags EnabledEffects;
	property EnabledEffects: EnabledEffects;
	
	State FadeState;
	
	/**
	 * Level of the Sceptre that generated this puff. This should be set externally (by the Sceptre class) when this puff is spawned.
	 */
	int SceptreLevel;
	
	override void BeginPlay()
	{
		Super.BeginPlay();
		FadeState = FindState("Fade", exact: true);
	}
	
	override void PostBeginPlay()
	{
		Super.PostBeginPlay();
		Refresh();
	}
	
	override void Tick()
	{
		Super.Tick();
		
		if (InStateSequence(CurState, FadeState))
			A_FadeOut(Alpha * FadeRate, FTF_REMOVE);
	}
	
	/**
	 * Does things that need to happen when the victim of this puff is hit. Specifically, this method does the following:
	 *
	 * • Makes a sound and quake, if configured to.
	 * • Sets the scale and alpha of this puff, as appropriate for the Sceptre level.
	 * • If this puff is in the Fade sequence, moves it back into the Spawn sequence.
	 *
	 * This method is automatically called whenever this puff is spawned. It should be called again if this puff is moved.
	 */
	virtual void Refresh()
	{
		Scale.X = Scale.Y = Scales[SceptreLevel];
		Alpha = Opacities[SceptreLevel];
		
		let effectFlags = GetEffectFlagsFor(tracer);
		
		if (SPFX_QUAKE_ALL & effectFlags & EnabledEffects)
			A_PuffQuake(
				QuakeBaseIntensity[SceptreLevel],
				QuakeBaseDuration[SceptreLevel],
				QuakeBaseRadius[SceptreLevel]
			);
		
		if (SPFX_SOUND_ALL & effectFlags & EnabledEffects)
			A_PlaySound(
				(effectFlags & SPFX_SOUND_HITACTOR)? HitThingSounds[SceptreLevel] :
				(effectFlags & SPFX_SOUND_HITPROJECTILE)? HitProjectileSounds[SceptreLevel] :
				HitWallSounds[SceptreLevel],
				slot: CHAN_WEAPON
			);
		
		if (InStateSequence(CurState, FadeState))
			SetState(SpawnState);
	}
	
	states
	{
		Spawn:
		Melee:
		Crash:
			SCSK A 3 bright;
		
		Fade:
			SCSK GHIJKJIH 3 bright;
			stop;
	}
}

class SceptrePuffTracker : Inventory
{
	override void Tick()
	{
		Super.Tick();
		
		if (Owner && (!target || target.bDestroyed))
			Owner.RemoveInventory(self);
		if (!Owner)
			Destroy();
	}
}

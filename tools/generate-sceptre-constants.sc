// Scala script that generates some of the constant tables used in sceptre.zc. It outputs them on stdout, which can be redirected into a file.

import math._

// Framework

def indent(s: String) = s"\t$s"

/** Inserts blank lines between each block. */
def insertBlanks(blocks: Seq[String]*): Seq[String] = {
	// Insert blank lines between each block.
	(for {
		block <- blocks
		line <- "" +: block
	} yield line).tail
}

def PlainBlock(lines: String*): Seq[String] = lines

def ConstantTable(
	typeAndName: String,
	perLine: Int,
	constants: Seq[Any],
	comment: String = ""
): Seq[String] = {
	val b = Seq.newBuilder[String]
	
	if (!comment.isEmpty)
		b += s"// $comment"
	
	b += s"static const ${typeAndName}[] ="
	b += "{"
	
	b ++= {
		val stringsWithCommas = (for {
			v <- constants dropRight 1
			s = s"$v,"
		} yield s) :+ constants.last.toString
		
		for {
			lineItems <- stringsWithCommas grouped perLine
			lineText = lineItems mkString ("\t", " ", "")
		} yield lineText
	}
	
	b += "};"
	b.result()
}

def Extension(
	kindAndName: String,
	contents: Seq[String]*
): Seq[String] = {
	val b = Seq.newBuilder[String]
	
	b += s"extend $kindAndName"
	b += "{"
	b ++= insertBlanks(contents: _*) map indent
	b += "}"
	
	b.result()
}

def Show(contents: Seq[String]*): Unit = {
	print((insertBlanks(contents: _*) :+ "") mkString "\n")
}

// Data

Show(
	PlainBlock("// This file is automatically generated by tools/generate-sceptre-constants.sc - do not edit!"),
	
	Extension(
		"class SceptreOfEmpyreaZSC",
		
		ConstantTable(
			"Sound SceptreSwingSounds", 3,
			for {
				lv <- 0 to 16
				sound = s""""SceptreSwingLvl$lv""""
			} yield sound
		),
		
		ConstantTable(
			"float SceptreAttackSpeeds", 5,
			for {
				lv <- 0 to 16
				speed = lv * -0.03125f
			} yield speed
		),
		
		ConstantTable(
			"Sound SceptreSpinAttackSounds", 3,
			for {
				lv <- 0 to 16
				sound = s""""SceptreSwingLvl$lv""""
			} yield sound
		),
		
		ConstantTable(
			"float SceptreSpinAttackSpeeds", 6,
			for {
				lv <- 0 to 16
				speed = {
					if (lv >= 12) 36f + ((lv - 12) * 6f)
					else 21.6f + (lv * 1.2f)
				}
			} yield speed
		),
		
		ConstantTable(
			"float SceptreTwirlStaminaCost", 6,
			for {
				lv <- 0 to 16
			} yield 1 // TODO
		),
		
		ConstantTable(
			"float SceptreTwirlMPCost", 5,
			for {
				lv <- 0 to 16
				worst = 0.21052632f
				best = 0.046511628f
				// See tools/SceptreConstantsData.ods (spreadsheet) for explanation.
				cost = best + ((worst - best) * (1d - pow(lv / 16d, 2)))
			} yield cost.toFloat
		),
		
		ConstantTable(
			"float TwirlSpinRate", 5,
			for {
				lv <- 0 to 16
				worst = 37.2413793103448
				best = 80.0
				rate = worst + ((best - worst) * (lv / 16d))
			} yield rate.toFloat
		),
		
		ConstantTable(
			"Sound TwirlSound", 3,
			for {
				lv <- 0 to 16
				soundNum = {
					if (lv >= 15) 3
					else if (lv >= 8) 2
					else 1
				}
				sound = s""""SceptreTwirl$soundNum""""
			} yield sound
		)
	),
	
	Extension(
		"class SceptrePuff",
		
		ConstantTable(
			"Sound HitThingSounds", 4,
			for {
				lv <- 0 to 16
				soundIndex = 1 + (lv >> 3)
				literal = s""""SceptreHitThing${soundIndex}""""
			} yield literal
		),
		
		ConstantTable(
			"Sound HitWallSounds", 3,
			for {
				lv <- 0 to 16
				soundIndex = lv >> 3
				literal = s""""SceptreEmpyrea/HitWall${if (soundIndex == 0) "" else soundIndex.toString}""""
			} yield literal
		),
		
		ConstantTable(
			"Sound HitProjectileSounds", 4,
			for (_ <- 0 to 16) yield """"SceptreBlocked""""
		),
		
		ConstantTable(
			"int QuakeBaseIntensity", 6,
			for {
				lv <- 0 to 16
				intensity = 1 + (lv >> 3)
			} yield intensity
		),
		
		ConstantTable(
			"int QuakeBaseDuration", 6,
			for {
				lv <- 0 to 16
				dur = 8 + (lv >> 1)
			} yield dur
		),
		
		ConstantTable(
			"int QuakeBaseRadius", 6,
			for {
				lv <- 0 to 16
				tr = 512 + (lv * 32)
			} yield tr
		),
		
		ConstantTable(
			"float Scales", 6,
			for {
				lv <- 0 to 16
				tr = 0.375f + (lv * (0.875f - 0.375f) / 16f)
			} yield tr
		),
		
		ConstantTable(
			"float Opacities", 6,
			for {
				lv <- 0 to 16
				tr = 0.5f + (lv * (0.833333f - 0.5f) / 16f)
			} yield tr
		)
	)
)
